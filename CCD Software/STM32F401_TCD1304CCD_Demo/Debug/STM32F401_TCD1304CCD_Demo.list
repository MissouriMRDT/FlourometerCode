
STM32F401_TCD1304CCD_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a84  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008c18  08008c18  00018c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c80  08008c80  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08008c80  08008c80  00018c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c88  08008c88  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08008c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c74  20000100  08008d90  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d74  08008d90  00024d74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cbf  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003396  00000000  00000000  00034def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00038188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  000393c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e8  00000000  00000000  0003a490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168ed  00000000  00000000  00054a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aaf8  00000000  00000000  0006b365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105e5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  00105eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008c00 	.word	0x08008c00

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	08008c00 	.word	0x08008c00

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b598      	push	{r3, r4, r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fcf6 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f848 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 faf2 	bl	8000adc <MX_GPIO_Init>
  MX_TIM2_Init();
 80004f8:	f000 f902 	bl	8000700 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004fc:	f000 f978 	bl	80007f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000500:	f000 f9ec 	bl	80008dc <MX_TIM4_Init>
  MX_TIM5_Init();
 8000504:	f000 fa5c 	bl	80009c0 <MX_TIM5_Init>
  MX_ADC1_Init();
 8000508:	f000 f8a8 	bl	800065c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 800050c:	f007 fe32 	bl	8008174 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PA6 - fM
 8000510:	2100      	movs	r1, #0
 8000512:	4815      	ldr	r0, [pc, #84]	; (8000568 <main+0x80>)
 8000514:	f003 fbd2 	bl	8003cbc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000518:	210c      	movs	r1, #12
 800051a:	4814      	ldr	r0, [pc, #80]	; (800056c <main+0x84>)
 800051c:	f003 fbce 	bl	8003cbc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PA0 - ICG
 8000520:	2100      	movs	r1, #0
 8000522:	4813      	ldr	r0, [pc, #76]	; (8000570 <main+0x88>)
 8000524:	f003 fbca 	bl	8003cbc <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COUNTER(&htim2, 66); //600ns delay
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <main+0x88>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2242      	movs	r2, #66	; 0x42
 800052e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //PA2 - SH
 8000530:	2108      	movs	r1, #8
 8000532:	4810      	ldr	r0, [pc, #64]	; (8000574 <main+0x8c>)
 8000534:	f003 fbc2 	bl	8003cbc <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //(uint8_t *)
	  CDC_Transmit_FS(data, strlen (data));
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x90>)
 800053a:	681c      	ldr	r4, [r3, #0]
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <main+0x90>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fe47 	bl	80001d4 <strlen>
 8000546:	4603      	mov	r3, r0
 8000548:	b29b      	uxth	r3, r3
 800054a:	4619      	mov	r1, r3
 800054c:	4620      	mov	r0, r4
 800054e:	f007 fecf 	bl	80082f0 <CDC_Transmit_FS>
	  HAL_Delay (1000);
 8000552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000556:	f000 fd33 	bl	8000fc0 <HAL_Delay>

	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCDBuffer);
 800055a:	f241 7270 	movw	r2, #6000	; 0x1770
 800055e:	4907      	ldr	r1, [pc, #28]	; (800057c <main+0x94>)
 8000560:	4807      	ldr	r0, [pc, #28]	; (8000580 <main+0x98>)
 8000562:	f000 fd95 	bl	8001090 <HAL_ADC_Start_DMA>
	  CDC_Transmit_FS(data, strlen (data));
 8000566:	e7e7      	b.n	8000538 <main+0x50>
 8000568:	200001ac 	.word	0x200001ac
 800056c:	200001f4 	.word	0x200001f4
 8000570:	20000164 	.word	0x20000164
 8000574:	2000023c 	.word	0x2000023c
 8000578:	20000000 	.word	0x20000000
 800057c:	20000284 	.word	0x20000284
 8000580:	2000011c 	.word	0x2000011c

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f008 fb2c 	bl	8008bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a28      	ldr	r2, [pc, #160]	; (8000654 <SystemClock_Config+0xd0>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b26      	ldr	r3, [pc, #152]	; (8000654 <SystemClock_Config+0xd0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b23      	ldr	r3, [pc, #140]	; (8000658 <SystemClock_Config+0xd4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xd4>)
 80005d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xd4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005f8:	2319      	movs	r3, #25
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000602:	2304      	movs	r3, #4
 8000604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000606:	2307      	movs	r3, #7
 8000608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fe7c 	bl	800330c <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061a:	f000 fa97 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2102      	movs	r1, #2
 800063a:	4618      	mov	r0, r3
 800063c:	f003 f8de 	bl	80037fc <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000646:	f000 fa81 	bl	8000b4c <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	463b      	mov	r3, r7
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000670:	4a21      	ldr	r2, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x9c>)
 8000672:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000676:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_ADC1_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_ADC1_Init+0x98>)
 800069e:	4a17      	ldr	r2, [pc, #92]	; (80006fc <MX_ADC1_Init+0xa0>)
 80006a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006be:	f000 fca3 	bl	8001008 <HAL_ADC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006c8:	f000 fa40 	bl	8000b4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006cc:	2303      	movs	r3, #3
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_ADC1_Init+0x98>)
 80006de:	f000 fddb 	bl	8001298 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006e8:	f000 fa30 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000011c 	.word	0x2000011c
 80006f8:	40012000 	.word	0x40012000
 80006fc:	0f000001 	.word	0x0f000001

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08e      	sub	sp, #56	; 0x38
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]
 800072e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000730:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_TIM2_Init+0xe8>)
 8000732:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000736:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_TIM2_Init+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_TIM2_Init+0xe8>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 630000-1;
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_TIM2_Init+0xe8>)
 8000746:	4a29      	ldr	r2, [pc, #164]	; (80007ec <MX_TIM2_Init+0xec>)
 8000748:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_TIM2_Init+0xe8>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <MX_TIM2_Init+0xe8>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000756:	4824      	ldr	r0, [pc, #144]	; (80007e8 <MX_TIM2_Init+0xe8>)
 8000758:	f003 fa08 	bl	8003b6c <HAL_TIM_Base_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000762:	f000 f9f3 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000770:	4619      	mov	r1, r3
 8000772:	481d      	ldr	r0, [pc, #116]	; (80007e8 <MX_TIM2_Init+0xe8>)
 8000774:	f003 fc14 	bl	8003fa0 <HAL_TIM_ConfigClockSource>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800077e:	f000 f9e5 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000782:	4819      	ldr	r0, [pc, #100]	; (80007e8 <MX_TIM2_Init+0xe8>)
 8000784:	f003 fa41 	bl	8003c0a <HAL_TIM_PWM_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800078e:	f000 f9dd 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000792:	2310      	movs	r3, #16
 8000794:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000796:	2380      	movs	r3, #128	; 0x80
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	4619      	mov	r1, r3
 80007a0:	4811      	ldr	r0, [pc, #68]	; (80007e8 <MX_TIM2_Init+0xe8>)
 80007a2:	f004 f863 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80007ac:	f000 f9ce 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b0:	2360      	movs	r3, #96	; 0x60
 80007b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 840-1;
 80007b4:	f240 3347 	movw	r3, #839	; 0x347
 80007b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	4619      	mov	r1, r3
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <MX_TIM2_Init+0xe8>)
 80007ca:	f003 fb27 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007d4:	f000 f9ba 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <MX_TIM2_Init+0xe8>)
 80007da:	f000 fa8b 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 80007de:	bf00      	nop
 80007e0:	3738      	adds	r7, #56	; 0x38
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000164 	.word	0x20000164
 80007ec:	00099cef 	.word	0x00099cef

080007f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000820:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <MX_TIM3_Init+0xe4>)
 8000822:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <MX_TIM3_Init+0xe8>)
 8000824:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000826:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <MX_TIM3_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_TIM3_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42-1;
 8000832:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <MX_TIM3_Init+0xe4>)
 8000834:	2229      	movs	r2, #41	; 0x29
 8000836:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_TIM3_Init+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <MX_TIM3_Init+0xe4>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000844:	4823      	ldr	r0, [pc, #140]	; (80008d4 <MX_TIM3_Init+0xe4>)
 8000846:	f003 f991 	bl	8003b6c <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000850:	f000 f97c 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085e:	4619      	mov	r1, r3
 8000860:	481c      	ldr	r0, [pc, #112]	; (80008d4 <MX_TIM3_Init+0xe4>)
 8000862:	f003 fb9d 	bl	8003fa0 <HAL_TIM_ConfigClockSource>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800086c:	f000 f96e 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000870:	4818      	ldr	r0, [pc, #96]	; (80008d4 <MX_TIM3_Init+0xe4>)
 8000872:	f003 f9ca 	bl	8003c0a <HAL_TIM_PWM_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800087c:	f000 f966 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	4619      	mov	r1, r3
 800088e:	4811      	ldr	r0, [pc, #68]	; (80008d4 <MX_TIM3_Init+0xe4>)
 8000890:	f003 ffec 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800089a:	f000 f957 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089e:	2360      	movs	r3, #96	; 0x60
 80008a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21-1;
 80008a2:	2314      	movs	r3, #20
 80008a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <MX_TIM3_Init+0xe4>)
 80008b6:	f003 fab1 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80008c0:	f000 f944 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008c4:	4803      	ldr	r0, [pc, #12]	; (80008d4 <MX_TIM3_Init+0xe4>)
 80008c6:	f000 fa15 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 80008ca:	bf00      	nop
 80008cc:	3738      	adds	r7, #56	; 0x38
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200001ac 	.word	0x200001ac
 80008d8:	40000400 	.word	0x40000400

080008dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	; 0x38
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	f107 0320 	add.w	r3, r7, #32
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800090c:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <MX_TIM4_Init+0xdc>)
 800090e:	4a2b      	ldr	r2, [pc, #172]	; (80009bc <MX_TIM4_Init+0xe0>)
 8000910:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000912:	4b29      	ldr	r3, [pc, #164]	; (80009b8 <MX_TIM4_Init+0xdc>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000918:	4b27      	ldr	r3, [pc, #156]	; (80009b8 <MX_TIM4_Init+0xdc>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 800091e:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <MX_TIM4_Init+0xdc>)
 8000920:	22a7      	movs	r2, #167	; 0xa7
 8000922:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MX_TIM4_Init+0xdc>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <MX_TIM4_Init+0xdc>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000930:	4821      	ldr	r0, [pc, #132]	; (80009b8 <MX_TIM4_Init+0xdc>)
 8000932:	f003 f91b 	bl	8003b6c <HAL_TIM_Base_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800093c:	f000 f906 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	4619      	mov	r1, r3
 800094c:	481a      	ldr	r0, [pc, #104]	; (80009b8 <MX_TIM4_Init+0xdc>)
 800094e:	f003 fb27 	bl	8003fa0 <HAL_TIM_ConfigClockSource>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000958:	f000 f8f8 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <MX_TIM4_Init+0xdc>)
 800095e:	f003 f954 	bl	8003c0a <HAL_TIM_PWM_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000968:	f000 f8f0 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4619      	mov	r1, r3
 800097a:	480f      	ldr	r0, [pc, #60]	; (80009b8 <MX_TIM4_Init+0xdc>)
 800097c:	f003 ff76 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000986:	f000 f8e1 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098a:	2360      	movs	r3, #96	; 0x60
 800098c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 800098e:	2329      	movs	r3, #41	; 0x29
 8000990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	220c      	movs	r2, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_TIM4_Init+0xdc>)
 80009a2:	f003 fa3b 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80009ac:	f000 f8ce 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3738      	adds	r7, #56	; 0x38
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200001f4 	.word	0x200001f4
 80009bc:	40000800 	.word	0x40000800

080009c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b092      	sub	sp, #72	; 0x48
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
 80009fc:	615a      	str	r2, [r3, #20]
 80009fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a02:	4a35      	ldr	r2, [pc, #212]	; (8000ad8 <MX_TIM5_Init+0x118>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1680-1;
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a14:	f240 628f 	movw	r2, #1679	; 0x68f
 8000a18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a26:	482b      	ldr	r0, [pc, #172]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a28:	f003 f8a0 	bl	8003b6c <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000a32:	f000 f88b 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a40:	4619      	mov	r1, r3
 8000a42:	4824      	ldr	r0, [pc, #144]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a44:	f003 faac 	bl	8003fa0 <HAL_TIM_ConfigClockSource>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000a4e:	f000 f87d 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a52:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a54:	f003 f8d9 	bl	8003c0a <HAL_TIM_PWM_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8000a5e:	f000 f875 	bl	8000b4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a62:	2306      	movs	r3, #6
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4818      	ldr	r0, [pc, #96]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a72:	f003 fb5c 	bl	800412e <HAL_TIM_SlaveConfigSynchro>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8000a7c:	f000 f866 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4811      	ldr	r0, [pc, #68]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000a90:	f003 feec 	bl	800486c <HAL_TIMEx_MasterConfigSynchronization>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000a9a:	f000 f857 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9e:	2360      	movs	r3, #96	; 0x60
 8000aa0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 336-1;
 8000aa2:	f240 134f 	movw	r3, #335	; 0x14f
 8000aa6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2208      	movs	r2, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4807      	ldr	r0, [pc, #28]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000ab8:	f003 f9b0 	bl	8003e1c <HAL_TIM_PWM_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM5_Init+0x106>
  {
    Error_Handler();
 8000ac2:	f000 f843 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ac6:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <MX_TIM5_Init+0x114>)
 8000ac8:	f000 f914 	bl	8000cf4 <HAL_TIM_MspPostInit>

}
 8000acc:	bf00      	nop
 8000ace:	3748      	adds	r7, #72	; 0x48
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000023c 	.word	0x2000023c
 8000ad8:	40000c00 	.word	0x40000c00

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_GPIO_Init+0x4c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <MX_GPIO_Init+0x4c>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <MX_GPIO_Init+0x4c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_GPIO_Init+0x4c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <MX_GPIO_Init+0x4c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_GPIO_Init+0x4c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	 CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCDBuffer);
 8000b34:	f241 7170 	movw	r1, #6000	; 0x1770
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b3a:	f007 fbd9 	bl	80082f0 <CDC_Transmit_FS>

 }
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000284 	.word	0x20000284

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_ADC_MspInit+0x7c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d127      	bne.n	8000c1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_ADC_MspInit+0x80>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a15      	ldr	r2, [pc, #84]	; (8000c28 <HAL_ADC_MspInit+0x80>)
 8000bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_ADC_MspInit+0x80>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_ADC_MspInit+0x80>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_ADC_MspInit+0x80>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_ADC_MspInit+0x80>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c02:	2308      	movs	r3, #8
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <HAL_ADC_MspInit+0x84>)
 8000c16:	f000 ff77 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40012000 	.word	0x40012000
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d10e      	bne.n	8000c60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a26      	ldr	r2, [pc, #152]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c5e:	e03a      	b.n	8000cd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a20      	ldr	r2, [pc, #128]	; (8000ce8 <HAL_TIM_Base_MspInit+0xb8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d10e      	bne.n	8000c88 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a1c      	ldr	r2, [pc, #112]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
}
 8000c86:	e026      	b.n	8000cd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a17      	ldr	r2, [pc, #92]	; (8000cec <HAL_TIM_Base_MspInit+0xbc>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d10e      	bne.n	8000cb0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
}
 8000cae:	e012      	b.n	8000cd6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <HAL_TIM_Base_MspInit+0xc0>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10d      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_TIM_Base_MspInit+0xb4>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	371c      	adds	r7, #28
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40000400 	.word	0x40000400
 8000cec:	40000800 	.word	0x40000800
 8000cf0:	40000c00 	.word	0x40000c00

08000cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d14:	d11e      	bne.n	8000d54 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a33      	ldr	r2, [pc, #204]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d42:	2301      	movs	r3, #1
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4828      	ldr	r0, [pc, #160]	; (8000df0 <HAL_TIM_MspPostInit+0xfc>)
 8000d4e:	f000 fedb 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000d52:	e046      	b.n	8000de2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <HAL_TIM_MspPostInit+0x100>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d11e      	bne.n	8000d9c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b22      	ldr	r3, [pc, #136]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a21      	ldr	r2, [pc, #132]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	4619      	mov	r1, r3
 8000d94:	4816      	ldr	r0, [pc, #88]	; (8000df0 <HAL_TIM_MspPostInit+0xfc>)
 8000d96:	f000 feb7 	bl	8001b08 <HAL_GPIO_Init>
}
 8000d9a:	e022      	b.n	8000de2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <HAL_TIM_MspPostInit+0x104>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d11d      	bne.n	8000de2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a0f      	ldr	r2, [pc, #60]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <HAL_TIM_MspPostInit+0xf8>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <HAL_TIM_MspPostInit+0xfc>)
 8000dde:	f000 fe93 	bl	8001b08 <HAL_GPIO_Init>
}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40000400 	.word	0x40000400
 8000df8:	40000c00 	.word	0x40000c00

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <NMI_Handler+0x4>

08000e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <MemManage_Handler+0x4>

08000e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <BusFault_Handler+0x4>

08000e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <UsageFault_Handler+0x4>

08000e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e48:	f000 f89a 	bl	8000f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <OTG_FS_IRQHandler+0x10>)
 8000e56:	f001 f92b 	bl	80020b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20004648 	.word	0x20004648

08000e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <SystemInit+0x20>)
 8000e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <SystemInit+0x20>)
 8000e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e8e:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ea4:	4c0b      	ldr	r4, [pc, #44]	; (8000ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eb2:	f7ff ffd7 	bl	8000e64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f007 fe77 	bl	8008ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fb15 	bl	80004e8 <main>
  bx  lr    
 8000ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ec0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000ecc:	08008c90 	.word	0x08008c90
  ldr r2, =_sbss
 8000ed0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000ed4:	20004d74 	.word	0x20004d74

08000ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 fd37 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f808 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fe22 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x54>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_InitTick+0x58>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fd4f 	bl	80019e2 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e00e      	b.n	8000f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b0f      	cmp	r3, #15
 8000f52:	d80a      	bhi.n	8000f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f54:	2200      	movs	r2, #0
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f000 fd17 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f60:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000004 	.word	0x20000004
 8000f78:	2000000c 	.word	0x2000000c
 8000f7c:	20000008 	.word	0x20000008

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2000000c 	.word	0x2000000c
 8000fa4:	20003164 	.word	0x20003164

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20003164 	.word	0x20003164

08000fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc8:	f7ff ffee 	bl	8000fa8 <HAL_GetTick>
 8000fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fd8:	d005      	beq.n	8000fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_Delay+0x44>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe6:	bf00      	nop
 8000fe8:	f7ff ffde 	bl	8000fa8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d8f7      	bhi.n	8000fe8 <HAL_Delay+0x28>
  {
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000000c 	.word	0x2000000c

08001008 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001010:	2300      	movs	r3, #0
 8001012:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e033      	b.n	8001086 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fdbe 	bl	8000ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	f003 0310 	and.w	r3, r3, #16
 8001042:	2b00      	cmp	r3, #0
 8001044:	d118      	bne.n	8001078 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800104e:	f023 0302 	bic.w	r3, r3, #2
 8001052:	f043 0202 	orr.w	r2, r3, #2
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 fa3e 	bl	80014dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f023 0303 	bic.w	r3, r3, #3
 800106e:	f043 0201 	orr.w	r2, r3, #1
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
 8001076:	e001      	b.n	800107c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Start_DMA+0x1e>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e0ce      	b.n	800124c <HAL_ADC_Start_DMA+0x1bc>
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2201      	movs	r2, #1
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d018      	beq.n	80010f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0201 	orr.w	r2, r2, #1
 80010d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010d4:	4b5f      	ldr	r3, [pc, #380]	; (8001254 <HAL_ADC_Start_DMA+0x1c4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a5f      	ldr	r2, [pc, #380]	; (8001258 <HAL_ADC_Start_DMA+0x1c8>)
 80010da:	fba2 2303 	umull	r2, r3, r2, r3
 80010de:	0c9a      	lsrs	r2, r3, #18
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010e8:	e002      	b.n	80010f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001104:	d107      	bne.n	8001116 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001114:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b01      	cmp	r3, #1
 8001122:	f040 8086 	bne.w	8001232 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001150:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001164:	d106      	bne.n	8001174 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f023 0206 	bic.w	r2, r3, #6
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
 8001172:	e002      	b.n	800117a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2200      	movs	r2, #0
 8001178:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001182:	4b36      	ldr	r3, [pc, #216]	; (800125c <HAL_ADC_Start_DMA+0x1cc>)
 8001184:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118a:	4a35      	ldr	r2, [pc, #212]	; (8001260 <HAL_ADC_Start_DMA+0x1d0>)
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001192:	4a34      	ldr	r2, [pc, #208]	; (8001264 <HAL_ADC_Start_DMA+0x1d4>)
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800119a:	4a33      	ldr	r2, [pc, #204]	; (8001268 <HAL_ADC_Start_DMA+0x1d8>)
 800119c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	334c      	adds	r3, #76	; 0x4c
 80011d2:	4619      	mov	r1, r3
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f000 fc0f 	bl	80019fa <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 031f 	and.w	r3, r3, #31
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10f      	bne.n	8001208 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d129      	bne.n	800124a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	e020      	b.n	800124a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_ADC_Start_DMA+0x1dc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d11b      	bne.n	800124a <HAL_ADC_Start_DMA+0x1ba>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d114      	bne.n	800124a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	e00b      	b.n	800124a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f043 0210 	orr.w	r2, r3, #16
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f043 0201 	orr.w	r2, r3, #1
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000004 	.word	0x20000004
 8001258:	431bde83 	.word	0x431bde83
 800125c:	40012300 	.word	0x40012300
 8001260:	080016d5 	.word	0x080016d5
 8001264:	0800178f 	.word	0x0800178f
 8001268:	080017ab 	.word	0x080017ab
 800126c:	40012000 	.word	0x40012000

08001270 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x1c>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e105      	b.n	80014c0 <HAL_ADC_ConfigChannel+0x228>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d925      	bls.n	8001310 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68d9      	ldr	r1, [r3, #12]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	3b1e      	subs	r3, #30
 80012da:	2207      	movs	r2, #7
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43da      	mvns	r2, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	400a      	ands	r2, r1
 80012e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68d9      	ldr	r1, [r3, #12]
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	4603      	mov	r3, r0
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4403      	add	r3, r0
 8001302:	3b1e      	subs	r3, #30
 8001304:	409a      	lsls	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	e022      	b.n	8001356 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6919      	ldr	r1, [r3, #16]
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b29b      	uxth	r3, r3
 800131c:	461a      	mov	r2, r3
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	2207      	movs	r2, #7
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	400a      	ands	r2, r1
 8001332:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6919      	ldr	r1, [r3, #16]
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	b29b      	uxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	4603      	mov	r3, r0
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4403      	add	r3, r0
 800134c:	409a      	lsls	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b06      	cmp	r3, #6
 800135c:	d824      	bhi.n	80013a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	3b05      	subs	r3, #5
 8001370:	221f      	movs	r2, #31
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	400a      	ands	r2, r1
 800137e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3b05      	subs	r3, #5
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
 80013a6:	e04c      	b.n	8001442 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	d824      	bhi.n	80013fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b23      	subs	r3, #35	; 0x23
 80013c2:	221f      	movs	r2, #31
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43da      	mvns	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	400a      	ands	r2, r1
 80013d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	3b23      	subs	r3, #35	; 0x23
 80013ec:	fa00 f203 	lsl.w	r2, r0, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	631a      	str	r2, [r3, #48]	; 0x30
 80013f8:	e023      	b.n	8001442 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	3b41      	subs	r3, #65	; 0x41
 800140c:	221f      	movs	r2, #31
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4618      	mov	r0, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	3b41      	subs	r3, #65	; 0x41
 8001436:	fa00 f203 	lsl.w	r2, r0, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001442:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_ADC_ConfigChannel+0x234>)
 8001444:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a21      	ldr	r2, [pc, #132]	; (80014d0 <HAL_ADC_ConfigChannel+0x238>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d109      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1cc>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b12      	cmp	r3, #18
 8001456:	d105      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_ADC_ConfigChannel+0x238>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d123      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x21e>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b10      	cmp	r3, #16
 8001474:	d003      	beq.n	800147e <HAL_ADC_ConfigChannel+0x1e6>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b11      	cmp	r3, #17
 800147c:	d11b      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b10      	cmp	r3, #16
 8001490:	d111      	bne.n	80014b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a10      	ldr	r2, [pc, #64]	; (80014d8 <HAL_ADC_ConfigChannel+0x240>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9a      	lsrs	r2, r3, #18
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014a8:	e002      	b.n	80014b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f9      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	40012300 	.word	0x40012300
 80014d0:	40012000 	.word	0x40012000
 80014d4:	20000004 	.word	0x20000004
 80014d8:	431bde83 	.word	0x431bde83

080014dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e4:	4b79      	ldr	r3, [pc, #484]	; (80016cc <ADC_Init+0x1f0>)
 80014e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	685a      	ldr	r2, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	021a      	lsls	r2, r3, #8
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6899      	ldr	r1, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <ADC_Init+0x1f4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d022      	beq.n	80015ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001582:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6899      	ldr	r1, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6899      	ldr	r1, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	e00f      	b.n	80015da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0202 	bic.w	r2, r2, #2
 80015e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7e1b      	ldrb	r3, [r3, #24]
 80015f4:	005a      	lsls	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01b      	beq.n	8001640 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001616:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001626:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6859      	ldr	r1, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	3b01      	subs	r3, #1
 8001634:	035a      	lsls	r2, r3, #13
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	e007      	b.n	8001650 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800164e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	3b01      	subs	r3, #1
 800166c:	051a      	lsls	r2, r3, #20
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6899      	ldr	r1, [r3, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001692:	025a      	lsls	r2, r3, #9
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6899      	ldr	r1, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	029a      	lsls	r2, r3, #10
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	609a      	str	r2, [r3, #8]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40012300 	.word	0x40012300
 80016d0:	0f000001 	.word	0x0f000001

080016d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d13c      	bne.n	8001768 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d12b      	bne.n	8001760 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800170c:	2b00      	cmp	r3, #0
 800170e:	d127      	bne.n	8001760 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001728:	2b00      	cmp	r3, #0
 800172a:	d119      	bne.n	8001760 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0220 	bic.w	r2, r2, #32
 800173a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f043 0201 	orr.w	r2, r3, #1
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7ff f9e3 	bl	8000b2c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001766:	e00e      	b.n	8001786 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	f003 0310 	and.w	r3, r3, #16
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fd85 	bl	8001284 <HAL_ADC_ErrorCallback>
}
 800177a:	e004      	b.n	8001786 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fd67 	bl	8001270 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f043 0204 	orr.w	r2, r3, #4
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f7ff fd5a 	bl	8001284 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f4:	4013      	ands	r3, r2
 80017f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x44>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <__NVIC_GetPriorityGrouping+0x18>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	f003 0307 	and.w	r3, r3, #7
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	2b00      	cmp	r3, #0
 800184c:	db0b      	blt.n	8001866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	f003 021f 	and.w	r2, r3, #31
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <__NVIC_EnableIRQ+0x38>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	2001      	movs	r0, #1
 800185e:	fa00 f202 	lsl.w	r2, r0, r2
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000e100 	.word	0xe000e100

08001878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	6039      	str	r1, [r7, #0]
 8001882:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	db0a      	blt.n	80018a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	b2da      	uxtb	r2, r3
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <__NVIC_SetPriority+0x4c>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	0112      	lsls	r2, r2, #4
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	440b      	add	r3, r1
 800189c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a0:	e00a      	b.n	80018b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <__NVIC_SetPriority+0x50>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	3b04      	subs	r3, #4
 80018b0:	0112      	lsls	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	440b      	add	r3, r1
 80018b6:	761a      	strb	r2, [r3, #24]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000e100 	.word	0xe000e100
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b089      	sub	sp, #36	; 0x24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f1c3 0307 	rsb	r3, r3, #7
 80018e6:	2b04      	cmp	r3, #4
 80018e8:	bf28      	it	cs
 80018ea:	2304      	movcs	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3304      	adds	r3, #4
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d902      	bls.n	80018fc <NVIC_EncodePriority+0x30>
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3b03      	subs	r3, #3
 80018fa:	e000      	b.n	80018fe <NVIC_EncodePriority+0x32>
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001914:	f04f 31ff 	mov.w	r1, #4294967295
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43d9      	mvns	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	4313      	orrs	r3, r2
         );
}
 8001926:	4618      	mov	r0, r3
 8001928:	3724      	adds	r7, #36	; 0x24
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff8e 	bl	8001878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff29 	bl	80017d8 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff3e 	bl	8001820 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff8e 	bl	80018cc <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5d 	bl	8001878 <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff31 	bl	800183c <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa2 	bl	8001934 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_DMA_Start_IT+0x26>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e040      	b.n	8001aa2 <HAL_DMA_Start_IT+0xa8>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d12f      	bne.n	8001a94 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2202      	movs	r2, #2
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f82e 	bl	8001aaa <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	223f      	movs	r2, #63	; 0x3f
 8001a54:	409a      	lsls	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0216 	orr.w	r2, r2, #22
 8001a68:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 0208 	orr.w	r2, r2, #8
 8001a80:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e005      	b.n	8001aa0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b40      	cmp	r3, #64	; 0x40
 8001ad6:	d108      	bne.n	8001aea <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ae8:	e007      	b.n	8001afa <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	60da      	str	r2, [r3, #12]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e159      	b.n	8001dd8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8148 	bne.w	8001dd2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a2 	beq.w	8001dd2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a56      	ldr	r2, [pc, #344]	; (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <HAL_GPIO_Init+0x2e8>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_GPIO_Init+0x2ec>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a49      	ldr	r2, [pc, #292]	; (8001df8 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x202>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a48      	ldr	r2, [pc, #288]	; (8001dfc <HAL_GPIO_Init+0x2f4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x1fe>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a47      	ldr	r2, [pc, #284]	; (8001e00 <HAL_GPIO_Init+0x2f8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x1fa>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a46      	ldr	r2, [pc, #280]	; (8001e04 <HAL_GPIO_Init+0x2fc>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x1f6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x1f2>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e008      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e004      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <HAL_GPIO_Init+0x204>
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	69fa      	ldr	r2, [r7, #28]
 8001d0e:	f002 0203 	and.w	r2, r2, #3
 8001d12:	0092      	lsls	r2, r2, #2
 8001d14:	4093      	lsls	r3, r2
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d1c:	4935      	ldr	r1, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x2ec>)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d4e:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d54:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d78:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001da2:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dcc:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	61fb      	str	r3, [r7, #28]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	f67f aea2 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	40020400 	.word	0x40020400
 8001e00:	40020800 	.word	0x40020800
 8001e04:	40020c00 	.word	0x40020c00
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40013c00 	.word	0x40013c00

08001e10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e12:	b08f      	sub	sp, #60	; 0x3c
 8001e14:	af0a      	add	r7, sp, #40	; 0x28
 8001e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e10f      	b.n	8002042 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f006 fb9f 	bl	8008580 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2203      	movs	r2, #3
 8001e46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d102      	bne.n	8001e5c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f002 fe86 	bl	8004b72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	687e      	ldr	r6, [r7, #4]
 8001e6e:	466d      	mov	r5, sp
 8001e70:	f106 0410 	add.w	r4, r6, #16
 8001e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e84:	1d33      	adds	r3, r6, #4
 8001e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e88:	6838      	ldr	r0, [r7, #0]
 8001e8a:	f002 fd5d 	bl	8004948 <USB_CoreInit>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2202      	movs	r2, #2
 8001e98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0d0      	b.n	8002042 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 fe74 	bl	8004b94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e04a      	b.n	8001f48 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	333d      	adds	r3, #61	; 0x3d
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	333c      	adds	r3, #60	; 0x3c
 8001ed6:	7bfa      	ldrb	r2, [r7, #15]
 8001ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eda:	7bfa      	ldrb	r2, [r7, #15]
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	b298      	uxth	r0, r3
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	3344      	adds	r3, #68	; 0x44
 8001eee:	4602      	mov	r2, r0
 8001ef0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	3340      	adds	r3, #64	; 0x40
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	3348      	adds	r3, #72	; 0x48
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	334c      	adds	r3, #76	; 0x4c
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f2e:	7bfa      	ldrb	r2, [r7, #15]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3354      	adds	r3, #84	; 0x54
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	3301      	adds	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d3af      	bcc.n	8001eb2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
 8001f56:	e044      	b.n	8001fe2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d3b5      	bcc.n	8001f58 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	687e      	ldr	r6, [r7, #4]
 8001ff4:	466d      	mov	r5, sp
 8001ff6:	f106 0410 	add.w	r4, r6, #16
 8001ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002002:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002006:	e885 0003 	stmia.w	r5, {r0, r1}
 800200a:	1d33      	adds	r3, r6, #4
 800200c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800200e:	6838      	ldr	r0, [r7, #0]
 8002010:	f002 fe0c 	bl	8004c2c <USB_DevInit>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2202      	movs	r2, #2
 800201e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e00d      	b.n	8002042 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f003 ff5b 	bl	8005ef6 <USB_DevDisconnect>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800204a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_PCD_Start+0x1c>
 8002062:	2302      	movs	r3, #2
 8002064:	e020      	b.n	80020a8 <HAL_PCD_Start+0x5e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	2b01      	cmp	r3, #1
 8002074:	d109      	bne.n	800208a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002082:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 fd5e 	bl	8004b50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f003 ff0b 	bl	8005eb4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b08d      	sub	sp, #52	; 0x34
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 ffc9 	bl	800605e <USB_GetMode>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 848a 	bne.w	80029e8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 ff2d 	bl	8005f38 <USB_ReadInterrupts>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8480 	beq.w	80029e6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 ff1a 	bl	8005f38 <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d107      	bne.n	800211e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f002 0202 	and.w	r2, r2, #2
 800211c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 ff08 	bl	8005f38 <USB_ReadInterrupts>
 8002128:	4603      	mov	r3, r0
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b10      	cmp	r3, #16
 8002130:	d161      	bne.n	80021f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	699a      	ldr	r2, [r3, #24]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0210 	bic.w	r2, r2, #16
 8002140:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 020f 	and.w	r2, r3, #15
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	0c5b      	lsrs	r3, r3, #17
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	2b02      	cmp	r3, #2
 800216c:	d124      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d035      	beq.n	80021e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	6a38      	ldr	r0, [r7, #32]
 800218e:	f003 fd3f 	bl	8005c10 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800219e:	441a      	add	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b0:	441a      	add	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	621a      	str	r2, [r3, #32]
 80021b6:	e016      	b.n	80021e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	0c5b      	lsrs	r3, r3, #17
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	2b06      	cmp	r3, #6
 80021c2:	d110      	bne.n	80021e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021ca:	2208      	movs	r2, #8
 80021cc:	4619      	mov	r1, r3
 80021ce:	6a38      	ldr	r0, [r7, #32]
 80021d0:	f003 fd1e 	bl	8005c10 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	6a1a      	ldr	r2, [r3, #32]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e0:	441a      	add	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0210 	orr.w	r2, r2, #16
 80021f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f003 fe9c 	bl	8005f38 <USB_ReadInterrupts>
 8002200:	4603      	mov	r3, r0
 8002202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002206:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800220a:	f040 80a7 	bne.w	800235c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f003 fea1 	bl	8005f5e <USB_ReadDevAllOutEpInterrupt>
 800221c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800221e:	e099      	b.n	8002354 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 808e 	beq.w	8002348 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f003 fec5 	bl	8005fc6 <USB_ReadDevOutEPInterrupt>
 800223c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00c      	beq.n	8002262 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002254:	461a      	mov	r2, r3
 8002256:	2301      	movs	r3, #1
 8002258:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800225a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fec3 	bl	8002fe8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00c      	beq.n	8002286 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	015a      	lsls	r2, r3, #5
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	4413      	add	r3, r2
 8002274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002278:	461a      	mov	r2, r3
 800227a:	2308      	movs	r3, #8
 800227c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800227e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 ff99 	bl	80031b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	2310      	movs	r3, #16
 80022a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d030      	beq.n	800230e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	d109      	bne.n	80022cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	78db      	ldrb	r3, [r3, #3]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2200      	movs	r2, #0
 80022ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f006 fa48 	bl	800878c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	015a      	lsls	r2, r3, #5
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4413      	add	r3, r2
 8002304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002308:	461a      	mov	r2, r3
 800230a:	2302      	movs	r3, #2
 800230c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002324:	461a      	mov	r2, r3
 8002326:	2320      	movs	r3, #32
 8002328:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002346:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	3301      	adds	r3, #1
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	f47f af62 	bne.w	8002220 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fde9 	bl	8005f38 <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002370:	f040 80db 	bne.w	800252a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f003 fe0a 	bl	8005f92 <USB_ReadDevAllInEpInterrupt>
 800237e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002384:	e0cd      	b.n	8002522 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80c2 	beq.w	8002516 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f003 fe30 	bl	8006002 <USB_ReadDevInEPInterrupt>
 80023a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d057      	beq.n	800245e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	2201      	movs	r2, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69f9      	ldr	r1, [r7, #28]
 80023ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023ce:	4013      	ands	r3, r2
 80023d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023de:	461a      	mov	r2, r3
 80023e0:	2301      	movs	r3, #1
 80023e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d132      	bne.n	8002452 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	334c      	adds	r3, #76	; 0x4c
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002402:	4613      	mov	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4403      	add	r3, r0
 800240c:	3348      	adds	r3, #72	; 0x48
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4419      	add	r1, r3
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4403      	add	r3, r0
 8002420:	334c      	adds	r3, #76	; 0x4c
 8002422:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d113      	bne.n	8002452 <HAL_PCD_IRQHandler+0x3a2>
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	440b      	add	r3, r1
 8002438:	3354      	adds	r3, #84	; 0x54
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d108      	bne.n	8002452 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800244a:	461a      	mov	r2, r3
 800244c:	2101      	movs	r1, #1
 800244e:	f003 fe37 	bl	80060c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4619      	mov	r1, r3
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f006 f912 	bl	8008682 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	015a      	lsls	r2, r3, #5
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4413      	add	r3, r2
 8002470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002474:	461a      	mov	r2, r3
 8002476:	2308      	movs	r3, #8
 8002478:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002490:	461a      	mov	r2, r3
 8002492:	2310      	movs	r3, #16
 8002494:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	015a      	lsls	r2, r3, #5
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ac:	461a      	mov	r2, r3
 80024ae:	2340      	movs	r3, #64	; 0x40
 80024b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024be:	6a38      	ldr	r0, [r7, #32]
 80024c0:	f002 fd18 	bl	8004ef4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	3338      	adds	r3, #56	; 0x38
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	3304      	adds	r3, #4
 80024d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	78db      	ldrb	r3, [r3, #3]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d108      	bne.n	80024f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2200      	movs	r2, #0
 80024e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	4619      	mov	r1, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f006 f95f 	bl	80087b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024fe:	461a      	mov	r2, r3
 8002500:	2302      	movs	r3, #2
 8002502:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800250e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 fcdb 	bl	8002ecc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	3301      	adds	r3, #1
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251e:	085b      	lsrs	r3, r3, #1
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f af2e 	bne.w	8002386 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fd02 	bl	8005f38 <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800253a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800253e:	d122      	bne.n	8002586 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800255a:	2b01      	cmp	r3, #1
 800255c:	d108      	bne.n	8002570 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002566:	2100      	movs	r1, #0
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fec3 	bl	80032f4 <HAL_PCDEx_LPM_Callback>
 800256e:	e002      	b.n	8002576 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f006 f8fd 	bl	8008770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fcd4 	bl	8005f38 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259a:	d112      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d102      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f006 f8b9 	bl	8008724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025c0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fcb6 	bl	8005f38 <USB_ReadInterrupts>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d6:	f040 80b7 	bne.w	8002748 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2110      	movs	r1, #16
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fc7d 	bl	8004ef4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025fe:	e046      	b.n	800268e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800260c:	461a      	mov	r2, r3
 800260e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002612:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002624:	0151      	lsls	r1, r2, #5
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	440a      	add	r2, r1
 800262a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800262e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002632:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002640:	461a      	mov	r2, r3
 8002642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002646:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	4413      	add	r3, r2
 8002650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002658:	0151      	lsls	r1, r2, #5
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	440a      	add	r2, r1
 800265e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002666:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002678:	0151      	lsls	r1, r2, #5
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	440a      	add	r2, r1
 800267e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002686:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268a:	3301      	adds	r3, #1
 800268c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002694:	429a      	cmp	r2, r3
 8002696:	d3b3      	bcc.n	8002600 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d016      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026be:	69fa      	ldr	r2, [r7, #28]
 80026c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c4:	f043 030b 	orr.w	r3, r3, #11
 80026c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026da:	f043 030b 	orr.w	r3, r3, #11
 80026de:	6453      	str	r3, [r2, #68]	; 0x44
 80026e0:	e015      	b.n	800270e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	69fa      	ldr	r2, [r7, #28]
 8002704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002708:	f043 030b 	orr.w	r3, r3, #11
 800270c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800271c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002720:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002732:	461a      	mov	r2, r3
 8002734:	f003 fcc4 	bl	80060c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fbf3 	bl	8005f38 <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275c:	d124      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fc89 	bl	800607a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f002 fc3e 	bl	8004fee <USB_GetDevSpeed>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681c      	ldr	r4, [r3, #0]
 800277e:	f001 f9e9 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8002782:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	4620      	mov	r0, r4
 800278e:	f002 f93d 	bl	8004a0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f005 ff9d 	bl	80086d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fbc3 	bl	8005f38 <USB_ReadInterrupts>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d10a      	bne.n	80027d2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f005 ff7a 	bl	80086b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f002 0208 	and.w	r2, r2, #8
 80027d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f003 fbae 	bl	8005f38 <USB_ReadInterrupts>
 80027dc:	4603      	mov	r3, r0
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d122      	bne.n	800282c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027f2:	2301      	movs	r3, #1
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	e014      	b.n	8002822 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	b2db      	uxtb	r3, r3
 8002814:	4619      	mov	r1, r3
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fb27 	bl	8002e6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3301      	adds	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	429a      	cmp	r2, r3
 800282a:	d3e5      	bcc.n	80027f8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fb81 	bl	8005f38 <USB_ReadInterrupts>
 8002836:	4603      	mov	r3, r0
 8002838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002840:	d13b      	bne.n	80028ba <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002842:	2301      	movs	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	e02b      	b.n	80028a0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285c:	4613      	mov	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3340      	adds	r3, #64	; 0x40
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d115      	bne.n	800289a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800286e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	da12      	bge.n	800289a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	333f      	adds	r3, #63	; 0x3f
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4619      	mov	r1, r3
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fae8 	bl	8002e6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	3301      	adds	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d3ce      	bcc.n	8002848 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fb3a 	bl	8005f38 <USB_ReadInterrupts>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ce:	d155      	bne.n	800297c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028d0:	2301      	movs	r3, #1
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	e045      	b.n	8002962 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d12e      	bne.n	800295c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002900:	2b00      	cmp	r3, #0
 8002902:	da2b      	bge.n	800295c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002910:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002914:	429a      	cmp	r2, r3
 8002916:	d121      	bne.n	800295c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10a      	bne.n	800295c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	69fa      	ldr	r2, [r7, #28]
 8002950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002958:	6053      	str	r3, [r2, #4]
            break;
 800295a:	e007      	b.n	800296c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	3301      	adds	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002968:	429a      	cmp	r2, r3
 800296a:	d3b4      	bcc.n	80028d6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800297a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f003 fad9 	bl	8005f38 <USB_ReadInterrupts>
 8002986:	4603      	mov	r3, r0
 8002988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002990:	d10a      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f005 ff1e 	bl	80087d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fac3 	bl	8005f38 <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d115      	bne.n	80029e8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f005 ff0e 	bl	80087f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	e000      	b.n	80029e8 <HAL_PCD_IRQHandler+0x938>
      return;
 80029e6:	bf00      	nop
    }
  }
}
 80029e8:	3734      	adds	r7, #52	; 0x34
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd90      	pop	{r4, r7, pc}

080029ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_PCD_SetAddress+0x1a>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e013      	b.n	8002a30 <HAL_PCD_SetAddress+0x42>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fa21 	bl	8005e68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	70fb      	strb	r3, [r7, #3]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	803b      	strh	r3, [r7, #0]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	da0f      	bge.n	8002a7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	4613      	mov	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	3338      	adds	r3, #56	; 0x38
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	3304      	adds	r3, #4
 8002a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	705a      	strb	r2, [r3, #1]
 8002a7c:	e00f      	b.n	8002a9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	4413      	add	r3, r2
 8002a94:	3304      	adds	r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a9e:	78fb      	ldrb	r3, [r7, #3]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002aaa:	883a      	ldrh	r2, [r7, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	78ba      	ldrb	r2, [r7, #2]
 8002ab4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	785b      	ldrb	r3, [r3, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d004      	beq.n	8002ac8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ac8:	78bb      	ldrb	r3, [r7, #2]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d102      	bne.n	8002ad4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_PCD_EP_Open+0xaa>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e00e      	b.n	8002b00 <HAL_PCD_EP_Open+0xc8>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68f9      	ldr	r1, [r7, #12]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 faa1 	bl	8005038 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002afe:	7afb      	ldrb	r3, [r7, #11]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	da0f      	bge.n	8002b3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	f003 020f 	and.w	r2, r3, #15
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3338      	adds	r3, #56	; 0x38
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	3304      	adds	r3, #4
 8002b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	705a      	strb	r2, [r3, #1]
 8002b3a:	e00f      	b.n	8002b5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_PCD_EP_Close+0x6e>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e00e      	b.n	8002b94 <HAL_PCD_EP_Close+0x8c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68f9      	ldr	r1, [r7, #12]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fadf 	bl	8005148 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	f003 020f 	and.w	r2, r3, #15
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bde:	7afb      	ldrb	r3, [r7, #11]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d102      	bne.n	8002bf8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d109      	bne.n	8002c16 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	6979      	ldr	r1, [r7, #20]
 8002c10:	f002 fdbe 	bl	8005790 <USB_EP0StartXfer>
 8002c14:	e008      	b.n	8002c28 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	6979      	ldr	r1, [r7, #20]
 8002c24:	f002 fb6c 	bl	8005300 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c54:	681b      	ldr	r3, [r3, #0]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	7afb      	ldrb	r3, [r7, #11]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3338      	adds	r3, #56	; 0x38
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ca2:	7afb      	ldrb	r3, [r7, #11]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cbc:	7afb      	ldrb	r3, [r7, #11]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	6979      	ldr	r1, [r7, #20]
 8002cd4:	f002 fd5c 	bl	8005790 <USB_EP0StartXfer>
 8002cd8:	e008      	b.n	8002cec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	6979      	ldr	r1, [r7, #20]
 8002ce8:	f002 fb0a 	bl	8005300 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d02:	78fb      	ldrb	r3, [r7, #3]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d901      	bls.n	8002d14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e050      	b.n	8002db6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	da0f      	bge.n	8002d3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	f003 020f 	and.w	r2, r3, #15
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	3338      	adds	r3, #56	; 0x38
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	4413      	add	r3, r2
 8002d30:	3304      	adds	r3, #4
 8002d32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2201      	movs	r2, #1
 8002d38:	705a      	strb	r2, [r3, #1]
 8002d3a:	e00d      	b.n	8002d58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_PCD_EP_SetStall+0x82>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e01e      	b.n	8002db6 <HAL_PCD_EP_SetStall+0xc0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 ff9a 	bl	8005cc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	b2d9      	uxtb	r1, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002da6:	461a      	mov	r2, r3
 8002da8:	f003 f98a 	bl	80060c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	f003 020f 	and.w	r2, r3, #15
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d901      	bls.n	8002ddc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e042      	b.n	8002e62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	da0f      	bge.n	8002e04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de4:	78fb      	ldrb	r3, [r7, #3]
 8002de6:	f003 020f 	and.w	r2, r3, #15
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	3338      	adds	r3, #56	; 0x38
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	3304      	adds	r3, #4
 8002dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	705a      	strb	r2, [r3, #1]
 8002e02:	e00f      	b.n	8002e24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	f003 020f 	and.w	r2, r3, #15
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_PCD_EP_ClrStall+0x86>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e00e      	b.n	8002e62 <HAL_PCD_EP_ClrStall+0xa4>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68f9      	ldr	r1, [r7, #12]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 ffa2 	bl	8005d9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da0c      	bge.n	8002e98 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7e:	78fb      	ldrb	r3, [r7, #3]
 8002e80:	f003 020f 	and.w	r2, r3, #15
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	3338      	adds	r3, #56	; 0x38
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	3304      	adds	r3, #4
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e00c      	b.n	8002eb2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 020f 	and.w	r2, r3, #15
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	4413      	add	r3, r2
 8002eae:	3304      	adds	r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68f9      	ldr	r1, [r7, #12]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 fdc1 	bl	8005a40 <USB_EPStopXfer>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	3338      	adds	r3, #56	; 0x38
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1a      	ldr	r2, [r3, #32]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d901      	bls.n	8002f04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e06c      	b.n	8002fde <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d902      	bls.n	8002f20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3303      	adds	r3, #3
 8002f24:	089b      	lsrs	r3, r3, #2
 8002f26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f28:	e02b      	b.n	8002f82 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d902      	bls.n	8002f46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3303      	adds	r3, #3
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6919      	ldr	r1, [r3, #16]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	4603      	mov	r3, r0
 8002f64:	6978      	ldr	r0, [r7, #20]
 8002f66:	f002 fe15 	bl	8005b94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	441a      	add	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d809      	bhi.n	8002fac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d203      	bcs.n	8002fac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1be      	bne.n	8002f2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	699a      	ldr	r2, [r3, #24]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d811      	bhi.n	8002fdc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	6939      	ldr	r1, [r7, #16]
 8002fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fd8:	4013      	ands	r3, r2
 8002fda:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	333c      	adds	r3, #60	; 0x3c
 8003000:	3304      	adds	r3, #4
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d17b      	bne.n	8003116 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	f240 80b9 	bls.w	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80b3 	beq.w	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	4413      	add	r3, r2
 8003046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304a:	461a      	mov	r2, r3
 800304c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003050:	6093      	str	r3, [r2, #8]
 8003052:	e0a7      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	2320      	movs	r3, #32
 800306e:	6093      	str	r3, [r2, #8]
 8003070:	e098      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 8093 	bne.w	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	4a4b      	ldr	r2, [pc, #300]	; (80031b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d90f      	bls.n	80030a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	4413      	add	r3, r2
 8003098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309c:	461a      	mov	r2, r3
 800309e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a2:	6093      	str	r3, [r2, #8]
 80030a4:	e07e      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	3304      	adds	r3, #4
 80030ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	0159      	lsls	r1, r3, #5
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	440b      	add	r3, r1
 80030c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d114      	bne.n	8003108 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f0:	461a      	mov	r2, r3
 80030f2:	2101      	movs	r1, #1
 80030f4:	f002 ffe4 	bl	80060c0 <USB_EP0_OutStart>
 80030f8:	e006      	b.n	8003108 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	441a      	add	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f005 fa9c 	bl	800864c <HAL_PCD_DataOutStageCallback>
 8003114:	e046      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	4a26      	ldr	r2, [pc, #152]	; (80031b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d124      	bne.n	8003168 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003134:	461a      	mov	r2, r3
 8003136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313a:	6093      	str	r3, [r2, #8]
 800313c:	e032      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003154:	461a      	mov	r2, r3
 8003156:	2320      	movs	r3, #32
 8003158:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	4619      	mov	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f005 fa73 	bl	800864c <HAL_PCD_DataOutStageCallback>
 8003166:	e01d      	b.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d114      	bne.n	8003198 <PCD_EP_OutXfrComplete_int+0x1b0>
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d108      	bne.n	8003198 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003190:	461a      	mov	r2, r3
 8003192:	2100      	movs	r1, #0
 8003194:	f002 ff94 	bl	80060c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f005 fa54 	bl	800864c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	4f54300a 	.word	0x4f54300a
 80031b4:	4f54310a 	.word	0x4f54310a

080031b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	333c      	adds	r3, #60	; 0x3c
 80031d0:	3304      	adds	r3, #4
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a15      	ldr	r2, [pc, #84]	; (8003240 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d90e      	bls.n	800320c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d009      	beq.n	800320c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003204:	461a      	mov	r2, r3
 8003206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800320a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f005 fa0b 	bl	8008628 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <PCD_EP_OutSetupPacket_int+0x88>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d90c      	bls.n	8003234 <PCD_EP_OutSetupPacket_int+0x7c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d108      	bne.n	8003234 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800322c:	461a      	mov	r2, r3
 800322e:	2101      	movs	r1, #1
 8003230:	f002 ff46 	bl	80060c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	4f54300a 	.word	0x4f54300a

08003244 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	460b      	mov	r3, r1
 800324e:	70fb      	strb	r3, [r7, #3]
 8003250:	4613      	mov	r3, r2
 8003252:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800325c:	78fb      	ldrb	r3, [r7, #3]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003262:	883b      	ldrh	r3, [r7, #0]
 8003264:	0419      	lsls	r1, r3, #16
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	430a      	orrs	r2, r1
 800326e:	629a      	str	r2, [r3, #40]	; 0x28
 8003270:	e028      	b.n	80032c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	4413      	add	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e00d      	b.n	80032a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	3340      	adds	r3, #64	; 0x40
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	0c1b      	lsrs	r3, r3, #16
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	4413      	add	r3, r2
 800329a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	3301      	adds	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
 80032a2:	7bfa      	ldrb	r2, [r7, #15]
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d3ec      	bcc.n	8003286 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032ac:	883b      	ldrh	r3, [r7, #0]
 80032ae:	0418      	lsls	r0, r3, #16
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	78fb      	ldrb	r3, [r7, #3]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	4302      	orrs	r2, r0
 80032bc:	3340      	adds	r3, #64	; 0x40
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	460b      	mov	r3, r1
 80032dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e267      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d075      	beq.n	8003416 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332a:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b04      	cmp	r3, #4
 8003334:	d00c      	beq.n	8003350 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003336:	4b85      	ldr	r3, [pc, #532]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333e:	2b08      	cmp	r3, #8
 8003340:	d112      	bne.n	8003368 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4b82      	ldr	r3, [pc, #520]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334e:	d10b      	bne.n	8003368 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	4b7e      	ldr	r3, [pc, #504]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d05b      	beq.n	8003414 <HAL_RCC_OscConfig+0x108>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d157      	bne.n	8003414 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e242      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d106      	bne.n	8003380 <HAL_RCC_OscConfig+0x74>
 8003372:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a75      	ldr	r2, [pc, #468]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e01d      	b.n	80033bc <HAL_RCC_OscConfig+0xb0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x98>
 800338a:	4b70      	ldr	r3, [pc, #448]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a6f      	ldr	r2, [pc, #444]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003390:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6c      	ldr	r2, [pc, #432]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800339c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0xb0>
 80033a4:	4b69      	ldr	r3, [pc, #420]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a68      	ldr	r2, [pc, #416]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ae:	6013      	str	r3, [r2, #0]
 80033b0:	4b66      	ldr	r3, [pc, #408]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a65      	ldr	r2, [pc, #404]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d013      	beq.n	80033ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fd fdf0 	bl	8000fa8 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fd fdec 	bl	8000fa8 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e207      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033de:	4b5b      	ldr	r3, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0xc0>
 80033ea:	e014      	b.n	8003416 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fd fddc 	bl	8000fa8 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fd fdd8 	bl	8000fa8 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1f3      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003406:	4b51      	ldr	r3, [pc, #324]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0xe8>
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d063      	beq.n	80034ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003422:	4b4a      	ldr	r3, [pc, #296]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00b      	beq.n	8003446 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342e:	4b47      	ldr	r3, [pc, #284]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003436:	2b08      	cmp	r3, #8
 8003438:	d11c      	bne.n	8003474 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b44      	ldr	r3, [pc, #272]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d116      	bne.n	8003474 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003446:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_RCC_OscConfig+0x152>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d001      	beq.n	800345e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e1c7      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345e:	4b3b      	ldr	r3, [pc, #236]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4937      	ldr	r1, [pc, #220]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800346e:	4313      	orrs	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003472:	e03a      	b.n	80034ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d020      	beq.n	80034be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800347c:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_OscConfig+0x244>)
 800347e:	2201      	movs	r2, #1
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fd91 	bl	8000fa8 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348a:	f7fd fd8d 	bl	8000fa8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e1a8      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4925      	ldr	r1, [pc, #148]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]
 80034bc:	e015      	b.n	80034ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034be:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_OscConfig+0x244>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd fd70 	bl	8000fa8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034cc:	f7fd fd6c 	bl	8000fa8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e187      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034de:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d036      	beq.n	8003564 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d016      	beq.n	800352c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <HAL_RCC_OscConfig+0x248>)
 8003500:	2201      	movs	r2, #1
 8003502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003504:	f7fd fd50 	bl	8000fa8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350c:	f7fd fd4c 	bl	8000fa8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e167      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351e:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x240>)
 8003520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x200>
 800352a:	e01b      	b.n	8003564 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352c:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RCC_OscConfig+0x248>)
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fd fd39 	bl	8000fa8 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003538:	e00e      	b.n	8003558 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd fd35 	bl	8000fa8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d907      	bls.n	8003558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e150      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
 800354c:	40023800 	.word	0x40023800
 8003550:	42470000 	.word	0x42470000
 8003554:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b88      	ldr	r3, [pc, #544]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1ea      	bne.n	800353a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8097 	beq.w	80036a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b7d      	ldr	r3, [pc, #500]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a7c      	ldr	r2, [pc, #496]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b7a      	ldr	r3, [pc, #488]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b77      	ldr	r3, [pc, #476]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b74      	ldr	r3, [pc, #464]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a73      	ldr	r2, [pc, #460]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fd fcf5 	bl	8000fa8 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fd fcf1 	bl	8000fa8 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e10c      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_OscConfig+0x474>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x2ea>
 80035e8:	4b64      	ldr	r3, [pc, #400]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a63      	ldr	r2, [pc, #396]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	e01c      	b.n	8003630 <HAL_RCC_OscConfig+0x324>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x30c>
 80035fe:	4b5f      	ldr	r3, [pc, #380]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a5e      	ldr	r2, [pc, #376]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	4b5c      	ldr	r3, [pc, #368]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a5b      	ldr	r2, [pc, #364]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x324>
 8003618:	4b58      	ldr	r3, [pc, #352]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a57      	ldr	r2, [pc, #348]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	4b55      	ldr	r3, [pc, #340]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a54      	ldr	r2, [pc, #336]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d015      	beq.n	8003664 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003638:	f7fd fcb6 	bl	8000fa8 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363e:	e00a      	b.n	8003656 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f7fd fcb2 	bl	8000fa8 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e0cb      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ee      	beq.n	8003640 <HAL_RCC_OscConfig+0x334>
 8003662:	e014      	b.n	800368e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003664:	f7fd fca0 	bl	8000fa8 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fd fc9c 	bl	8000fa8 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0b5      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003682:	4b3e      	ldr	r3, [pc, #248]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1ee      	bne.n	800366c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	4a38      	ldr	r2, [pc, #224]	; (800377c <HAL_RCC_OscConfig+0x470>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80a1 	beq.w	80037ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036aa:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 030c 	and.w	r3, r3, #12
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d05c      	beq.n	8003770 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d141      	bne.n	8003742 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036be:	4b31      	ldr	r3, [pc, #196]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fd fc70 	bl	8000fa8 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036cc:	f7fd fc6c 	bl	8000fa8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e087      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	4b27      	ldr	r3, [pc, #156]	; (800377c <HAL_RCC_OscConfig+0x470>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	3b01      	subs	r3, #1
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	491b      	ldr	r1, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7fd fc45 	bl	8000fa8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003722:	f7fd fc41 	bl	8000fa8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e05c      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x416>
 8003740:	e054      	b.n	80037ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_RCC_OscConfig+0x478>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fd fc2e 	bl	8000fa8 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003750:	f7fd fc2a 	bl	8000fa8 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e045      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RCC_OscConfig+0x470>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x444>
 800376e:	e03d      	b.n	80037ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e038      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
 800377c:	40023800 	.word	0x40023800
 8003780:	40007000 	.word	0x40007000
 8003784:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_RCC_OscConfig+0x4ec>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d028      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d121      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d11a      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b8:	4013      	ands	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d111      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	3b01      	subs	r3, #1
 80037d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800

080037fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0cc      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b68      	ldr	r3, [pc, #416]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d90c      	bls.n	8003838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b65      	ldr	r3, [pc, #404]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0b8      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800385a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003868:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a52      	ldr	r2, [pc, #328]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	494d      	ldr	r1, [pc, #308]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d044      	beq.n	800391c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b47      	ldr	r3, [pc, #284]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d119      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d003      	beq.n	80038ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b3f      	ldr	r3, [pc, #252]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e06f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3b      	ldr	r3, [pc, #236]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e067      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4934      	ldr	r1, [pc, #208]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ec:	f7fd fb5c 	bl	8000fa8 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7fd fb58 	bl	8000fa8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e04f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2b      	ldr	r3, [pc, #172]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d20c      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e032      	b.n	80039aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003950:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4916      	ldr	r1, [pc, #88]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396e:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	490e      	ldr	r1, [pc, #56]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	4313      	orrs	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003982:	f000 f821 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003986:	4602      	mov	r2, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	490a      	ldr	r1, [pc, #40]	; (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	5ccb      	ldrb	r3, [r1, r3]
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_ClockConfig+0x1c8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fd fabc 	bl	8000f20 <HAL_InitTick>

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40023c00 	.word	0x40023c00
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08008c70 	.word	0x08008c70
 80039c0:	20000004 	.word	0x20000004
 80039c4:	20000008 	.word	0x20000008

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039cc:	b090      	sub	sp, #64	; 0x40
 80039ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
 80039d4:	2300      	movs	r3, #0
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d8:	2300      	movs	r3, #0
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039e0:	4b59      	ldr	r3, [pc, #356]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d00d      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x40>
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	f200 80a1 	bhi.w	8003b34 <HAL_RCC_GetSysClockFreq+0x16c>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x34>
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0x3a>
 80039fa:	e09b      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039fc:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x184>)
 80039fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a00:	e09b      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a02:	4b53      	ldr	r3, [pc, #332]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a06:	e098      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a08:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a12:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d028      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	099b      	lsrs	r3, r3, #6
 8003a24:	2200      	movs	r2, #0
 8003a26:	623b      	str	r3, [r7, #32]
 8003a28:	627a      	str	r2, [r7, #36]	; 0x24
 8003a2a:	6a3b      	ldr	r3, [r7, #32]
 8003a2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a30:	2100      	movs	r1, #0
 8003a32:	4b47      	ldr	r3, [pc, #284]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a34:	fb03 f201 	mul.w	r2, r3, r1
 8003a38:	2300      	movs	r3, #0
 8003a3a:	fb00 f303 	mul.w	r3, r0, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a43      	ldr	r2, [pc, #268]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a42:	fba0 1202 	umull	r1, r2, r0, r2
 8003a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a48:	460a      	mov	r2, r1
 8003a4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	4413      	add	r3, r2
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	2200      	movs	r2, #0
 8003a56:	61bb      	str	r3, [r7, #24]
 8003a58:	61fa      	str	r2, [r7, #28]
 8003a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a62:	f7fc fbbf 	bl	80001e4 <__aeabi_uldivmod>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6e:	e053      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a70:	4b35      	ldr	r3, [pc, #212]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	2200      	movs	r2, #0
 8003a78:	613b      	str	r3, [r7, #16]
 8003a7a:	617a      	str	r2, [r7, #20]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a82:	f04f 0b00 	mov.w	fp, #0
 8003a86:	4652      	mov	r2, sl
 8003a88:	465b      	mov	r3, fp
 8003a8a:	f04f 0000 	mov.w	r0, #0
 8003a8e:	f04f 0100 	mov.w	r1, #0
 8003a92:	0159      	lsls	r1, r3, #5
 8003a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a98:	0150      	lsls	r0, r2, #5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003aa2:	eb63 090b 	sbc.w	r9, r3, fp
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ab2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ab6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003aba:	ebb2 0408 	subs.w	r4, r2, r8
 8003abe:	eb63 0509 	sbc.w	r5, r3, r9
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	00eb      	lsls	r3, r5, #3
 8003acc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad0:	00e2      	lsls	r2, r4, #3
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	eb14 030a 	adds.w	r3, r4, sl
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	eb45 030b 	adc.w	r3, r5, fp
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	f04f 0300 	mov.w	r3, #0
 8003aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aee:	4629      	mov	r1, r5
 8003af0:	028b      	lsls	r3, r1, #10
 8003af2:	4621      	mov	r1, r4
 8003af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af8:	4621      	mov	r1, r4
 8003afa:	028a      	lsls	r2, r1, #10
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b02:	2200      	movs	r2, #0
 8003b04:	60bb      	str	r3, [r7, #8]
 8003b06:	60fa      	str	r2, [r7, #12]
 8003b08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0c:	f7fc fb6a 	bl	80001e4 <__aeabi_uldivmod>
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4613      	mov	r3, r2
 8003b16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	3301      	adds	r3, #1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b32:	e002      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3740      	adds	r7, #64	; 0x40
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	00f42400 	.word	0x00f42400
 8003b50:	017d7840 	.word	0x017d7840

08003b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000004 	.word	0x20000004

08003b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e041      	b.n	8003c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd f84c 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f000 fb02 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e041      	b.n	8003ca0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f839 	bl	8003ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 fab3 	bl	80041b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d109      	bne.n	8003ce0 <HAL_TIM_PWM_Start+0x24>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e022      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d109      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x3e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	bf14      	ite	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	2300      	moveq	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e015      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d109      	bne.n	8003d14 <HAL_TIM_PWM_Start+0x58>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	bf14      	ite	ne
 8003d0c:	2301      	movne	r3, #1
 8003d0e:	2300      	moveq	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e008      	b.n	8003d26 <HAL_TIM_PWM_Start+0x6a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	bf14      	ite	ne
 8003d20:	2301      	movne	r3, #1
 8003d22:	2300      	moveq	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e068      	b.n	8003e00 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d104      	bne.n	8003d3e <HAL_TIM_PWM_Start+0x82>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d3c:	e013      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d104      	bne.n	8003d4e <HAL_TIM_PWM_Start+0x92>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d4c:	e00b      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0xa2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	e003      	b.n	8003d66 <HAL_TIM_PWM_Start+0xaa>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	6839      	ldr	r1, [r7, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fd57 	bl	8004822 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a23      	ldr	r2, [pc, #140]	; (8003e08 <HAL_TIM_PWM_Start+0x14c>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d107      	bne.n	8003d8e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_TIM_PWM_Start+0x14c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da0:	d013      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a19      	ldr	r2, [pc, #100]	; (8003e0c <HAL_TIM_PWM_Start+0x150>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_TIM_PWM_Start+0x154>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <HAL_TIM_PWM_Start+0x158>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_TIM_PWM_Start+0x10e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <HAL_TIM_PWM_Start+0x15c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d111      	bne.n	8003dee <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b06      	cmp	r3, #6
 8003dda:	d010      	beq.n	8003dfe <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0201 	orr.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	e007      	b.n	8003dfe <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40014000 	.word	0x40014000

08003e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0ae      	b.n	8003f98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	f200 809f 	bhi.w	8003f88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003f89 	.word	0x08003f89
 8003e58:	08003f89 	.word	0x08003f89
 8003e5c:	08003f89 	.word	0x08003f89
 8003e60:	08003ec5 	.word	0x08003ec5
 8003e64:	08003f89 	.word	0x08003f89
 8003e68:	08003f89 	.word	0x08003f89
 8003e6c:	08003f89 	.word	0x08003f89
 8003e70:	08003f07 	.word	0x08003f07
 8003e74:	08003f89 	.word	0x08003f89
 8003e78:	08003f89 	.word	0x08003f89
 8003e7c:	08003f89 	.word	0x08003f89
 8003e80:	08003f47 	.word	0x08003f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fa12 	bl	80042b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6999      	ldr	r1, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	619a      	str	r2, [r3, #24]
      break;
 8003ec2:	e064      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fa58 	bl	8004380 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6999      	ldr	r1, [r3, #24]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
      break;
 8003f04:	e043      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 faa3 	bl	8004458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0208 	orr.w	r2, r2, #8
 8003f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0204 	bic.w	r2, r2, #4
 8003f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69d9      	ldr	r1, [r3, #28]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	61da      	str	r2, [r3, #28]
      break;
 8003f44:	e023      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 faed 	bl	800452c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	021a      	lsls	r2, r3, #8
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	61da      	str	r2, [r3, #28]
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_TIM_ConfigClockSource+0x1c>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0b4      	b.n	8004126 <HAL_TIM_ConfigClockSource+0x186>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d03e      	beq.n	8004074 <HAL_TIM_ConfigClockSource+0xd4>
 8003ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffa:	f200 8087 	bhi.w	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8003ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004002:	f000 8086 	beq.w	8004112 <HAL_TIM_ConfigClockSource+0x172>
 8004006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400a:	d87f      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b70      	cmp	r3, #112	; 0x70
 800400e:	d01a      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0xa6>
 8004010:	2b70      	cmp	r3, #112	; 0x70
 8004012:	d87b      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b60      	cmp	r3, #96	; 0x60
 8004016:	d050      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x11a>
 8004018:	2b60      	cmp	r3, #96	; 0x60
 800401a:	d877      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b50      	cmp	r3, #80	; 0x50
 800401e:	d03c      	beq.n	800409a <HAL_TIM_ConfigClockSource+0xfa>
 8004020:	2b50      	cmp	r3, #80	; 0x50
 8004022:	d873      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d058      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x13a>
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d86f      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b30      	cmp	r3, #48	; 0x30
 800402e:	d064      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004030:	2b30      	cmp	r3, #48	; 0x30
 8004032:	d86b      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 8004034:	2b20      	cmp	r3, #32
 8004036:	d060      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004038:	2b20      	cmp	r3, #32
 800403a:	d867      	bhi.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05c      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004040:	2b10      	cmp	r3, #16
 8004042:	d05a      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x15a>
 8004044:	e062      	b.n	800410c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6899      	ldr	r1, [r3, #8]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f000 fbc4 	bl	80047e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	609a      	str	r2, [r3, #8]
      break;
 8004072:	e04f      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6899      	ldr	r1, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f000 fbad 	bl	80047e2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004096:	609a      	str	r2, [r3, #8]
      break;
 8004098:	e03c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 fb21 	bl	80046ee <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2150      	movs	r1, #80	; 0x50
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fb7a 	bl	80047ac <TIM_ITRx_SetConfig>
      break;
 80040b8:	e02c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 fb40 	bl	800474c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2160      	movs	r1, #96	; 0x60
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb6a 	bl	80047ac <TIM_ITRx_SetConfig>
      break;
 80040d8:	e01c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 fb01 	bl	80046ee <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2140      	movs	r1, #64	; 0x40
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fb5a 	bl	80047ac <TIM_ITRx_SetConfig>
      break;
 80040f8:	e00c      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4619      	mov	r1, r3
 8004104:	4610      	mov	r0, r2
 8004106:	f000 fb51 	bl	80047ac <TIM_ITRx_SetConfig>
      break;
 800410a:	e003      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      break;
 8004110:	e000      	b.n	8004114 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004124:	7bfb      	ldrb	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b082      	sub	sp, #8
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004142:	2302      	movs	r3, #2
 8004144:	e031      	b.n	80041aa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004156:	6839      	ldr	r1, [r7, #0]
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fa37 	bl	80045cc <TIM_SlaveTimer_SetConfig>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e018      	b.n	80041aa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004186:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004196:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a34      	ldr	r2, [pc, #208]	; (8004298 <TIM_Base_SetConfig+0xe4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00f      	beq.n	80041ec <TIM_Base_SetConfig+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d2:	d00b      	beq.n	80041ec <TIM_Base_SetConfig+0x38>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a31      	ldr	r2, [pc, #196]	; (800429c <TIM_Base_SetConfig+0xe8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x38>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a30      	ldr	r2, [pc, #192]	; (80042a0 <TIM_Base_SetConfig+0xec>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <TIM_Base_SetConfig+0xf0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a25      	ldr	r2, [pc, #148]	; (8004298 <TIM_Base_SetConfig+0xe4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01b      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420c:	d017      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a22      	ldr	r2, [pc, #136]	; (800429c <TIM_Base_SetConfig+0xe8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d013      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <TIM_Base_SetConfig+0xec>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00f      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <TIM_Base_SetConfig+0xf0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <TIM_Base_SetConfig+0xf4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <TIM_Base_SetConfig+0xf8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a1d      	ldr	r2, [pc, #116]	; (80042b0 <TIM_Base_SetConfig+0xfc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d108      	bne.n	8004250 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a08      	ldr	r2, [pc, #32]	; (8004298 <TIM_Base_SetConfig+0xe4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d103      	bne.n	8004284 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	615a      	str	r2, [r3, #20]
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40010000 	.word	0x40010000
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	40014000 	.word	0x40014000
 80042ac:	40014400 	.word	0x40014400
 80042b0:	40014800 	.word	0x40014800

080042b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	f023 0201 	bic.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 0302 	bic.w	r3, r3, #2
 80042fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <TIM_OC1_SetConfig+0xc8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d10c      	bne.n	800432a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 0308 	bic.w	r3, r3, #8
 8004316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <TIM_OC1_SetConfig+0xc8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d111      	bne.n	8004356 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4313      	orrs	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	621a      	str	r2, [r3, #32]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40010000 	.word	0x40010000

08004380 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0210 	bic.w	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0320 	bic.w	r3, r3, #32
 80043ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <TIM_OC2_SetConfig+0xd4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10d      	bne.n	80043fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <TIM_OC2_SetConfig+0xd4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d113      	bne.n	800442c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800440a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	621a      	str	r2, [r3, #32]
}
 8004446:	bf00      	nop
 8004448:	371c      	adds	r7, #28
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000

08004458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <TIM_OC3_SetConfig+0xd0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d10d      	bne.n	80044d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <TIM_OC3_SetConfig+0xd0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d113      	bne.n	8004502 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40010000 	.word	0x40010000

0800452c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004562:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4313      	orrs	r3, r2
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <TIM_OC4_SetConfig+0x9c>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d109      	bne.n	80045a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	019b      	lsls	r3, r3, #6
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40010000 	.word	0x40010000

080045cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b70      	cmp	r3, #112	; 0x70
 8004614:	d01a      	beq.n	800464c <TIM_SlaveTimer_SetConfig+0x80>
 8004616:	2b70      	cmp	r3, #112	; 0x70
 8004618:	d860      	bhi.n	80046dc <TIM_SlaveTimer_SetConfig+0x110>
 800461a:	2b60      	cmp	r3, #96	; 0x60
 800461c:	d054      	beq.n	80046c8 <TIM_SlaveTimer_SetConfig+0xfc>
 800461e:	2b60      	cmp	r3, #96	; 0x60
 8004620:	d85c      	bhi.n	80046dc <TIM_SlaveTimer_SetConfig+0x110>
 8004622:	2b50      	cmp	r3, #80	; 0x50
 8004624:	d046      	beq.n	80046b4 <TIM_SlaveTimer_SetConfig+0xe8>
 8004626:	2b50      	cmp	r3, #80	; 0x50
 8004628:	d858      	bhi.n	80046dc <TIM_SlaveTimer_SetConfig+0x110>
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d019      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x96>
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d854      	bhi.n	80046dc <TIM_SlaveTimer_SetConfig+0x110>
 8004632:	2b30      	cmp	r3, #48	; 0x30
 8004634:	d055      	beq.n	80046e2 <TIM_SlaveTimer_SetConfig+0x116>
 8004636:	2b30      	cmp	r3, #48	; 0x30
 8004638:	d850      	bhi.n	80046dc <TIM_SlaveTimer_SetConfig+0x110>
 800463a:	2b20      	cmp	r3, #32
 800463c:	d051      	beq.n	80046e2 <TIM_SlaveTimer_SetConfig+0x116>
 800463e:	2b20      	cmp	r3, #32
 8004640:	d84c      	bhi.n	80046dc <TIM_SlaveTimer_SetConfig+0x110>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d04d      	beq.n	80046e2 <TIM_SlaveTimer_SetConfig+0x116>
 8004646:	2b10      	cmp	r3, #16
 8004648:	d04b      	beq.n	80046e2 <TIM_SlaveTimer_SetConfig+0x116>
 800464a:	e047      	b.n	80046dc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68d9      	ldr	r1, [r3, #12]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	f000 f8c1 	bl	80047e2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004660:	e040      	b.n	80046e4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b05      	cmp	r3, #5
 8004668:	d101      	bne.n	800466e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03b      	b.n	80046e6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004694:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	621a      	str	r2, [r3, #32]
      break;
 80046b2:	e017      	b.n	80046e4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	6899      	ldr	r1, [r3, #8]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	461a      	mov	r2, r3
 80046c2:	f000 f814 	bl	80046ee <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80046c6:	e00d      	b.n	80046e4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6818      	ldr	r0, [r3, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	6899      	ldr	r1, [r3, #8]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	461a      	mov	r2, r3
 80046d6:	f000 f839 	bl	800474c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80046da:	e003      	b.n	80046e4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	75fb      	strb	r3, [r7, #23]
      break;
 80046e0:	e000      	b.n	80046e4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80046e2:	bf00      	nop
  }

  return status;
 80046e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b087      	sub	sp, #28
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f023 0201 	bic.w	r2, r3, #1
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004718:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f023 030a 	bic.w	r3, r3, #10
 800472a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	621a      	str	r2, [r3, #32]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 0210 	bic.w	r2, r3, #16
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004776:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	031b      	lsls	r3, r3, #12
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004788:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	621a      	str	r2, [r3, #32]
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f043 0307 	orr.w	r3, r3, #7
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	609a      	str	r2, [r3, #8]
}
 80047d6:	bf00      	nop
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b087      	sub	sp, #28
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	021a      	lsls	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	431a      	orrs	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4313      	orrs	r3, r2
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	609a      	str	r2, [r3, #8]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004822:	b480      	push	{r7}
 8004824:	b087      	sub	sp, #28
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	2201      	movs	r2, #1
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1a      	ldr	r2, [r3, #32]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	43db      	mvns	r3, r3
 8004844:	401a      	ands	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1a      	ldr	r2, [r3, #32]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	fa01 f303 	lsl.w	r3, r1, r3
 800485a:	431a      	orrs	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	621a      	str	r2, [r3, #32]
}
 8004860:	bf00      	nop
 8004862:	371c      	adds	r7, #28
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004880:	2302      	movs	r3, #2
 8004882:	e050      	b.n	8004926 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1c      	ldr	r2, [pc, #112]	; (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d018      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d0:	d013      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a18      	ldr	r2, [pc, #96]	; (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00e      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a16      	ldr	r2, [pc, #88]	; (800493c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a15      	ldr	r2, [pc, #84]	; (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d004      	beq.n	80048fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a13      	ldr	r2, [pc, #76]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10c      	bne.n	8004914 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	4313      	orrs	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40010000 	.word	0x40010000
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40014000 	.word	0x40014000

08004948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004948:	b084      	sub	sp, #16
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	f107 001c 	add.w	r0, r7, #28
 8004956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	2b01      	cmp	r3, #1
 800495e:	d122      	bne.n	80049a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498a:	2b01      	cmp	r3, #1
 800498c:	d105      	bne.n	800499a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f001 fbee 	bl	800617c <USB_CoreReset>
 80049a0:	4603      	mov	r3, r0
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	e01a      	b.n	80049dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f001 fbe2 	bl	800617c <USB_CoreReset>
 80049b8:	4603      	mov	r3, r0
 80049ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
 80049ce:	e005      	b.n	80049dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d10b      	bne.n	80049fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f043 0206 	orr.w	r2, r3, #6
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a06:	b004      	add	sp, #16
 8004a08:	4770      	bx	lr
	...

08004a0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	4613      	mov	r3, r2
 8004a18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d165      	bne.n	8004aec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4a41      	ldr	r2, [pc, #260]	; (8004b28 <USB_SetTurnaroundTime+0x11c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d906      	bls.n	8004a36 <USB_SetTurnaroundTime+0x2a>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a40      	ldr	r2, [pc, #256]	; (8004b2c <USB_SetTurnaroundTime+0x120>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d202      	bcs.n	8004a36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a30:	230f      	movs	r3, #15
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e062      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4a3c      	ldr	r2, [pc, #240]	; (8004b2c <USB_SetTurnaroundTime+0x120>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d306      	bcc.n	8004a4c <USB_SetTurnaroundTime+0x40>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4a3b      	ldr	r2, [pc, #236]	; (8004b30 <USB_SetTurnaroundTime+0x124>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d202      	bcs.n	8004a4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a46:	230e      	movs	r3, #14
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e057      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a38      	ldr	r2, [pc, #224]	; (8004b30 <USB_SetTurnaroundTime+0x124>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d306      	bcc.n	8004a62 <USB_SetTurnaroundTime+0x56>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a37      	ldr	r2, [pc, #220]	; (8004b34 <USB_SetTurnaroundTime+0x128>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d202      	bcs.n	8004a62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a5c:	230d      	movs	r3, #13
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e04c      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a33      	ldr	r2, [pc, #204]	; (8004b34 <USB_SetTurnaroundTime+0x128>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d306      	bcc.n	8004a78 <USB_SetTurnaroundTime+0x6c>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4a32      	ldr	r2, [pc, #200]	; (8004b38 <USB_SetTurnaroundTime+0x12c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d802      	bhi.n	8004a78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a72:	230c      	movs	r3, #12
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e041      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a2f      	ldr	r2, [pc, #188]	; (8004b38 <USB_SetTurnaroundTime+0x12c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d906      	bls.n	8004a8e <USB_SetTurnaroundTime+0x82>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a2e      	ldr	r2, [pc, #184]	; (8004b3c <USB_SetTurnaroundTime+0x130>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d802      	bhi.n	8004a8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a88:	230b      	movs	r3, #11
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e036      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <USB_SetTurnaroundTime+0x130>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d906      	bls.n	8004aa4 <USB_SetTurnaroundTime+0x98>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4a29      	ldr	r2, [pc, #164]	; (8004b40 <USB_SetTurnaroundTime+0x134>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d802      	bhi.n	8004aa4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	e02b      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <USB_SetTurnaroundTime+0x134>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d906      	bls.n	8004aba <USB_SetTurnaroundTime+0xae>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4a25      	ldr	r2, [pc, #148]	; (8004b44 <USB_SetTurnaroundTime+0x138>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d202      	bcs.n	8004aba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ab4:	2309      	movs	r3, #9
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e020      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4a21      	ldr	r2, [pc, #132]	; (8004b44 <USB_SetTurnaroundTime+0x138>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d306      	bcc.n	8004ad0 <USB_SetTurnaroundTime+0xc4>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a20      	ldr	r2, [pc, #128]	; (8004b48 <USB_SetTurnaroundTime+0x13c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d802      	bhi.n	8004ad0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004aca:	2308      	movs	r3, #8
 8004acc:	617b      	str	r3, [r7, #20]
 8004ace:	e015      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <USB_SetTurnaroundTime+0x13c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d906      	bls.n	8004ae6 <USB_SetTurnaroundTime+0xda>
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <USB_SetTurnaroundTime+0x140>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d202      	bcs.n	8004ae6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ae0:	2307      	movs	r3, #7
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	e00a      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ae6:	2306      	movs	r3, #6
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	e007      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004af2:	2309      	movs	r3, #9
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	e001      	b.n	8004afc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004af8:	2309      	movs	r3, #9
 8004afa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	029b      	lsls	r3, r3, #10
 8004b10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b14:	431a      	orrs	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	00d8acbf 	.word	0x00d8acbf
 8004b2c:	00e4e1c0 	.word	0x00e4e1c0
 8004b30:	00f42400 	.word	0x00f42400
 8004b34:	01067380 	.word	0x01067380
 8004b38:	011a499f 	.word	0x011a499f
 8004b3c:	01312cff 	.word	0x01312cff
 8004b40:	014ca43f 	.word	0x014ca43f
 8004b44:	016e3600 	.word	0x016e3600
 8004b48:	01a6ab1f 	.word	0x01a6ab1f
 8004b4c:	01e84800 	.word	0x01e84800

08004b50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f043 0201 	orr.w	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d115      	bne.n	8004be2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	f7fc f9fc 	bl	8000fc0 <HAL_Delay>
      ms++;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 fa45 	bl	800605e <USB_GetMode>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d01e      	beq.n	8004c18 <USB_SetCurrentMode+0x84>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b31      	cmp	r3, #49	; 0x31
 8004bde:	d9f0      	bls.n	8004bc2 <USB_SetCurrentMode+0x2e>
 8004be0:	e01a      	b.n	8004c18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d115      	bne.n	8004c14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	f7fc f9e3 	bl	8000fc0 <HAL_Delay>
      ms++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 fa2c 	bl	800605e <USB_GetMode>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <USB_SetCurrentMode+0x84>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b31      	cmp	r3, #49	; 0x31
 8004c10:	d9f0      	bls.n	8004bf4 <USB_SetCurrentMode+0x60>
 8004c12:	e001      	b.n	8004c18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e005      	b.n	8004c24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b32      	cmp	r3, #50	; 0x32
 8004c1c:	d101      	bne.n	8004c22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b086      	sub	sp, #24
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c46:	2300      	movs	r3, #0
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	e009      	b.n	8004c60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3340      	adds	r3, #64	; 0x40
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	613b      	str	r3, [r7, #16]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b0e      	cmp	r3, #14
 8004c64:	d9f2      	bls.n	8004c4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d11c      	bne.n	8004ca6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c7a:	f043 0302 	orr.w	r3, r3, #2
 8004c7e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c90:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca4:	e00b      	b.n	8004cbe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd8:	461a      	mov	r2, r3
 8004cda:	680b      	ldr	r3, [r1, #0]
 8004cdc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10c      	bne.n	8004cfe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d104      	bne.n	8004cf4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cea:	2100      	movs	r1, #0
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f965 	bl	8004fbc <USB_SetDevSpeed>
 8004cf2:	e008      	b.n	8004d06 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f960 	bl	8004fbc <USB_SetDevSpeed>
 8004cfc:	e003      	b.n	8004d06 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cfe:	2103      	movs	r1, #3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f95b 	bl	8004fbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d06:	2110      	movs	r1, #16
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f8f3 	bl	8004ef4 <USB_FlushTxFifo>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f91f 	bl	8004f5c <USB_FlushRxFifo>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d46:	461a      	mov	r2, r3
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	e043      	b.n	8004dda <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d68:	d118      	bne.n	8004d9c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e013      	b.n	8004dae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	461a      	mov	r2, r3
 8004d94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	e008      	b.n	8004dae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	461a      	mov	r2, r3
 8004daa:	2300      	movs	r3, #0
 8004dac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004dd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d3b7      	bcc.n	8004d52 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e043      	b.n	8004e70 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dfe:	d118      	bne.n	8004e32 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10a      	bne.n	8004e1c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	461a      	mov	r2, r3
 8004e14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e18:	6013      	str	r3, [r2, #0]
 8004e1a:	e013      	b.n	8004e44 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	e008      	b.n	8004e44 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	461a      	mov	r2, r3
 8004e64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d3b7      	bcc.n	8004de8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d105      	bne.n	8004eac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	f043 0210 	orr.w	r2, r3, #16
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <USB_DevInit+0x2c4>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f043 0208 	orr.w	r2, r3, #8
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eec:	b004      	add	sp, #16
 8004eee:	4770      	bx	lr
 8004ef0:	803c3800 	.word	0x803c3800

08004ef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3301      	adds	r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <USB_FlushTxFifo+0x64>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e01b      	b.n	8004f4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	daf2      	bge.n	8004f02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	019b      	lsls	r3, r3, #6
 8004f24:	f043 0220 	orr.w	r2, r3, #32
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <USB_FlushTxFifo+0x64>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e006      	b.n	8004f4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d0f0      	beq.n	8004f2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	00030d40 	.word	0x00030d40

08004f5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a11      	ldr	r2, [pc, #68]	; (8004fb8 <USB_FlushRxFifo+0x5c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e018      	b.n	8004fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	daf2      	bge.n	8004f68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2210      	movs	r2, #16
 8004f8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <USB_FlushRxFifo+0x5c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d901      	bls.n	8004f9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e006      	b.n	8004fac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b10      	cmp	r3, #16
 8004fa8:	d0f0      	beq.n	8004f8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	00030d40 	.word	0x00030d40

08004fbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b087      	sub	sp, #28
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 0306 	and.w	r3, r3, #6
 8005006:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800500e:	2300      	movs	r3, #0
 8005010:	75fb      	strb	r3, [r7, #23]
 8005012:	e00a      	b.n	800502a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d002      	beq.n	8005020 <USB_GetDevSpeed+0x32>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b06      	cmp	r3, #6
 800501e:	d102      	bne.n	8005026 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005020:	2302      	movs	r3, #2
 8005022:	75fb      	strb	r3, [r7, #23]
 8005024:	e001      	b.n	800502a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005026:	230f      	movs	r3, #15
 8005028:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800502a:	7dfb      	ldrb	r3, [r7, #23]
}
 800502c:	4618      	mov	r0, r3
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	785b      	ldrb	r3, [r3, #1]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d13a      	bne.n	80050ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	2101      	movs	r1, #1
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	b29b      	uxth	r3, r3
 800506c:	68f9      	ldr	r1, [r7, #12]
 800506e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005072:	4313      	orrs	r3, r2
 8005074:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4413      	add	r3, r2
 800507e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d155      	bne.n	8005138 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	791b      	ldrb	r3, [r3, #4]
 80050a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	059b      	lsls	r3, r3, #22
 80050ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050b0:	4313      	orrs	r3, r2
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	e036      	b.n	8005138 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	69da      	ldr	r2, [r3, #28]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	2101      	movs	r1, #1
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d11a      	bne.n	8005138 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	791b      	ldrb	r3, [r3, #4]
 800511c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800511e:	430b      	orrs	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005136:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d161      	bne.n	8005228 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517a:	d11f      	bne.n	80051bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005196:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800519a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	2101      	movs	r1, #1
 80051ce:	fa01 f303 	lsl.w	r3, r1, r3
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	68f9      	ldr	r1, [r7, #12]
 80051d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051dc:	4013      	ands	r3, r2
 80051de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	2101      	movs	r1, #1
 80051f2:	fa01 f303 	lsl.w	r3, r1, r3
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005200:	4013      	ands	r3, r2
 8005202:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	0159      	lsls	r1, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	440b      	add	r3, r1
 800521a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521e:	4619      	mov	r1, r3
 8005220:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <USB_DeactivateEndpoint+0x1b0>)
 8005222:	4013      	ands	r3, r2
 8005224:	600b      	str	r3, [r1, #0]
 8005226:	e060      	b.n	80052ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800523a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800523e:	d11f      	bne.n	8005280 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800525e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	015a      	lsls	r2, r3, #5
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4413      	add	r3, r2
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	0151      	lsls	r1, r2, #5
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	440a      	add	r2, r1
 8005276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800527a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800527e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	2101      	movs	r1, #1
 8005292:	fa01 f303 	lsl.w	r3, r1, r3
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	43db      	mvns	r3, r3
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a0:	4013      	ands	r3, r2
 80052a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052aa:	69da      	ldr	r2, [r3, #28]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	2101      	movs	r1, #1
 80052b6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	43db      	mvns	r3, r3
 80052be:	68f9      	ldr	r1, [r7, #12]
 80052c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c4:	4013      	ands	r3, r2
 80052c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	0159      	lsls	r1, r3, #5
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	440b      	add	r3, r1
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	4619      	mov	r1, r3
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <USB_DeactivateEndpoint+0x1b4>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	ec337800 	.word	0xec337800
 80052fc:	eff37800 	.word	0xeff37800

08005300 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	; 0x28
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	785b      	ldrb	r3, [r3, #1]
 800531c:	2b01      	cmp	r3, #1
 800531e:	f040 815c 	bne.w	80055da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d132      	bne.n	8005390 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005344:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005348:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800534c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005368:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800536c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	440a      	add	r2, r1
 8005384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005388:	0cdb      	lsrs	r3, r3, #19
 800538a:	04db      	lsls	r3, r3, #19
 800538c:	6113      	str	r3, [r2, #16]
 800538e:	e074      	b.n	800547a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	69fa      	ldr	r2, [r7, #28]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053aa:	0cdb      	lsrs	r3, r3, #19
 80053ac:	04db      	lsls	r3, r3, #19
 80053ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	6999      	ldr	r1, [r3, #24]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	440b      	add	r3, r1
 80053ec:	1e59      	subs	r1, r3, #1
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80053f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053f8:	4b9d      	ldr	r3, [pc, #628]	; (8005670 <USB_EPStartXfer+0x370>)
 80053fa:	400b      	ands	r3, r1
 80053fc:	69b9      	ldr	r1, [r7, #24]
 80053fe:	0148      	lsls	r0, r1, #5
 8005400:	69f9      	ldr	r1, [r7, #28]
 8005402:	4401      	add	r1, r0
 8005404:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005408:	4313      	orrs	r3, r2
 800540a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	691a      	ldr	r2, [r3, #16]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005422:	69b9      	ldr	r1, [r7, #24]
 8005424:	0148      	lsls	r0, r1, #5
 8005426:	69f9      	ldr	r1, [r7, #28]
 8005428:	4401      	add	r1, r0
 800542a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800542e:	4313      	orrs	r3, r2
 8005430:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	791b      	ldrb	r3, [r3, #4]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d11f      	bne.n	800547a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	0151      	lsls	r1, r2, #5
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	440a      	add	r2, r1
 8005450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005454:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005458:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	0151      	lsls	r1, r2, #5
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	440a      	add	r2, r1
 8005470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005474:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005478:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d14b      	bne.n	8005518 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d009      	beq.n	800549c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005494:	461a      	mov	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	791b      	ldrb	r3, [r3, #4]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d128      	bne.n	80054f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d110      	bne.n	80054d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	0151      	lsls	r1, r2, #5
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	440a      	add	r2, r1
 80054ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054d2:	6013      	str	r3, [r2, #0]
 80054d4:	e00f      	b.n	80054f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	e133      	b.n	8005780 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	440a      	add	r2, r1
 800552e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005532:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005536:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	791b      	ldrb	r3, [r3, #4]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d015      	beq.n	800556c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 811b 	beq.w	8005780 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	2101      	movs	r1, #1
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	69f9      	ldr	r1, [r7, #28]
 8005562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005566:	4313      	orrs	r3, r2
 8005568:	634b      	str	r3, [r1, #52]	; 0x34
 800556a:	e109      	b.n	8005780 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d110      	bne.n	800559e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	0151      	lsls	r1, r2, #5
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	440a      	add	r2, r1
 8005592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	e00f      	b.n	80055be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6919      	ldr	r1, [r3, #16]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	781a      	ldrb	r2, [r3, #0]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	b298      	uxth	r0, r3
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	4603      	mov	r3, r0
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fade 	bl	8005b94 <USB_WritePacket>
 80055d8:	e0d2      	b.n	8005780 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	0151      	lsls	r1, r2, #5
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	440a      	add	r2, r1
 80055f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f4:	0cdb      	lsrs	r3, r3, #19
 80055f6:	04db      	lsls	r3, r3, #19
 80055f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	0151      	lsls	r1, r2, #5
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	440a      	add	r2, r1
 8005610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800561c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d126      	bne.n	8005674 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	691a      	ldr	r2, [r3, #16]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563c:	69b9      	ldr	r1, [r7, #24]
 800563e:	0148      	lsls	r0, r1, #5
 8005640:	69f9      	ldr	r1, [r7, #28]
 8005642:	4401      	add	r1, r0
 8005644:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005648:	4313      	orrs	r3, r2
 800564a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	0151      	lsls	r1, r2, #5
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	440a      	add	r2, r1
 8005662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005666:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800566a:	6113      	str	r3, [r2, #16]
 800566c:	e03a      	b.n	80056e4 <USB_EPStartXfer+0x3e4>
 800566e:	bf00      	nop
 8005670:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	699a      	ldr	r2, [r3, #24]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4413      	add	r3, r2
 800567e:	1e5a      	subs	r2, r3, #1
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	8afa      	ldrh	r2, [r7, #22]
 8005690:	fb03 f202 	mul.w	r2, r3, r2
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	8afb      	ldrh	r3, [r7, #22]
 80056a8:	04d9      	lsls	r1, r3, #19
 80056aa:	4b38      	ldr	r3, [pc, #224]	; (800578c <USB_EPStartXfer+0x48c>)
 80056ac:	400b      	ands	r3, r1
 80056ae:	69b9      	ldr	r1, [r7, #24]
 80056b0:	0148      	lsls	r0, r1, #5
 80056b2:	69f9      	ldr	r1, [r7, #28]
 80056b4:	4401      	add	r1, r0
 80056b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056ba:	4313      	orrs	r3, r2
 80056bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	691a      	ldr	r2, [r3, #16]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d4:	69b9      	ldr	r1, [r7, #24]
 80056d6:	0148      	lsls	r0, r1, #5
 80056d8:	69f9      	ldr	r1, [r7, #28]
 80056da:	4401      	add	r1, r0
 80056dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056e0:	4313      	orrs	r3, r2
 80056e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d10d      	bne.n	8005706 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	6919      	ldr	r1, [r3, #16]
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	460a      	mov	r2, r1
 8005704:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	791b      	ldrb	r3, [r3, #4]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d128      	bne.n	8005760 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d110      	bne.n	8005740 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	440a      	add	r2, r1
 8005734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005738:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e00f      	b.n	8005760 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	440a      	add	r2, r1
 8005756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800575a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	440a      	add	r2, r1
 8005776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800577a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800577e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	1ff80000 	.word	0x1ff80000

08005790 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	f040 80ce 	bne.w	800594e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d132      	bne.n	8005820 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005818:	0cdb      	lsrs	r3, r3, #19
 800581a:	04db      	lsls	r3, r3, #19
 800581c:	6113      	str	r3, [r2, #16]
 800581e:	e04e      	b.n	80058be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	440a      	add	r2, r1
 8005836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583a:	0cdb      	lsrs	r3, r3, #19
 800583c:	04db      	lsls	r3, r3, #19
 800583e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	0151      	lsls	r1, r2, #5
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	440a      	add	r2, r1
 8005856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800585e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005862:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	699a      	ldr	r2, [r3, #24]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	429a      	cmp	r2, r3
 800586e:	d903      	bls.n	8005878 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	440a      	add	r2, r1
 800588e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005896:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	691a      	ldr	r2, [r3, #16]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058ae:	6939      	ldr	r1, [r7, #16]
 80058b0:	0148      	lsls	r0, r1, #5
 80058b2:	6979      	ldr	r1, [r7, #20]
 80058b4:	4401      	add	r1, r0
 80058b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80058ba:	4313      	orrs	r3, r2
 80058bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d11e      	bne.n	8005902 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d009      	beq.n	80058e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	015a      	lsls	r2, r3, #5
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e097      	b.n	8005a32 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	440a      	add	r2, r1
 8005918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800591c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005920:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 8083 	beq.w	8005a32 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	6979      	ldr	r1, [r7, #20]
 8005944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005948:	4313      	orrs	r3, r2
 800594a:	634b      	str	r3, [r1, #52]	; 0x34
 800594c:	e071      	b.n	8005a32 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005968:	0cdb      	lsrs	r3, r3, #19
 800596a:	04db      	lsls	r3, r3, #19
 800596c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800598c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005990:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	69db      	ldr	r3, [r3, #28]
 80059dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e0:	6939      	ldr	r1, [r7, #16]
 80059e2:	0148      	lsls	r0, r1, #5
 80059e4:	6979      	ldr	r1, [r7, #20]
 80059e6:	4401      	add	r1, r0
 80059e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059ec:	4313      	orrs	r3, r2
 80059ee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059f0:	79fb      	ldrb	r3, [r7, #7]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d10d      	bne.n	8005a12 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6919      	ldr	r1, [r3, #16]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	460a      	mov	r2, r1
 8005a10:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	785b      	ldrb	r3, [r3, #1]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d14a      	bne.n	8005af4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a76:	f040 8086 	bne.w	8005b86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	0151      	lsls	r1, r2, #5
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	440a      	add	r2, r1
 8005a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	7812      	ldrb	r2, [r2, #0]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005abc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ac0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f242 7210 	movw	r2, #10000	; 0x2710
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d902      	bls.n	8005ad8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ad6:	e056      	b.n	8005b86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005af0:	d0e7      	beq.n	8005ac2 <USB_EPStopXfer+0x82>
 8005af2:	e048      	b.n	8005b86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b0c:	d13b      	bne.n	8005b86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	7812      	ldrb	r2, [r2, #0]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	7812      	ldrb	r2, [r2, #0]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d902      	bls.n	8005b6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	75fb      	strb	r3, [r7, #23]
          break;
 8005b6a:	e00c      	b.n	8005b86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b84:	d0e7      	beq.n	8005b56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b089      	sub	sp, #36	; 0x24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	71fb      	strb	r3, [r7, #7]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005bb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d123      	bne.n	8005c02 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005bba:	88bb      	ldrh	r3, [r7, #4]
 8005bbc:	3303      	adds	r3, #3
 8005bbe:	089b      	lsrs	r3, r3, #2
 8005bc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	e018      	b.n	8005bfa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	031a      	lsls	r2, r3, #12
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	3301      	adds	r3, #1
 8005be0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	3301      	adds	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	3301      	adds	r3, #1
 8005bec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d3e2      	bcc.n	8005bc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3724      	adds	r7, #36	; 0x24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b08b      	sub	sp, #44	; 0x2c
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	089b      	lsrs	r3, r3, #2
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	e014      	b.n	8005c66 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	3301      	adds	r3, #1
 8005c52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	3301      	adds	r3, #1
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	3301      	adds	r3, #1
 8005c64:	623b      	str	r3, [r7, #32]
 8005c66:	6a3a      	ldr	r2, [r7, #32]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d3e6      	bcc.n	8005c3c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c6e:	8bfb      	ldrh	r3, [r7, #30]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01e      	beq.n	8005cb2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f107 0310 	add.w	r3, r7, #16
 8005c84:	6812      	ldr	r2, [r2, #0]
 8005c86:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	fa22 f303 	lsr.w	r3, r2, r3
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	701a      	strb	r2, [r3, #0]
      i++;
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ca6:	8bfb      	ldrh	r3, [r7, #30]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cac:	8bfb      	ldrh	r3, [r7, #30]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1ea      	bne.n	8005c88 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	372c      	adds	r7, #44	; 0x2c
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d12c      	bne.n	8005d36 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	db12      	blt.n	8005d14 <USB_EPSetStall+0x54>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00f      	beq.n	8005d14 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d12:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	e02b      	b.n	8005d8e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	db12      	blt.n	8005d6e <USB_EPSetStall+0xae>
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00f      	beq.n	8005d6e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d6c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d8e:	2300      	movs	r3, #0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	785b      	ldrb	r3, [r3, #1]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d128      	bne.n	8005e0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	791b      	ldrb	r3, [r3, #4]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d003      	beq.n	8005de8 <USB_EPClearStall+0x4c>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	791b      	ldrb	r3, [r3, #4]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d138      	bne.n	8005e5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	e027      	b.n	8005e5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	791b      	ldrb	r3, [r3, #4]
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d003      	beq.n	8005e3a <USB_EPClearStall+0x9e>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	791b      	ldrb	r3, [r3, #4]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d10f      	bne.n	8005e5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e8a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	011b      	lsls	r3, r3, #4
 8005e98:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e9c:	68f9      	ldr	r1, [r7, #12]
 8005e9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ece:	f023 0303 	bic.w	r3, r3, #3
 8005ed2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee2:	f023 0302 	bic.w	r3, r3, #2
 8005ee6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b085      	sub	sp, #20
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f10:	f023 0303 	bic.w	r3, r3, #3
 8005f14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f24:	f043 0302 	orr.w	r3, r3, #2
 8005f28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	0c1b      	lsrs	r3, r3, #16
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	b29b      	uxth	r3, r3
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006002:	b480      	push	{r7}
 8006004:	b087      	sub	sp, #28
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
 800600a:	460b      	mov	r3, r1
 800600c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006024:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	fa22 f303 	lsr.w	r3, r2, r3
 8006032:	01db      	lsls	r3, r3, #7
 8006034:	b2db      	uxtb	r3, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4013      	ands	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006050:	68bb      	ldr	r3, [r7, #8]
}
 8006052:	4618      	mov	r0, r3
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800605e:	b480      	push	{r7}
 8006060:	b083      	sub	sp, #12
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	f003 0301 	and.w	r3, r3, #1
}
 800606e:	4618      	mov	r0, r3
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800607a:	b480      	push	{r7}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006094:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006098:	f023 0307 	bic.w	r3, r3, #7
 800609c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	460b      	mov	r3, r1
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	333c      	adds	r3, #60	; 0x3c
 80060d6:	3304      	adds	r3, #4
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4a26      	ldr	r2, [pc, #152]	; (8006178 <USB_EP0_OutStart+0xb8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d90a      	bls.n	80060fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f4:	d101      	bne.n	80060fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060f6:	2300      	movs	r3, #0
 80060f8:	e037      	b.n	800616a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	461a      	mov	r2, r3
 8006102:	2300      	movs	r3, #0
 8006104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006128:	f043 0318 	orr.w	r3, r3, #24
 800612c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006140:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006142:	7afb      	ldrb	r3, [r7, #11]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d10f      	bne.n	8006168 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006162:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	4f54300a 	.word	0x4f54300a

0800617c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <USB_CoreReset+0x64>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e01b      	b.n	80061d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	daf2      	bge.n	8006188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f043 0201 	orr.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a09      	ldr	r2, [pc, #36]	; (80061e0 <USB_CoreReset+0x64>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e006      	b.n	80061d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d0f0      	beq.n	80061b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	00030d40 	.word	0x00030d40

080061e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	460b      	mov	r3, r1
 80061ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061f4:	f002 fc94 	bl	8008b20 <USBD_static_malloc>
 80061f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32b0      	adds	r2, #176	; 0xb0
 800620a:	2100      	movs	r1, #0
 800620c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006210:	2302      	movs	r3, #2
 8006212:	e0d4      	b.n	80063be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006214:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006218:	2100      	movs	r1, #0
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f002 fce8 	bl	8008bf0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	32b0      	adds	r2, #176	; 0xb0
 800622a:	68f9      	ldr	r1, [r7, #12]
 800622c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32b0      	adds	r2, #176	; 0xb0
 800623a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	7c1b      	ldrb	r3, [r3, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d138      	bne.n	80062be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800624c:	4b5e      	ldr	r3, [pc, #376]	; (80063c8 <USBD_CDC_Init+0x1e4>)
 800624e:	7819      	ldrb	r1, [r3, #0]
 8006250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006254:	2202      	movs	r2, #2
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f002 fb3f 	bl	80088da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800625c:	4b5a      	ldr	r3, [pc, #360]	; (80063c8 <USBD_CDC_Init+0x1e4>)
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	f003 020f 	and.w	r2, r3, #15
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	3324      	adds	r3, #36	; 0x24
 8006272:	2201      	movs	r2, #1
 8006274:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006276:	4b55      	ldr	r3, [pc, #340]	; (80063cc <USBD_CDC_Init+0x1e8>)
 8006278:	7819      	ldrb	r1, [r3, #0]
 800627a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800627e:	2202      	movs	r2, #2
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f002 fb2a 	bl	80088da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006286:	4b51      	ldr	r3, [pc, #324]	; (80063cc <USBD_CDC_Init+0x1e8>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f003 020f 	and.w	r2, r3, #15
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800629e:	2201      	movs	r2, #1
 80062a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062a2:	4b4b      	ldr	r3, [pc, #300]	; (80063d0 <USBD_CDC_Init+0x1ec>)
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f003 020f 	and.w	r2, r3, #15
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	3326      	adds	r3, #38	; 0x26
 80062b8:	2210      	movs	r2, #16
 80062ba:	801a      	strh	r2, [r3, #0]
 80062bc:	e035      	b.n	800632a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062be:	4b42      	ldr	r3, [pc, #264]	; (80063c8 <USBD_CDC_Init+0x1e4>)
 80062c0:	7819      	ldrb	r1, [r3, #0]
 80062c2:	2340      	movs	r3, #64	; 0x40
 80062c4:	2202      	movs	r2, #2
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f002 fb07 	bl	80088da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062cc:	4b3e      	ldr	r3, [pc, #248]	; (80063c8 <USBD_CDC_Init+0x1e4>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 020f 	and.w	r2, r3, #15
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	3324      	adds	r3, #36	; 0x24
 80062e2:	2201      	movs	r2, #1
 80062e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062e6:	4b39      	ldr	r3, [pc, #228]	; (80063cc <USBD_CDC_Init+0x1e8>)
 80062e8:	7819      	ldrb	r1, [r3, #0]
 80062ea:	2340      	movs	r3, #64	; 0x40
 80062ec:	2202      	movs	r2, #2
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f002 faf3 	bl	80088da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062f4:	4b35      	ldr	r3, [pc, #212]	; (80063cc <USBD_CDC_Init+0x1e8>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	440b      	add	r3, r1
 8006308:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800630c:	2201      	movs	r2, #1
 800630e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006310:	4b2f      	ldr	r3, [pc, #188]	; (80063d0 <USBD_CDC_Init+0x1ec>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f003 020f 	and.w	r2, r3, #15
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	3326      	adds	r3, #38	; 0x26
 8006326:	2210      	movs	r2, #16
 8006328:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800632a:	4b29      	ldr	r3, [pc, #164]	; (80063d0 <USBD_CDC_Init+0x1ec>)
 800632c:	7819      	ldrb	r1, [r3, #0]
 800632e:	2308      	movs	r3, #8
 8006330:	2203      	movs	r2, #3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f002 fad1 	bl	80088da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006338:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <USBD_CDC_Init+0x1ec>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	f003 020f 	and.w	r2, r3, #15
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	440b      	add	r3, r1
 800634c:	3324      	adds	r3, #36	; 0x24
 800634e:	2201      	movs	r2, #1
 8006350:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	33b0      	adds	r3, #176	; 0xb0
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006388:	2302      	movs	r3, #2
 800638a:	e018      	b.n	80063be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	7c1b      	ldrb	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10a      	bne.n	80063aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006394:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <USBD_CDC_Init+0x1e8>)
 8006396:	7819      	ldrb	r1, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800639e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f002 fb88 	bl	8008ab8 <USBD_LL_PrepareReceive>
 80063a8:	e008      	b.n	80063bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063aa:	4b08      	ldr	r3, [pc, #32]	; (80063cc <USBD_CDC_Init+0x1e8>)
 80063ac:	7819      	ldrb	r1, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063b4:	2340      	movs	r3, #64	; 0x40
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f002 fb7e 	bl	8008ab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000097 	.word	0x20000097
 80063cc:	20000098 	.word	0x20000098
 80063d0:	20000099 	.word	0x20000099

080063d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80063e0:	4b3a      	ldr	r3, [pc, #232]	; (80064cc <USBD_CDC_DeInit+0xf8>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f002 fa9d 	bl	8008926 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80063ec:	4b37      	ldr	r3, [pc, #220]	; (80064cc <USBD_CDC_DeInit+0xf8>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f003 020f 	and.w	r2, r3, #15
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	3324      	adds	r3, #36	; 0x24
 8006402:	2200      	movs	r2, #0
 8006404:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006406:	4b32      	ldr	r3, [pc, #200]	; (80064d0 <USBD_CDC_DeInit+0xfc>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f002 fa8a 	bl	8008926 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006412:	4b2f      	ldr	r3, [pc, #188]	; (80064d0 <USBD_CDC_DeInit+0xfc>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f003 020f 	and.w	r2, r3, #15
 800641a:	6879      	ldr	r1, [r7, #4]
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800642a:	2200      	movs	r2, #0
 800642c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800642e:	4b29      	ldr	r3, [pc, #164]	; (80064d4 <USBD_CDC_DeInit+0x100>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	4619      	mov	r1, r3
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f002 fa76 	bl	8008926 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800643a:	4b26      	ldr	r3, [pc, #152]	; (80064d4 <USBD_CDC_DeInit+0x100>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	3324      	adds	r3, #36	; 0x24
 8006450:	2200      	movs	r2, #0
 8006452:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006454:	4b1f      	ldr	r3, [pc, #124]	; (80064d4 <USBD_CDC_DeInit+0x100>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 020f 	and.w	r2, r3, #15
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	3326      	adds	r3, #38	; 0x26
 800646a:	2200      	movs	r2, #0
 800646c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	32b0      	adds	r2, #176	; 0xb0
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01f      	beq.n	80064c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	33b0      	adds	r3, #176	; 0xb0
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	32b0      	adds	r2, #176	; 0xb0
 800649e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f002 fb4a 	bl	8008b3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	32b0      	adds	r2, #176	; 0xb0
 80064b2:	2100      	movs	r1, #0
 80064b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000097 	.word	0x20000097
 80064d0:	20000098 	.word	0x20000098
 80064d4:	20000099 	.word	0x20000099

080064d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	32b0      	adds	r2, #176	; 0xb0
 80064ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006504:	2303      	movs	r3, #3
 8006506:	e0bf      	b.n	8006688 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006510:	2b00      	cmp	r3, #0
 8006512:	d050      	beq.n	80065b6 <USBD_CDC_Setup+0xde>
 8006514:	2b20      	cmp	r3, #32
 8006516:	f040 80af 	bne.w	8006678 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	88db      	ldrh	r3, [r3, #6]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d03a      	beq.n	8006598 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	b25b      	sxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	da1b      	bge.n	8006564 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	33b0      	adds	r3, #176	; 0xb0
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006542:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	88d2      	ldrh	r2, [r2, #6]
 8006548:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	88db      	ldrh	r3, [r3, #6]
 800654e:	2b07      	cmp	r3, #7
 8006550:	bf28      	it	cs
 8006552:	2307      	movcs	r3, #7
 8006554:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	89fa      	ldrh	r2, [r7, #14]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fd89 	bl	8008074 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006562:	e090      	b.n	8006686 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	785a      	ldrb	r2, [r3, #1]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	88db      	ldrh	r3, [r3, #6]
 8006572:	2b3f      	cmp	r3, #63	; 0x3f
 8006574:	d803      	bhi.n	800657e <USBD_CDC_Setup+0xa6>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	88db      	ldrh	r3, [r3, #6]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	e000      	b.n	8006580 <USBD_CDC_Setup+0xa8>
 800657e:	2240      	movs	r2, #64	; 0x40
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006586:	6939      	ldr	r1, [r7, #16]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800658e:	461a      	mov	r2, r3
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fd9b 	bl	80080cc <USBD_CtlPrepareRx>
      break;
 8006596:	e076      	b.n	8006686 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	33b0      	adds	r3, #176	; 0xb0
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	7850      	ldrb	r0, [r2, #1]
 80065ae:	2200      	movs	r2, #0
 80065b0:	6839      	ldr	r1, [r7, #0]
 80065b2:	4798      	blx	r3
      break;
 80065b4:	e067      	b.n	8006686 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	785b      	ldrb	r3, [r3, #1]
 80065ba:	2b0b      	cmp	r3, #11
 80065bc:	d851      	bhi.n	8006662 <USBD_CDC_Setup+0x18a>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <USBD_CDC_Setup+0xec>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065f5 	.word	0x080065f5
 80065c8:	08006671 	.word	0x08006671
 80065cc:	08006663 	.word	0x08006663
 80065d0:	08006663 	.word	0x08006663
 80065d4:	08006663 	.word	0x08006663
 80065d8:	08006663 	.word	0x08006663
 80065dc:	08006663 	.word	0x08006663
 80065e0:	08006663 	.word	0x08006663
 80065e4:	08006663 	.word	0x08006663
 80065e8:	08006663 	.word	0x08006663
 80065ec:	0800661f 	.word	0x0800661f
 80065f0:	08006649 	.word	0x08006649
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b03      	cmp	r3, #3
 80065fe:	d107      	bne.n	8006610 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006600:	f107 030a 	add.w	r3, r7, #10
 8006604:	2202      	movs	r2, #2
 8006606:	4619      	mov	r1, r3
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fd33 	bl	8008074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800660e:	e032      	b.n	8006676 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 fcbd 	bl	8007f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8006618:	2303      	movs	r3, #3
 800661a:	75fb      	strb	r3, [r7, #23]
          break;
 800661c:	e02b      	b.n	8006676 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b03      	cmp	r3, #3
 8006628:	d107      	bne.n	800663a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800662a:	f107 030d 	add.w	r3, r7, #13
 800662e:	2201      	movs	r2, #1
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fd1e 	bl	8008074 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006638:	e01d      	b.n	8006676 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800663a:	6839      	ldr	r1, [r7, #0]
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 fca8 	bl	8007f92 <USBD_CtlError>
            ret = USBD_FAIL;
 8006642:	2303      	movs	r3, #3
 8006644:	75fb      	strb	r3, [r7, #23]
          break;
 8006646:	e016      	b.n	8006676 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b03      	cmp	r3, #3
 8006652:	d00f      	beq.n	8006674 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f001 fc9b 	bl	8007f92 <USBD_CtlError>
            ret = USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006660:	e008      	b.n	8006674 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 fc94 	bl	8007f92 <USBD_CtlError>
          ret = USBD_FAIL;
 800666a:	2303      	movs	r3, #3
 800666c:	75fb      	strb	r3, [r7, #23]
          break;
 800666e:	e002      	b.n	8006676 <USBD_CDC_Setup+0x19e>
          break;
 8006670:	bf00      	nop
 8006672:	e008      	b.n	8006686 <USBD_CDC_Setup+0x1ae>
          break;
 8006674:	bf00      	nop
      }
      break;
 8006676:	e006      	b.n	8006686 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 fc89 	bl	8007f92 <USBD_CtlError>
      ret = USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	75fb      	strb	r3, [r7, #23]
      break;
 8006684:	bf00      	nop
  }

  return (uint8_t)ret;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	32b0      	adds	r2, #176	; 0xb0
 80066ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e065      	b.n	8006786 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	32b0      	adds	r2, #176	; 0xb0
 80066c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	f003 020f 	and.w	r2, r3, #15
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	440b      	add	r3, r1
 80066dc:	3318      	adds	r3, #24
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d02f      	beq.n	8006744 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80066e4:	78fb      	ldrb	r3, [r7, #3]
 80066e6:	f003 020f 	and.w	r2, r3, #15
 80066ea:	6879      	ldr	r1, [r7, #4]
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	3318      	adds	r3, #24
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	f003 010f 	and.w	r1, r3, #15
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	460b      	mov	r3, r1
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	440b      	add	r3, r1
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4403      	add	r3, r0
 800670c:	3348      	adds	r3, #72	; 0x48
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	fbb2 f1f3 	udiv	r1, r2, r3
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800671a:	2b00      	cmp	r3, #0
 800671c:	d112      	bne.n	8006744 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	f003 020f 	and.w	r2, r3, #15
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	3318      	adds	r3, #24
 8006732:	2200      	movs	r2, #0
 8006734:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006736:	78f9      	ldrb	r1, [r7, #3]
 8006738:	2300      	movs	r3, #0
 800673a:	2200      	movs	r2, #0
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f002 f99a 	bl	8008a76 <USBD_LL_Transmit>
 8006742:	e01f      	b.n	8006784 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	33b0      	adds	r3, #176	; 0xb0
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d010      	beq.n	8006784 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	33b0      	adds	r3, #176	; 0xb0
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	32b0      	adds	r2, #176	; 0xb0
 80067a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	32b0      	adds	r2, #176	; 0xb0
 80067b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80067bc:	2303      	movs	r3, #3
 80067be:	e01a      	b.n	80067f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f002 f998 	bl	8008afa <USBD_LL_GetRxDataSize>
 80067ca:	4602      	mov	r2, r0
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	33b0      	adds	r3, #176	; 0xb0
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067f0:	4611      	mov	r1, r2
 80067f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	32b0      	adds	r2, #176	; 0xb0
 8006810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006814:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800681c:	2303      	movs	r3, #3
 800681e:	e025      	b.n	800686c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	33b0      	adds	r3, #176	; 0xb0
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01a      	beq.n	800686a <USBD_CDC_EP0_RxReady+0x6c>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800683a:	2bff      	cmp	r3, #255	; 0xff
 800683c:	d015      	beq.n	800686a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	33b0      	adds	r3, #176	; 0xb0
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4413      	add	r3, r2
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006856:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800685e:	b292      	uxth	r2, r2
 8006860:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800687c:	2182      	movs	r1, #130	; 0x82
 800687e:	4818      	ldr	r0, [pc, #96]	; (80068e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006880:	f000 fd4f 	bl	8007322 <USBD_GetEpDesc>
 8006884:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006886:	2101      	movs	r1, #1
 8006888:	4815      	ldr	r0, [pc, #84]	; (80068e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800688a:	f000 fd4a 	bl	8007322 <USBD_GetEpDesc>
 800688e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006890:	2181      	movs	r1, #129	; 0x81
 8006892:	4813      	ldr	r0, [pc, #76]	; (80068e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006894:	f000 fd45 	bl	8007322 <USBD_GetEpDesc>
 8006898:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2210      	movs	r2, #16
 80068a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d006      	beq.n	80068ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068b4:	711a      	strb	r2, [r3, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d006      	beq.n	80068ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068c8:	711a      	strb	r2, [r3, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2243      	movs	r2, #67	; 0x43
 80068d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000054 	.word	0x20000054

080068e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068ec:	2182      	movs	r1, #130	; 0x82
 80068ee:	4818      	ldr	r0, [pc, #96]	; (8006950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068f0:	f000 fd17 	bl	8007322 <USBD_GetEpDesc>
 80068f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068f6:	2101      	movs	r1, #1
 80068f8:	4815      	ldr	r0, [pc, #84]	; (8006950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068fa:	f000 fd12 	bl	8007322 <USBD_GetEpDesc>
 80068fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006900:	2181      	movs	r1, #129	; 0x81
 8006902:	4813      	ldr	r0, [pc, #76]	; (8006950 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006904:	f000 fd0d 	bl	8007322 <USBD_GetEpDesc>
 8006908:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2210      	movs	r2, #16
 8006914:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d006      	beq.n	800692a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2200      	movs	r2, #0
 8006920:	711a      	strb	r2, [r3, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f042 0202 	orr.w	r2, r2, #2
 8006928:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d006      	beq.n	800693e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	711a      	strb	r2, [r3, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f042 0202 	orr.w	r2, r2, #2
 800693c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2243      	movs	r2, #67	; 0x43
 8006942:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20000054 	.word	0x20000054

08006954 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800695c:	2182      	movs	r1, #130	; 0x82
 800695e:	4818      	ldr	r0, [pc, #96]	; (80069c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006960:	f000 fcdf 	bl	8007322 <USBD_GetEpDesc>
 8006964:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006966:	2101      	movs	r1, #1
 8006968:	4815      	ldr	r0, [pc, #84]	; (80069c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800696a:	f000 fcda 	bl	8007322 <USBD_GetEpDesc>
 800696e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006970:	2181      	movs	r1, #129	; 0x81
 8006972:	4813      	ldr	r0, [pc, #76]	; (80069c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006974:	f000 fcd5 	bl	8007322 <USBD_GetEpDesc>
 8006978:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2210      	movs	r2, #16
 8006984:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d006      	beq.n	800699a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	2200      	movs	r2, #0
 8006990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006994:	711a      	strb	r2, [r3, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069a8:	711a      	strb	r2, [r3, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2243      	movs	r2, #67	; 0x43
 80069b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069b4:	4b02      	ldr	r3, [pc, #8]	; (80069c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	20000054 	.word	0x20000054

080069c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	220a      	movs	r2, #10
 80069d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80069d2:	4b03      	ldr	r3, [pc, #12]	; (80069e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	20000010 	.word	0x20000010

080069e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e009      	b.n	8006a0c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	33b0      	adds	r3, #176	; 0xb0
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	32b0      	adds	r2, #176	; 0xb0
 8006a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a32:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e008      	b.n	8006a50 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	32b0      	adds	r2, #176	; 0xb0
 8006a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e004      	b.n	8006a8a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	32b0      	adds	r2, #176	; 0xb0
 8006aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	32b0      	adds	r2, #176	; 0xb0
 8006abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e025      	b.n	8006b16 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11f      	bne.n	8006b14 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006adc:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <USBD_CDC_TransmitPacket+0x88>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	f003 020f 	and.w	r2, r3, #15
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	4613      	mov	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4403      	add	r3, r0
 8006af6:	3318      	adds	r3, #24
 8006af8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006afa:	4b09      	ldr	r3, [pc, #36]	; (8006b20 <USBD_CDC_TransmitPacket+0x88>)
 8006afc:	7819      	ldrb	r1, [r3, #0]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 ffb3 	bl	8008a76 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000097 	.word	0x20000097

08006b24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	32b0      	adds	r2, #176	; 0xb0
 8006b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	32b0      	adds	r2, #176	; 0xb0
 8006b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e018      	b.n	8006b84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7c1b      	ldrb	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	; (8006b8c <USBD_CDC_ReceivePacket+0x68>)
 8006b5c:	7819      	ldrb	r1, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 ffa5 	bl	8008ab8 <USBD_LL_PrepareReceive>
 8006b6e:	e008      	b.n	8006b82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <USBD_CDC_ReceivePacket+0x68>)
 8006b72:	7819      	ldrb	r1, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b7a:	2340      	movs	r3, #64	; 0x40
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 ff9b 	bl	8008ab8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000098 	.word	0x20000098

08006b90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e01f      	b.n	8006be8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	79fa      	ldrb	r2, [r7, #7]
 8006bda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f001 fe15 	bl	800880c <USBD_LL_Init>
 8006be2:	4603      	mov	r3, r0
 8006be4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e025      	b.n	8006c54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	32ae      	adds	r2, #174	; 0xae
 8006c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00f      	beq.n	8006c44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	; 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	f107 020e 	add.w	r2, r7, #14
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fe1d 	bl	80088a4 <USBD_LL_Start>
 8006c6a:	4603      	mov	r3, r0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	460b      	mov	r3, r1
 8006c94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d009      	beq.n	8006cb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	78fa      	ldrb	r2, [r7, #3]
 8006cae:	4611      	mov	r1, r2
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	4798      	blx	r3
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	78fa      	ldrb	r2, [r7, #3]
 8006cdc:	4611      	mov	r1, r2
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d06:	6839      	ldr	r1, [r7, #0]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f001 f908 	bl	8007f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d01a      	beq.n	8006d68 <USBD_LL_SetupStage+0x72>
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d822      	bhi.n	8006d7c <USBD_LL_SetupStage+0x86>
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <USBD_LL_SetupStage+0x4a>
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d00a      	beq.n	8006d54 <USBD_LL_SetupStage+0x5e>
 8006d3e:	e01d      	b.n	8006d7c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fb5f 	bl	800740c <USBD_StdDevReq>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73fb      	strb	r3, [r7, #15]
      break;
 8006d52:	e020      	b.n	8006d96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fbc7 	bl	80074f0 <USBD_StdItfReq>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
      break;
 8006d66:	e016      	b.n	8006d96 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fc29 	bl	80075c8 <USBD_StdEPReq>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73fb      	strb	r3, [r7, #15]
      break;
 8006d7a:	e00c      	b.n	8006d96 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 fdea 	bl	8008964 <USBD_LL_StallEP>
 8006d90:	4603      	mov	r3, r0
 8006d92:	73fb      	strb	r3, [r7, #15]
      break;
 8006d94:	bf00      	nop
  }

  return ret;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	460b      	mov	r3, r1
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006db2:	7afb      	ldrb	r3, [r7, #11]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d16e      	bne.n	8006e96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006dbe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006dc6:	2b03      	cmp	r3, #3
 8006dc8:	f040 8098 	bne.w	8006efc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d913      	bls.n	8006e00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	1ad2      	subs	r2, r2, r3
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	bf28      	it	cs
 8006df2:	4613      	movcs	r3, r2
 8006df4:	461a      	mov	r2, r3
 8006df6:	6879      	ldr	r1, [r7, #4]
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f001 f984 	bl	8008106 <USBD_CtlContinueRx>
 8006dfe:	e07d      	b.n	8006efc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e06:	f003 031f 	and.w	r3, r3, #31
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d014      	beq.n	8006e38 <USBD_LL_DataOutStage+0x98>
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d81d      	bhi.n	8006e4e <USBD_LL_DataOutStage+0xae>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <USBD_LL_DataOutStage+0x7c>
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d003      	beq.n	8006e22 <USBD_LL_DataOutStage+0x82>
 8006e1a:	e018      	b.n	8006e4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	75bb      	strb	r3, [r7, #22]
            break;
 8006e20:	e018      	b.n	8006e54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 fa5e 	bl	80072ee <USBD_CoreFindIF>
 8006e32:	4603      	mov	r3, r0
 8006e34:	75bb      	strb	r3, [r7, #22]
            break;
 8006e36:	e00d      	b.n	8006e54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f000 fa60 	bl	8007308 <USBD_CoreFindEP>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75bb      	strb	r3, [r7, #22]
            break;
 8006e4c:	e002      	b.n	8006e54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	75bb      	strb	r3, [r7, #22]
            break;
 8006e52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e54:	7dbb      	ldrb	r3, [r7, #22]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d119      	bne.n	8006e8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d113      	bne.n	8006e8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e66:	7dba      	ldrb	r2, [r7, #22]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	32ae      	adds	r2, #174	; 0xae
 8006e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e76:	7dba      	ldrb	r2, [r7, #22]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e7e:	7dba      	ldrb	r2, [r7, #22]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	32ae      	adds	r2, #174	; 0xae
 8006e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f001 f94a 	bl	8008128 <USBD_CtlSendStatus>
 8006e94:	e032      	b.n	8006efc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e96:	7afb      	ldrb	r3, [r7, #11]
 8006e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 fa31 	bl	8007308 <USBD_CoreFindEP>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006eaa:	7dbb      	ldrb	r3, [r7, #22]
 8006eac:	2bff      	cmp	r3, #255	; 0xff
 8006eae:	d025      	beq.n	8006efc <USBD_LL_DataOutStage+0x15c>
 8006eb0:	7dbb      	ldrb	r3, [r7, #22]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d122      	bne.n	8006efc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d117      	bne.n	8006ef2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ec2:	7dba      	ldrb	r2, [r7, #22]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	32ae      	adds	r2, #174	; 0xae
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00f      	beq.n	8006ef2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006ed2:	7dba      	ldrb	r2, [r7, #22]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006eda:	7dba      	ldrb	r2, [r7, #22]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	32ae      	adds	r2, #174	; 0xae
 8006ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	7afa      	ldrb	r2, [r7, #11]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	4798      	blx	r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	e000      	b.n	8006efe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b086      	sub	sp, #24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	607a      	str	r2, [r7, #4]
 8006f12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d16f      	bne.n	8006ffa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3314      	adds	r3, #20
 8006f1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d15a      	bne.n	8006fe0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d914      	bls.n	8006f60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6879      	ldr	r1, [r7, #4]
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f001 f8ac 	bl	80080aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f52:	2300      	movs	r3, #0
 8006f54:	2200      	movs	r2, #0
 8006f56:	2100      	movs	r1, #0
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f001 fdad 	bl	8008ab8 <USBD_LL_PrepareReceive>
 8006f5e:	e03f      	b.n	8006fe0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d11c      	bne.n	8006fa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d316      	bcc.n	8006fa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d20f      	bcs.n	8006fa6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f86:	2200      	movs	r2, #0
 8006f88:	2100      	movs	r1, #0
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f001 f88d 	bl	80080aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2100      	movs	r1, #0
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f001 fd8a 	bl	8008ab8 <USBD_LL_PrepareReceive>
 8006fa4:	e01c      	b.n	8006fe0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d10f      	bne.n	8006fd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fd2:	2180      	movs	r1, #128	; 0x80
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f001 fcc5 	bl	8008964 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f001 f8b7 	bl	800814e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d03a      	beq.n	8007060 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7ff fe42 	bl	8006c74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006ff8:	e032      	b.n	8007060 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007000:	b2db      	uxtb	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 f97f 	bl	8007308 <USBD_CoreFindEP>
 800700a:	4603      	mov	r3, r0
 800700c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	2bff      	cmp	r3, #255	; 0xff
 8007012:	d025      	beq.n	8007060 <USBD_LL_DataInStage+0x15a>
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d122      	bne.n	8007060 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b03      	cmp	r3, #3
 8007024:	d11c      	bne.n	8007060 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007026:	7dfa      	ldrb	r2, [r7, #23]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	32ae      	adds	r2, #174	; 0xae
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d014      	beq.n	8007060 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007036:	7dfa      	ldrb	r2, [r7, #23]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800703e:	7dfa      	ldrb	r2, [r7, #23]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	32ae      	adds	r2, #174	; 0xae
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	7afa      	ldrb	r2, [r7, #11]
 800704c:	4611      	mov	r1, r2
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	4798      	blx	r3
 8007052:	4603      	mov	r3, r0
 8007054:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007056:	7dbb      	ldrb	r3, [r7, #22]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800705c:	7dbb      	ldrb	r3, [r7, #22]
 800705e:	e000      	b.n	8007062 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3718      	adds	r7, #24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d014      	beq.n	80070d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	6852      	ldr	r2, [r2, #4]
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	4611      	mov	r1, r2
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	4798      	blx	r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d001      	beq.n	80070d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80070cc:	2303      	movs	r3, #3
 80070ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070d0:	2340      	movs	r3, #64	; 0x40
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 fbff 	bl	80088da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2240      	movs	r2, #64	; 0x40
 80070e8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070ec:	2340      	movs	r3, #64	; 0x40
 80070ee:	2200      	movs	r2, #0
 80070f0:	2180      	movs	r1, #128	; 0x80
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 fbf1 	bl	80088da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2240      	movs	r2, #64	; 0x40
 8007102:	621a      	str	r2, [r3, #32]

  return ret;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr

0800712e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800713c:	b2da      	uxtb	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2204      	movs	r2, #4
 8007148:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b04      	cmp	r3, #4
 800716c:	d106      	bne.n	800717c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007174:	b2da      	uxtb	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	370c      	adds	r7, #12
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b082      	sub	sp, #8
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b03      	cmp	r3, #3
 800719c:	d110      	bne.n	80071c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d00b      	beq.n	80071c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	32ae      	adds	r2, #174	; 0xae
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e01c      	b.n	8007226 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	d115      	bne.n	8007224 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	32ae      	adds	r2, #174	; 0xae
 8007202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32ae      	adds	r2, #174	; 0xae
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	78fa      	ldrb	r2, [r7, #3]
 800721e:	4611      	mov	r1, r2
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b082      	sub	sp, #8
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	32ae      	adds	r2, #174	; 0xae
 8007244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800724c:	2303      	movs	r3, #3
 800724e:	e01c      	b.n	800728a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b03      	cmp	r3, #3
 800725a:	d115      	bne.n	8007288 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32ae      	adds	r2, #174	; 0xae
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	32ae      	adds	r2, #174	; 0xae
 800727a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	4611      	mov	r1, r2
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00e      	beq.n	80072e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6852      	ldr	r2, [r2, #4]
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	4611      	mov	r1, r2
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072e0:	2303      	movs	r3, #3
 80072e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007314:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007316:	4618      	mov	r0, r3
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b086      	sub	sp, #24
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007336:	2300      	movs	r3, #0
 8007338:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	885b      	ldrh	r3, [r3, #2]
 800733e:	b29a      	uxth	r2, r3
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	429a      	cmp	r2, r3
 8007348:	d920      	bls.n	800738c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	b29b      	uxth	r3, r3
 8007350:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007352:	e013      	b.n	800737c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007354:	f107 030a 	add.w	r3, r7, #10
 8007358:	4619      	mov	r1, r3
 800735a:	6978      	ldr	r0, [r7, #20]
 800735c:	f000 f81b 	bl	8007396 <USBD_GetNextDesc>
 8007360:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b05      	cmp	r3, #5
 8007368:	d108      	bne.n	800737c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	789b      	ldrb	r3, [r3, #2]
 8007372:	78fa      	ldrb	r2, [r7, #3]
 8007374:	429a      	cmp	r2, r3
 8007376:	d008      	beq.n	800738a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007378:	2300      	movs	r3, #0
 800737a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	885b      	ldrh	r3, [r3, #2]
 8007380:	b29a      	uxth	r2, r3
 8007382:	897b      	ldrh	r3, [r7, #10]
 8007384:	429a      	cmp	r2, r3
 8007386:	d8e5      	bhi.n	8007354 <USBD_GetEpDesc+0x32>
 8007388:	e000      	b.n	800738c <USBD_GetEpDesc+0x6a>
          break;
 800738a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800738c:	693b      	ldr	r3, [r7, #16]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	881a      	ldrh	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	4413      	add	r3, r2
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4413      	add	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	3301      	adds	r3, #1
 80073e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073ee:	8a3b      	ldrh	r3, [r7, #16]
 80073f0:	021b      	lsls	r3, r3, #8
 80073f2:	b21a      	sxth	r2, r3
 80073f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	b21b      	sxth	r3, r3
 80073fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073fe:	89fb      	ldrh	r3, [r7, #14]
}
 8007400:	4618      	mov	r0, r3
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007422:	2b40      	cmp	r3, #64	; 0x40
 8007424:	d005      	beq.n	8007432 <USBD_StdDevReq+0x26>
 8007426:	2b40      	cmp	r3, #64	; 0x40
 8007428:	d857      	bhi.n	80074da <USBD_StdDevReq+0xce>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00f      	beq.n	800744e <USBD_StdDevReq+0x42>
 800742e:	2b20      	cmp	r3, #32
 8007430:	d153      	bne.n	80074da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	32ae      	adds	r2, #174	; 0xae
 800743c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
 8007448:	4603      	mov	r3, r0
 800744a:	73fb      	strb	r3, [r7, #15]
      break;
 800744c:	e04a      	b.n	80074e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	785b      	ldrb	r3, [r3, #1]
 8007452:	2b09      	cmp	r3, #9
 8007454:	d83b      	bhi.n	80074ce <USBD_StdDevReq+0xc2>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBD_StdDevReq+0x50>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	080074b1 	.word	0x080074b1
 8007460:	080074c5 	.word	0x080074c5
 8007464:	080074cf 	.word	0x080074cf
 8007468:	080074bb 	.word	0x080074bb
 800746c:	080074cf 	.word	0x080074cf
 8007470:	0800748f 	.word	0x0800748f
 8007474:	08007485 	.word	0x08007485
 8007478:	080074cf 	.word	0x080074cf
 800747c:	080074a7 	.word	0x080074a7
 8007480:	08007499 	.word	0x08007499
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa3c 	bl	8007904 <USBD_GetDescriptor>
          break;
 800748c:	e024      	b.n	80074d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 fba1 	bl	8007bd8 <USBD_SetAddress>
          break;
 8007496:	e01f      	b.n	80074d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fbe0 	bl	8007c60 <USBD_SetConfig>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]
          break;
 80074a4:	e018      	b.n	80074d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fc83 	bl	8007db4 <USBD_GetConfig>
          break;
 80074ae:	e013      	b.n	80074d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80074b0:	6839      	ldr	r1, [r7, #0]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 fcb4 	bl	8007e20 <USBD_GetStatus>
          break;
 80074b8:	e00e      	b.n	80074d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80074ba:	6839      	ldr	r1, [r7, #0]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fce3 	bl	8007e88 <USBD_SetFeature>
          break;
 80074c2:	e009      	b.n	80074d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fd07 	bl	8007eda <USBD_ClrFeature>
          break;
 80074cc:	e004      	b.n	80074d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fd5e 	bl	8007f92 <USBD_CtlError>
          break;
 80074d6:	bf00      	nop
      }
      break;
 80074d8:	e004      	b.n	80074e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fd58 	bl	8007f92 <USBD_CtlError>
      break;
 80074e2:	bf00      	nop
  }

  return ret;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop

080074f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007506:	2b40      	cmp	r3, #64	; 0x40
 8007508:	d005      	beq.n	8007516 <USBD_StdItfReq+0x26>
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d852      	bhi.n	80075b4 <USBD_StdItfReq+0xc4>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <USBD_StdItfReq+0x26>
 8007512:	2b20      	cmp	r3, #32
 8007514:	d14e      	bne.n	80075b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751c:	b2db      	uxtb	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	2b02      	cmp	r3, #2
 8007522:	d840      	bhi.n	80075a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	889b      	ldrh	r3, [r3, #4]
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b01      	cmp	r3, #1
 800752c:	d836      	bhi.n	800759c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	889b      	ldrh	r3, [r3, #4]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff fed9 	bl	80072ee <USBD_CoreFindIF>
 800753c:	4603      	mov	r3, r0
 800753e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	2bff      	cmp	r3, #255	; 0xff
 8007544:	d01d      	beq.n	8007582 <USBD_StdItfReq+0x92>
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d11a      	bne.n	8007582 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800754c:	7bba      	ldrb	r2, [r7, #14]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	32ae      	adds	r2, #174	; 0xae
 8007552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00f      	beq.n	800757c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800755c:	7bba      	ldrb	r2, [r7, #14]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007564:	7bba      	ldrb	r2, [r7, #14]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	32ae      	adds	r2, #174	; 0xae
 800756a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	4798      	blx	r3
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800757a:	e004      	b.n	8007586 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007580:	e001      	b.n	8007586 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	88db      	ldrh	r3, [r3, #6]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d110      	bne.n	80075b0 <USBD_StdItfReq+0xc0>
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10d      	bne.n	80075b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fdc7 	bl	8008128 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800759a:	e009      	b.n	80075b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fcf7 	bl	8007f92 <USBD_CtlError>
          break;
 80075a4:	e004      	b.n	80075b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fcf2 	bl	8007f92 <USBD_CtlError>
          break;
 80075ae:	e000      	b.n	80075b2 <USBD_StdItfReq+0xc2>
          break;
 80075b0:	bf00      	nop
      }
      break;
 80075b2:	e004      	b.n	80075be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fceb 	bl	8007f92 <USBD_CtlError>
      break;
 80075bc:	bf00      	nop
  }

  return ret;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	889b      	ldrh	r3, [r3, #4]
 80075da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d007      	beq.n	80075f8 <USBD_StdEPReq+0x30>
 80075e8:	2b40      	cmp	r3, #64	; 0x40
 80075ea:	f200 817f 	bhi.w	80078ec <USBD_StdEPReq+0x324>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d02a      	beq.n	8007648 <USBD_StdEPReq+0x80>
 80075f2:	2b20      	cmp	r3, #32
 80075f4:	f040 817a 	bne.w	80078ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075f8:	7bbb      	ldrb	r3, [r7, #14]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fe83 	bl	8007308 <USBD_CoreFindEP>
 8007602:	4603      	mov	r3, r0
 8007604:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007606:	7b7b      	ldrb	r3, [r7, #13]
 8007608:	2bff      	cmp	r3, #255	; 0xff
 800760a:	f000 8174 	beq.w	80078f6 <USBD_StdEPReq+0x32e>
 800760e:	7b7b      	ldrb	r3, [r7, #13]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f040 8170 	bne.w	80078f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007616:	7b7a      	ldrb	r2, [r7, #13]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800761e:	7b7a      	ldrb	r2, [r7, #13]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	32ae      	adds	r2, #174	; 0xae
 8007624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 8163 	beq.w	80078f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007630:	7b7a      	ldrb	r2, [r7, #13]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32ae      	adds	r2, #174	; 0xae
 8007636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
 8007642:	4603      	mov	r3, r0
 8007644:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007646:	e156      	b.n	80078f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	785b      	ldrb	r3, [r3, #1]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d008      	beq.n	8007662 <USBD_StdEPReq+0x9a>
 8007650:	2b03      	cmp	r3, #3
 8007652:	f300 8145 	bgt.w	80078e0 <USBD_StdEPReq+0x318>
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 809b 	beq.w	8007792 <USBD_StdEPReq+0x1ca>
 800765c:	2b01      	cmp	r3, #1
 800765e:	d03c      	beq.n	80076da <USBD_StdEPReq+0x112>
 8007660:	e13e      	b.n	80078e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b02      	cmp	r3, #2
 800766c:	d002      	beq.n	8007674 <USBD_StdEPReq+0xac>
 800766e:	2b03      	cmp	r3, #3
 8007670:	d016      	beq.n	80076a0 <USBD_StdEPReq+0xd8>
 8007672:	e02c      	b.n	80076ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <USBD_StdEPReq+0xce>
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b80      	cmp	r3, #128	; 0x80
 800767e:	d00a      	beq.n	8007696 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f96d 	bl	8008964 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800768a:	2180      	movs	r1, #128	; 0x80
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f969 	bl	8008964 <USBD_LL_StallEP>
 8007692:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007694:	e020      	b.n	80076d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fc7a 	bl	8007f92 <USBD_CtlError>
              break;
 800769e:	e01b      	b.n	80076d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	885b      	ldrh	r3, [r3, #2]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10e      	bne.n	80076c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00b      	beq.n	80076c6 <USBD_StdEPReq+0xfe>
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b80      	cmp	r3, #128	; 0x80
 80076b2:	d008      	beq.n	80076c6 <USBD_StdEPReq+0xfe>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	88db      	ldrh	r3, [r3, #6]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d104      	bne.n	80076c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 f94f 	bl	8008964 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 fd2e 	bl	8008128 <USBD_CtlSendStatus>

              break;
 80076cc:	e004      	b.n	80076d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc5e 	bl	8007f92 <USBD_CtlError>
              break;
 80076d6:	bf00      	nop
          }
          break;
 80076d8:	e107      	b.n	80078ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d002      	beq.n	80076ec <USBD_StdEPReq+0x124>
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d016      	beq.n	8007718 <USBD_StdEPReq+0x150>
 80076ea:	e04b      	b.n	8007784 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00d      	beq.n	800770e <USBD_StdEPReq+0x146>
 80076f2:	7bbb      	ldrb	r3, [r7, #14]
 80076f4:	2b80      	cmp	r3, #128	; 0x80
 80076f6:	d00a      	beq.n	800770e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f001 f931 	bl	8008964 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007702:	2180      	movs	r1, #128	; 0x80
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 f92d 	bl	8008964 <USBD_LL_StallEP>
 800770a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800770c:	e040      	b.n	8007790 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fc3e 	bl	8007f92 <USBD_CtlError>
              break;
 8007716:	e03b      	b.n	8007790 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	885b      	ldrh	r3, [r3, #2]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d136      	bne.n	800778e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 f937 	bl	80089a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fcf7 	bl	8008128 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800773a:	7bbb      	ldrb	r3, [r7, #14]
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7ff fde2 	bl	8007308 <USBD_CoreFindEP>
 8007744:	4603      	mov	r3, r0
 8007746:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007748:	7b7b      	ldrb	r3, [r7, #13]
 800774a:	2bff      	cmp	r3, #255	; 0xff
 800774c:	d01f      	beq.n	800778e <USBD_StdEPReq+0x1c6>
 800774e:	7b7b      	ldrb	r3, [r7, #13]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11c      	bne.n	800778e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007754:	7b7a      	ldrb	r2, [r7, #13]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800775c:	7b7a      	ldrb	r2, [r7, #13]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	32ae      	adds	r2, #174	; 0xae
 8007762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d010      	beq.n	800778e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800776c:	7b7a      	ldrb	r2, [r7, #13]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	32ae      	adds	r2, #174	; 0xae
 8007772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007782:	e004      	b.n	800778e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007784:	6839      	ldr	r1, [r7, #0]
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fc03 	bl	8007f92 <USBD_CtlError>
              break;
 800778c:	e000      	b.n	8007790 <USBD_StdEPReq+0x1c8>
              break;
 800778e:	bf00      	nop
          }
          break;
 8007790:	e0ab      	b.n	80078ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d002      	beq.n	80077a4 <USBD_StdEPReq+0x1dc>
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d032      	beq.n	8007808 <USBD_StdEPReq+0x240>
 80077a2:	e097      	b.n	80078d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d007      	beq.n	80077ba <USBD_StdEPReq+0x1f2>
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
 80077ac:	2b80      	cmp	r3, #128	; 0x80
 80077ae:	d004      	beq.n	80077ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fbed 	bl	8007f92 <USBD_CtlError>
                break;
 80077b8:	e091      	b.n	80078de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	da0b      	bge.n	80077da <USBD_StdEPReq+0x212>
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	3310      	adds	r3, #16
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	4413      	add	r3, r2
 80077d6:	3304      	adds	r3, #4
 80077d8:	e00b      	b.n	80077f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	4413      	add	r3, r2
 80077f0:	3304      	adds	r3, #4
 80077f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	2202      	movs	r2, #2
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fc37 	bl	8008074 <USBD_CtlSendData>
              break;
 8007806:	e06a      	b.n	80078de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da11      	bge.n	8007834 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007810:	7bbb      	ldrb	r3, [r7, #14]
 8007812:	f003 020f 	and.w	r2, r3, #15
 8007816:	6879      	ldr	r1, [r7, #4]
 8007818:	4613      	mov	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	440b      	add	r3, r1
 8007822:	3324      	adds	r3, #36	; 0x24
 8007824:	881b      	ldrh	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d117      	bne.n	800785a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fbb0 	bl	8007f92 <USBD_CtlError>
                  break;
 8007832:	e054      	b.n	80078de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	f003 020f 	and.w	r2, r3, #15
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d104      	bne.n	800785a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fb9d 	bl	8007f92 <USBD_CtlError>
                  break;
 8007858:	e041      	b.n	80078de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800785a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800785e:	2b00      	cmp	r3, #0
 8007860:	da0b      	bge.n	800787a <USBD_StdEPReq+0x2b2>
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	3310      	adds	r3, #16
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	4413      	add	r3, r2
 8007876:	3304      	adds	r3, #4
 8007878:	e00b      	b.n	8007892 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4413      	add	r3, r2
 8007890:	3304      	adds	r3, #4
 8007892:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <USBD_StdEPReq+0x2d8>
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	2b80      	cmp	r3, #128	; 0x80
 800789e:	d103      	bne.n	80078a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]
 80078a6:	e00e      	b.n	80078c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f001 f897 	bl	80089e0 <USBD_LL_IsStallEP>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d003      	beq.n	80078c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2201      	movs	r2, #1
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	e002      	b.n	80078c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2202      	movs	r2, #2
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fbd1 	bl	8008074 <USBD_CtlSendData>
              break;
 80078d2:	e004      	b.n	80078de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fb5b 	bl	8007f92 <USBD_CtlError>
              break;
 80078dc:	bf00      	nop
          }
          break;
 80078de:	e004      	b.n	80078ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fb55 	bl	8007f92 <USBD_CtlError>
          break;
 80078e8:	bf00      	nop
      }
      break;
 80078ea:	e005      	b.n	80078f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fb4f 	bl	8007f92 <USBD_CtlError>
      break;
 80078f4:	e000      	b.n	80078f8 <USBD_StdEPReq+0x330>
      break;
 80078f6:	bf00      	nop
  }

  return ret;
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	885b      	ldrh	r3, [r3, #2]
 800791e:	0a1b      	lsrs	r3, r3, #8
 8007920:	b29b      	uxth	r3, r3
 8007922:	3b01      	subs	r3, #1
 8007924:	2b06      	cmp	r3, #6
 8007926:	f200 8128 	bhi.w	8007b7a <USBD_GetDescriptor+0x276>
 800792a:	a201      	add	r2, pc, #4	; (adr r2, 8007930 <USBD_GetDescriptor+0x2c>)
 800792c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007930:	0800794d 	.word	0x0800794d
 8007934:	08007965 	.word	0x08007965
 8007938:	080079a5 	.word	0x080079a5
 800793c:	08007b7b 	.word	0x08007b7b
 8007940:	08007b7b 	.word	0x08007b7b
 8007944:	08007b1b 	.word	0x08007b1b
 8007948:	08007b47 	.word	0x08007b47
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7c12      	ldrb	r2, [r2, #16]
 8007958:	f107 0108 	add.w	r1, r7, #8
 800795c:	4610      	mov	r0, r2
 800795e:	4798      	blx	r3
 8007960:	60f8      	str	r0, [r7, #12]
      break;
 8007962:	e112      	b.n	8007b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	7c1b      	ldrb	r3, [r3, #16]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10d      	bne.n	8007988 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	f107 0208 	add.w	r2, r7, #8
 8007978:	4610      	mov	r0, r2
 800797a:	4798      	blx	r3
 800797c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	3301      	adds	r3, #1
 8007982:	2202      	movs	r2, #2
 8007984:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007986:	e100      	b.n	8007b8a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	f107 0208 	add.w	r2, r7, #8
 8007994:	4610      	mov	r0, r2
 8007996:	4798      	blx	r3
 8007998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	3301      	adds	r3, #1
 800799e:	2202      	movs	r2, #2
 80079a0:	701a      	strb	r2, [r3, #0]
      break;
 80079a2:	e0f2      	b.n	8007b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	885b      	ldrh	r3, [r3, #2]
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	f200 80ac 	bhi.w	8007b08 <USBD_GetDescriptor+0x204>
 80079b0:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <USBD_GetDescriptor+0xb4>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	080079d1 	.word	0x080079d1
 80079bc:	08007a05 	.word	0x08007a05
 80079c0:	08007a39 	.word	0x08007a39
 80079c4:	08007a6d 	.word	0x08007a6d
 80079c8:	08007aa1 	.word	0x08007aa1
 80079cc:	08007ad5 	.word	0x08007ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	7c12      	ldrb	r2, [r2, #16]
 80079e8:	f107 0108 	add.w	r1, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f2:	e091      	b.n	8007b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 facb 	bl	8007f92 <USBD_CtlError>
            err++;
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	3301      	adds	r3, #1
 8007a00:	72fb      	strb	r3, [r7, #11]
          break;
 8007a02:	e089      	b.n	8007b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7c12      	ldrb	r2, [r2, #16]
 8007a1c:	f107 0108 	add.w	r1, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a26:	e077      	b.n	8007b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fab1 	bl	8007f92 <USBD_CtlError>
            err++;
 8007a30:	7afb      	ldrb	r3, [r7, #11]
 8007a32:	3301      	adds	r3, #1
 8007a34:	72fb      	strb	r3, [r7, #11]
          break;
 8007a36:	e06f      	b.n	8007b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	7c12      	ldrb	r2, [r2, #16]
 8007a50:	f107 0108 	add.w	r1, r7, #8
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
 8007a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a5a:	e05d      	b.n	8007b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa97 	bl	8007f92 <USBD_CtlError>
            err++;
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	3301      	adds	r3, #1
 8007a68:	72fb      	strb	r3, [r7, #11]
          break;
 8007a6a:	e055      	b.n	8007b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	7c12      	ldrb	r2, [r2, #16]
 8007a84:	f107 0108 	add.w	r1, r7, #8
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8e:	e043      	b.n	8007b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa7d 	bl	8007f92 <USBD_CtlError>
            err++;
 8007a98:	7afb      	ldrb	r3, [r7, #11]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a9e:	e03b      	b.n	8007b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	7c12      	ldrb	r2, [r2, #16]
 8007ab8:	f107 0108 	add.w	r1, r7, #8
 8007abc:	4610      	mov	r0, r2
 8007abe:	4798      	blx	r3
 8007ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ac2:	e029      	b.n	8007b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa63 	bl	8007f92 <USBD_CtlError>
            err++;
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ad2:	e021      	b.n	8007b18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7c12      	ldrb	r2, [r2, #16]
 8007aec:	f107 0108 	add.w	r1, r7, #8
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af6:	e00f      	b.n	8007b18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa49 	bl	8007f92 <USBD_CtlError>
            err++;
 8007b00:	7afb      	ldrb	r3, [r7, #11]
 8007b02:	3301      	adds	r3, #1
 8007b04:	72fb      	strb	r3, [r7, #11]
          break;
 8007b06:	e007      	b.n	8007b18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b08:	6839      	ldr	r1, [r7, #0]
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa41 	bl	8007f92 <USBD_CtlError>
          err++;
 8007b10:	7afb      	ldrb	r3, [r7, #11]
 8007b12:	3301      	adds	r3, #1
 8007b14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b16:	bf00      	nop
      }
      break;
 8007b18:	e037      	b.n	8007b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	7c1b      	ldrb	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2a:	f107 0208 	add.w	r2, r7, #8
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4798      	blx	r3
 8007b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b34:	e029      	b.n	8007b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fa2a 	bl	8007f92 <USBD_CtlError>
        err++;
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	3301      	adds	r3, #1
 8007b42:	72fb      	strb	r3, [r7, #11]
      break;
 8007b44:	e021      	b.n	8007b8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7c1b      	ldrb	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10d      	bne.n	8007b6a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b56:	f107 0208 	add.w	r2, r7, #8
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	4798      	blx	r3
 8007b5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3301      	adds	r3, #1
 8007b64:	2207      	movs	r2, #7
 8007b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b68:	e00f      	b.n	8007b8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fa10 	bl	8007f92 <USBD_CtlError>
        err++;
 8007b72:	7afb      	ldrb	r3, [r7, #11]
 8007b74:	3301      	adds	r3, #1
 8007b76:	72fb      	strb	r3, [r7, #11]
      break;
 8007b78:	e007      	b.n	8007b8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fa08 	bl	8007f92 <USBD_CtlError>
      err++;
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	3301      	adds	r3, #1
 8007b86:	72fb      	strb	r3, [r7, #11]
      break;
 8007b88:	bf00      	nop
  }

  if (err != 0U)
 8007b8a:	7afb      	ldrb	r3, [r7, #11]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11e      	bne.n	8007bce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	88db      	ldrh	r3, [r3, #6]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d016      	beq.n	8007bc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b98:	893b      	ldrh	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00e      	beq.n	8007bbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	88da      	ldrh	r2, [r3, #6]
 8007ba2:	893b      	ldrh	r3, [r7, #8]
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	bf28      	it	cs
 8007ba8:	4613      	movcs	r3, r2
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bae:	893b      	ldrh	r3, [r7, #8]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68f9      	ldr	r1, [r7, #12]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fa5d 	bl	8008074 <USBD_CtlSendData>
 8007bba:	e009      	b.n	8007bd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f9e7 	bl	8007f92 <USBD_CtlError>
 8007bc4:	e004      	b.n	8007bd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 faae 	bl	8008128 <USBD_CtlSendStatus>
 8007bcc:	e000      	b.n	8007bd0 <USBD_GetDescriptor+0x2cc>
    return;
 8007bce:	bf00      	nop
  }
}
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop

08007bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	889b      	ldrh	r3, [r3, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d131      	bne.n	8007c4e <USBD_SetAddress+0x76>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	88db      	ldrh	r3, [r3, #6]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d12d      	bne.n	8007c4e <USBD_SetAddress+0x76>
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	885b      	ldrh	r3, [r3, #2]
 8007bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8007bf8:	d829      	bhi.n	8007c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	885b      	ldrh	r3, [r3, #2]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d104      	bne.n	8007c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f9bc 	bl	8007f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1a:	e01d      	b.n	8007c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7bfa      	ldrb	r2, [r7, #15]
 8007c20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c24:	7bfb      	ldrb	r3, [r7, #15]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 ff05 	bl	8008a38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fa7a 	bl	8008128 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d004      	beq.n	8007c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c42:	e009      	b.n	8007c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4c:	e004      	b.n	8007c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c4e:	6839      	ldr	r1, [r7, #0]
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 f99e 	bl	8007f92 <USBD_CtlError>
  }
}
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	885b      	ldrh	r3, [r3, #2]
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	4b4e      	ldr	r3, [pc, #312]	; (8007db0 <USBD_SetConfig+0x150>)
 8007c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c78:	4b4d      	ldr	r3, [pc, #308]	; (8007db0 <USBD_SetConfig+0x150>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d905      	bls.n	8007c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f985 	bl	8007f92 <USBD_CtlError>
    return USBD_FAIL;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e08c      	b.n	8007da6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d002      	beq.n	8007c9e <USBD_SetConfig+0x3e>
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d029      	beq.n	8007cf0 <USBD_SetConfig+0x90>
 8007c9c:	e075      	b.n	8007d8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c9e:	4b44      	ldr	r3, [pc, #272]	; (8007db0 <USBD_SetConfig+0x150>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d020      	beq.n	8007ce8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ca6:	4b42      	ldr	r3, [pc, #264]	; (8007db0 <USBD_SetConfig+0x150>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007cb0:	4b3f      	ldr	r3, [pc, #252]	; (8007db0 <USBD_SetConfig+0x150>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fe ffe7 	bl	8006c8a <USBD_SetClassConfig>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d008      	beq.n	8007cd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 f962 	bl	8007f92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007cd6:	e065      	b.n	8007da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa25 	bl	8008128 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2203      	movs	r2, #3
 8007ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ce6:	e05d      	b.n	8007da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa1d 	bl	8008128 <USBD_CtlSendStatus>
      break;
 8007cee:	e059      	b.n	8007da4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cf0:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <USBD_SetConfig+0x150>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d112      	bne.n	8007d1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d00:	4b2b      	ldr	r3, [pc, #172]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d0a:	4b29      	ldr	r3, [pc, #164]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7fe ffd6 	bl	8006cc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa06 	bl	8008128 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d1c:	e042      	b.n	8007da4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d1e:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d02a      	beq.n	8007d82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fe ffc4 	bl	8006cc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d3a:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d44:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fe ff9d 	bl	8006c8a <USBD_SetClassConfig>
 8007d50:	4603      	mov	r3, r0
 8007d52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00f      	beq.n	8007d7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f918 	bl	8007f92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fe ffa9 	bl	8006cc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2202      	movs	r2, #2
 8007d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d78:	e014      	b.n	8007da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9d4 	bl	8008128 <USBD_CtlSendStatus>
      break;
 8007d80:	e010      	b.n	8007da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9d0 	bl	8008128 <USBD_CtlSendStatus>
      break;
 8007d88:	e00c      	b.n	8007da4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f900 	bl	8007f92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d92:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <USBD_SetConfig+0x150>)
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fe ff92 	bl	8006cc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	73fb      	strb	r3, [r7, #15]
      break;
 8007da2:	bf00      	nop
  }

  return ret;
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20003168 	.word	0x20003168

08007db4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d004      	beq.n	8007dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007dc6:	6839      	ldr	r1, [r7, #0]
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f8e2 	bl	8007f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dce:	e023      	b.n	8007e18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	dc02      	bgt.n	8007de2 <USBD_GetConfig+0x2e>
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dc03      	bgt.n	8007de8 <USBD_GetConfig+0x34>
 8007de0:	e015      	b.n	8007e0e <USBD_GetConfig+0x5a>
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d00b      	beq.n	8007dfe <USBD_GetConfig+0x4a>
 8007de6:	e012      	b.n	8007e0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3308      	adds	r3, #8
 8007df2:	2201      	movs	r2, #1
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f93c 	bl	8008074 <USBD_CtlSendData>
        break;
 8007dfc:	e00c      	b.n	8007e18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3304      	adds	r3, #4
 8007e02:	2201      	movs	r2, #1
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f934 	bl	8008074 <USBD_CtlSendData>
        break;
 8007e0c:	e004      	b.n	8007e18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e0e:	6839      	ldr	r1, [r7, #0]
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f8be 	bl	8007f92 <USBD_CtlError>
        break;
 8007e16:	bf00      	nop
}
 8007e18:	bf00      	nop
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d81e      	bhi.n	8007e76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	88db      	ldrh	r3, [r3, #6]
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d004      	beq.n	8007e4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f8a5 	bl	8007f92 <USBD_CtlError>
        break;
 8007e48:	e01a      	b.n	8007e80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f043 0202 	orr.w	r2, r3, #2
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f900 	bl	8008074 <USBD_CtlSendData>
      break;
 8007e74:	e004      	b.n	8007e80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f88a 	bl	8007f92 <USBD_CtlError>
      break;
 8007e7e:	bf00      	nop
  }
}
 8007e80:	bf00      	nop
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	885b      	ldrh	r3, [r3, #2]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d107      	bne.n	8007eaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f940 	bl	8008128 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ea8:	e013      	b.n	8007ed2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	885b      	ldrh	r3, [r3, #2]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d10b      	bne.n	8007eca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	889b      	ldrh	r3, [r3, #4]
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f930 	bl	8008128 <USBD_CtlSendStatus>
}
 8007ec8:	e003      	b.n	8007ed2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f860 	bl	8007f92 <USBD_CtlError>
}
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d80b      	bhi.n	8007f0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	885b      	ldrh	r3, [r3, #2]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d10c      	bne.n	8007f14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f910 	bl	8008128 <USBD_CtlSendStatus>
      }
      break;
 8007f08:	e004      	b.n	8007f14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f840 	bl	8007f92 <USBD_CtlError>
      break;
 8007f12:	e000      	b.n	8007f16 <USBD_ClrFeature+0x3c>
      break;
 8007f14:	bf00      	nop
  }
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	781a      	ldrb	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3301      	adds	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fa41 	bl	80073d0 <SWAPBYTE>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	461a      	mov	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff fa34 	bl	80073d0 <SWAPBYTE>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7ff fa27 	bl	80073d0 <SWAPBYTE>
 8007f82:	4603      	mov	r3, r0
 8007f84:	461a      	mov	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	80da      	strh	r2, [r3, #6]
}
 8007f8a:	bf00      	nop
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f9c:	2180      	movs	r1, #128	; 0x80
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fce0 	bl	8008964 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fcdc 	bl	8008964 <USBD_LL_StallEP>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d036      	beq.n	8008038 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007fce:	6938      	ldr	r0, [r7, #16]
 8007fd0:	f000 f836 	bl	8008040 <USBD_GetLen>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	005b      	lsls	r3, r3, #1
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	7812      	ldrb	r2, [r2, #0]
 8007fec:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
 8007ff6:	68ba      	ldr	r2, [r7, #8]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	3301      	adds	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008004:	e013      	b.n	800802e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	4413      	add	r3, r2
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	7812      	ldrb	r2, [r2, #0]
 8008010:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	3301      	adds	r3, #1
 8008016:	613b      	str	r3, [r7, #16]
    idx++;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	3301      	adds	r3, #1
 800801c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800801e:	7dfb      	ldrb	r3, [r7, #23]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	4413      	add	r3, r2
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
    idx++;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	3301      	adds	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e7      	bne.n	8008006 <USBD_GetString+0x52>
 8008036:	e000      	b.n	800803a <USBD_GetString+0x86>
    return;
 8008038:	bf00      	nop
  }
}
 800803a:	3718      	adds	r7, #24
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008050:	e005      	b.n	800805e <USBD_GetLen+0x1e>
  {
    len++;
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	3301      	adds	r3, #1
 8008056:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	3301      	adds	r3, #1
 800805c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f5      	bne.n	8008052 <USBD_GetLen+0x12>
  }

  return len;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2202      	movs	r2, #2
 8008084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	2100      	movs	r1, #0
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fceb 	bl	8008a76 <USBD_LL_Transmit>

  return USBD_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	2100      	movs	r1, #0
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 fcda 	bl	8008a76 <USBD_LL_Transmit>

  return USBD_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3710      	adds	r7, #16
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2203      	movs	r2, #3
 80080dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fcde 	bl	8008ab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	60b9      	str	r1, [r7, #8]
 8008110:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68ba      	ldr	r2, [r7, #8]
 8008116:	2100      	movs	r1, #0
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fccd 	bl	8008ab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2204      	movs	r2, #4
 8008134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008138:	2300      	movs	r3, #0
 800813a:	2200      	movs	r2, #0
 800813c:	2100      	movs	r1, #0
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 fc99 	bl	8008a76 <USBD_LL_Transmit>

  return USBD_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2205      	movs	r2, #5
 800815a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800815e:	2300      	movs	r3, #0
 8008160:	2200      	movs	r2, #0
 8008162:	2100      	movs	r1, #0
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fca7 	bl	8008ab8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008178:	2200      	movs	r2, #0
 800817a:	4912      	ldr	r1, [pc, #72]	; (80081c4 <MX_USB_DEVICE_Init+0x50>)
 800817c:	4812      	ldr	r0, [pc, #72]	; (80081c8 <MX_USB_DEVICE_Init+0x54>)
 800817e:	f7fe fd07 	bl	8006b90 <USBD_Init>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008188:	f7f8 fce0 	bl	8000b4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800818c:	490f      	ldr	r1, [pc, #60]	; (80081cc <MX_USB_DEVICE_Init+0x58>)
 800818e:	480e      	ldr	r0, [pc, #56]	; (80081c8 <MX_USB_DEVICE_Init+0x54>)
 8008190:	f7fe fd2e 	bl	8006bf0 <USBD_RegisterClass>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d001      	beq.n	800819e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800819a:	f7f8 fcd7 	bl	8000b4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800819e:	490c      	ldr	r1, [pc, #48]	; (80081d0 <MX_USB_DEVICE_Init+0x5c>)
 80081a0:	4809      	ldr	r0, [pc, #36]	; (80081c8 <MX_USB_DEVICE_Init+0x54>)
 80081a2:	f7fe fc1f 	bl	80069e4 <USBD_CDC_RegisterInterface>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081ac:	f7f8 fcce 	bl	8000b4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80081b0:	4805      	ldr	r0, [pc, #20]	; (80081c8 <MX_USB_DEVICE_Init+0x54>)
 80081b2:	f7fe fd53 	bl	8006c5c <USBD_Start>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80081bc:	f7f8 fcc6 	bl	8000b4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80081c0:	bf00      	nop
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	200000b0 	.word	0x200000b0
 80081c8:	2000316c 	.word	0x2000316c
 80081cc:	2000001c 	.word	0x2000001c
 80081d0:	2000009c 	.word	0x2000009c

080081d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081d8:	2200      	movs	r2, #0
 80081da:	4905      	ldr	r1, [pc, #20]	; (80081f0 <CDC_Init_FS+0x1c>)
 80081dc:	4805      	ldr	r0, [pc, #20]	; (80081f4 <CDC_Init_FS+0x20>)
 80081de:	f7fe fc1b 	bl	8006a18 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081e2:	4905      	ldr	r1, [pc, #20]	; (80081f8 <CDC_Init_FS+0x24>)
 80081e4:	4803      	ldr	r0, [pc, #12]	; (80081f4 <CDC_Init_FS+0x20>)
 80081e6:	f7fe fc39 	bl	8006a5c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20003c48 	.word	0x20003c48
 80081f4:	2000316c 	.word	0x2000316c
 80081f8:	20003448 	.word	0x20003448

080081fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008200:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008202:	4618      	mov	r0, r3
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
 8008218:	4613      	mov	r3, r2
 800821a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	2b23      	cmp	r3, #35	; 0x23
 8008220:	d84a      	bhi.n	80082b8 <CDC_Control_FS+0xac>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <CDC_Control_FS+0x1c>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	080082b9 	.word	0x080082b9
 800822c:	080082b9 	.word	0x080082b9
 8008230:	080082b9 	.word	0x080082b9
 8008234:	080082b9 	.word	0x080082b9
 8008238:	080082b9 	.word	0x080082b9
 800823c:	080082b9 	.word	0x080082b9
 8008240:	080082b9 	.word	0x080082b9
 8008244:	080082b9 	.word	0x080082b9
 8008248:	080082b9 	.word	0x080082b9
 800824c:	080082b9 	.word	0x080082b9
 8008250:	080082b9 	.word	0x080082b9
 8008254:	080082b9 	.word	0x080082b9
 8008258:	080082b9 	.word	0x080082b9
 800825c:	080082b9 	.word	0x080082b9
 8008260:	080082b9 	.word	0x080082b9
 8008264:	080082b9 	.word	0x080082b9
 8008268:	080082b9 	.word	0x080082b9
 800826c:	080082b9 	.word	0x080082b9
 8008270:	080082b9 	.word	0x080082b9
 8008274:	080082b9 	.word	0x080082b9
 8008278:	080082b9 	.word	0x080082b9
 800827c:	080082b9 	.word	0x080082b9
 8008280:	080082b9 	.word	0x080082b9
 8008284:	080082b9 	.word	0x080082b9
 8008288:	080082b9 	.word	0x080082b9
 800828c:	080082b9 	.word	0x080082b9
 8008290:	080082b9 	.word	0x080082b9
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082b9 	.word	0x080082b9
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	080082b9 	.word	0x080082b9
 80082a4:	080082b9 	.word	0x080082b9
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082b9 	.word	0x080082b9
 80082b0:	080082b9 	.word	0x080082b9
 80082b4:	080082b9 	.word	0x080082b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80082b8:	bf00      	nop
  }

  return (USBD_OK);
 80082ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80082d2:	6879      	ldr	r1, [r7, #4]
 80082d4:	4805      	ldr	r0, [pc, #20]	; (80082ec <CDC_Receive_FS+0x24>)
 80082d6:	f7fe fbc1 	bl	8006a5c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082da:	4804      	ldr	r0, [pc, #16]	; (80082ec <CDC_Receive_FS+0x24>)
 80082dc:	f7fe fc22 	bl	8006b24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	2000316c 	.word	0x2000316c

080082f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008300:	4b0d      	ldr	r3, [pc, #52]	; (8008338 <CDC_Transmit_FS+0x48>)
 8008302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008306:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008312:	2301      	movs	r3, #1
 8008314:	e00b      	b.n	800832e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008316:	887b      	ldrh	r3, [r7, #2]
 8008318:	461a      	mov	r2, r3
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4806      	ldr	r0, [pc, #24]	; (8008338 <CDC_Transmit_FS+0x48>)
 800831e:	f7fe fb7b 	bl	8006a18 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008322:	4805      	ldr	r0, [pc, #20]	; (8008338 <CDC_Transmit_FS+0x48>)
 8008324:	f7fe fbb8 	bl	8006a98 <USBD_CDC_TransmitPacket>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	2000316c 	.word	0x2000316c

0800833c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800834e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008352:	4618      	mov	r0, r3
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
	...

08008360 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	6039      	str	r1, [r7, #0]
 800836a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2212      	movs	r2, #18
 8008370:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008372:	4b03      	ldr	r3, [pc, #12]	; (8008380 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	200000cc 	.word	0x200000cc

08008384 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2204      	movs	r2, #4
 8008394:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008396:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	200000e0 	.word	0x200000e0

080083a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	6039      	str	r1, [r7, #0]
 80083b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083b4:	79fb      	ldrb	r3, [r7, #7]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	4907      	ldr	r1, [pc, #28]	; (80083dc <USBD_FS_ProductStrDescriptor+0x34>)
 80083be:	4808      	ldr	r0, [pc, #32]	; (80083e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80083c0:	f7ff fdf8 	bl	8007fb4 <USBD_GetString>
 80083c4:	e004      	b.n	80083d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4904      	ldr	r1, [pc, #16]	; (80083dc <USBD_FS_ProductStrDescriptor+0x34>)
 80083ca:	4805      	ldr	r0, [pc, #20]	; (80083e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80083cc:	f7ff fdf2 	bl	8007fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083d0:	4b02      	ldr	r3, [pc, #8]	; (80083dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	20004448 	.word	0x20004448
 80083e0:	08008c28 	.word	0x08008c28

080083e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	6039      	str	r1, [r7, #0]
 80083ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	4904      	ldr	r1, [pc, #16]	; (8008404 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083f4:	4804      	ldr	r0, [pc, #16]	; (8008408 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083f6:	f7ff fddd 	bl	8007fb4 <USBD_GetString>
  return USBD_StrDesc;
 80083fa:	4b02      	ldr	r3, [pc, #8]	; (8008404 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	20004448 	.word	0x20004448
 8008408:	08008c40 	.word	0x08008c40

0800840c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	221a      	movs	r2, #26
 800841c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800841e:	f000 f843 	bl	80084a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008422:	4b02      	ldr	r3, [pc, #8]	; (800842c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	200000e4 	.word	0x200000e4

08008430 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	6039      	str	r1, [r7, #0]
 800843a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d105      	bne.n	800844e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4907      	ldr	r1, [pc, #28]	; (8008464 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008446:	4808      	ldr	r0, [pc, #32]	; (8008468 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008448:	f7ff fdb4 	bl	8007fb4 <USBD_GetString>
 800844c:	e004      	b.n	8008458 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800844e:	683a      	ldr	r2, [r7, #0]
 8008450:	4904      	ldr	r1, [pc, #16]	; (8008464 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008452:	4805      	ldr	r0, [pc, #20]	; (8008468 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008454:	f7ff fdae 	bl	8007fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800845a:	4618      	mov	r0, r3
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20004448 	.word	0x20004448
 8008468:	08008c54 	.word	0x08008c54

0800846c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008478:	79fb      	ldrb	r3, [r7, #7]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d105      	bne.n	800848a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	4907      	ldr	r1, [pc, #28]	; (80084a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008482:	4808      	ldr	r0, [pc, #32]	; (80084a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008484:	f7ff fd96 	bl	8007fb4 <USBD_GetString>
 8008488:	e004      	b.n	8008494 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800848a:	683a      	ldr	r2, [r7, #0]
 800848c:	4904      	ldr	r1, [pc, #16]	; (80084a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800848e:	4805      	ldr	r0, [pc, #20]	; (80084a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008490:	f7ff fd90 	bl	8007fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008494:	4b02      	ldr	r3, [pc, #8]	; (80084a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008496:	4618      	mov	r0, r3
 8008498:	3708      	adds	r7, #8
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20004448 	.word	0x20004448
 80084a4:	08008c60 	.word	0x08008c60

080084a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80084ae:	4b0f      	ldr	r3, [pc, #60]	; (80084ec <Get_SerialNum+0x44>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80084b4:	4b0e      	ldr	r3, [pc, #56]	; (80084f0 <Get_SerialNum+0x48>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80084ba:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <Get_SerialNum+0x4c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4413      	add	r3, r2
 80084c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084ce:	2208      	movs	r2, #8
 80084d0:	4909      	ldr	r1, [pc, #36]	; (80084f8 <Get_SerialNum+0x50>)
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 f814 	bl	8008500 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084d8:	2204      	movs	r2, #4
 80084da:	4908      	ldr	r1, [pc, #32]	; (80084fc <Get_SerialNum+0x54>)
 80084dc:	68b8      	ldr	r0, [r7, #8]
 80084de:	f000 f80f 	bl	8008500 <IntToUnicode>
  }
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	1fff7a10 	.word	0x1fff7a10
 80084f0:	1fff7a14 	.word	0x1fff7a14
 80084f4:	1fff7a18 	.word	0x1fff7a18
 80084f8:	200000e6 	.word	0x200000e6
 80084fc:	200000f6 	.word	0x200000f6

08008500 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008512:	2300      	movs	r3, #0
 8008514:	75fb      	strb	r3, [r7, #23]
 8008516:	e027      	b.n	8008568 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	0f1b      	lsrs	r3, r3, #28
 800851c:	2b09      	cmp	r3, #9
 800851e:	d80b      	bhi.n	8008538 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	0f1b      	lsrs	r3, r3, #28
 8008524:	b2da      	uxtb	r2, r3
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	4619      	mov	r1, r3
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	440b      	add	r3, r1
 8008530:	3230      	adds	r2, #48	; 0x30
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	701a      	strb	r2, [r3, #0]
 8008536:	e00a      	b.n	800854e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	0f1b      	lsrs	r3, r3, #28
 800853c:	b2da      	uxtb	r2, r3
 800853e:	7dfb      	ldrb	r3, [r7, #23]
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	4619      	mov	r1, r3
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	440b      	add	r3, r1
 8008548:	3237      	adds	r2, #55	; 0x37
 800854a:	b2d2      	uxtb	r2, r2
 800854c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	011b      	lsls	r3, r3, #4
 8008552:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	3301      	adds	r3, #1
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	4413      	add	r3, r2
 800855e:	2200      	movs	r2, #0
 8008560:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008562:	7dfb      	ldrb	r3, [r7, #23]
 8008564:	3301      	adds	r3, #1
 8008566:	75fb      	strb	r3, [r7, #23]
 8008568:	7dfa      	ldrb	r2, [r7, #23]
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	429a      	cmp	r2, r3
 800856e:	d3d3      	bcc.n	8008518 <IntToUnicode+0x18>
  }
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
	...

08008580 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b08a      	sub	sp, #40	; 0x28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008588:	f107 0314 	add.w	r3, r7, #20
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	605a      	str	r2, [r3, #4]
 8008592:	609a      	str	r2, [r3, #8]
 8008594:	60da      	str	r2, [r3, #12]
 8008596:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085a0:	d13a      	bne.n	8008618 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085a2:	2300      	movs	r3, #0
 80085a4:	613b      	str	r3, [r7, #16]
 80085a6:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <HAL_PCD_MspInit+0xa0>)
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	4a1d      	ldr	r2, [pc, #116]	; (8008620 <HAL_PCD_MspInit+0xa0>)
 80085ac:	f043 0301 	orr.w	r3, r3, #1
 80085b0:	6313      	str	r3, [r2, #48]	; 0x30
 80085b2:	4b1b      	ldr	r3, [pc, #108]	; (8008620 <HAL_PCD_MspInit+0xa0>)
 80085b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	613b      	str	r3, [r7, #16]
 80085bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80085be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80085c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c4:	2302      	movs	r3, #2
 80085c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085cc:	2303      	movs	r3, #3
 80085ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80085d0:	230a      	movs	r3, #10
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	4619      	mov	r1, r3
 80085da:	4812      	ldr	r0, [pc, #72]	; (8008624 <HAL_PCD_MspInit+0xa4>)
 80085dc:	f7f9 fa94 	bl	8001b08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085e0:	4b0f      	ldr	r3, [pc, #60]	; (8008620 <HAL_PCD_MspInit+0xa0>)
 80085e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e4:	4a0e      	ldr	r2, [pc, #56]	; (8008620 <HAL_PCD_MspInit+0xa0>)
 80085e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ea:	6353      	str	r3, [r2, #52]	; 0x34
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
 80085f0:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <HAL_PCD_MspInit+0xa0>)
 80085f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f4:	4a0a      	ldr	r2, [pc, #40]	; (8008620 <HAL_PCD_MspInit+0xa0>)
 80085f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085fa:	6453      	str	r3, [r2, #68]	; 0x44
 80085fc:	4b08      	ldr	r3, [pc, #32]	; (8008620 <HAL_PCD_MspInit+0xa0>)
 80085fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008608:	2200      	movs	r2, #0
 800860a:	2100      	movs	r1, #0
 800860c:	2043      	movs	r0, #67	; 0x43
 800860e:	f7f9 f9be 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008612:	2043      	movs	r0, #67	; 0x43
 8008614:	f7f9 f9d7 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008618:	bf00      	nop
 800861a:	3728      	adds	r7, #40	; 0x28
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}
 8008620:	40023800 	.word	0x40023800
 8008624:	40020000 	.word	0x40020000

08008628 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800863c:	4619      	mov	r1, r3
 800863e:	4610      	mov	r0, r2
 8008640:	f7fe fb59 	bl	8006cf6 <USBD_LL_SetupStage>
}
 8008644:	bf00      	nop
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	4613      	mov	r3, r2
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	4413      	add	r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	4619      	mov	r1, r3
 8008676:	f7fe fb93 	bl	8006da0 <USBD_LL_DataOutStage>
}
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008694:	78fa      	ldrb	r2, [r7, #3]
 8008696:	6879      	ldr	r1, [r7, #4]
 8008698:	4613      	mov	r3, r2
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	440b      	add	r3, r1
 80086a2:	334c      	adds	r3, #76	; 0x4c
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	4619      	mov	r1, r3
 80086aa:	f7fe fc2c 	bl	8006f06 <USBD_LL_DataInStage>
}
 80086ae:	bf00      	nop
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fd60 	bl	800718a <USBD_LL_SOF>
}
 80086ca:	bf00      	nop
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086da:	2301      	movs	r3, #1
 80086dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d102      	bne.n	80086ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]
 80086ea:	e008      	b.n	80086fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d102      	bne.n	80086fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80086f4:	2301      	movs	r3, #1
 80086f6:	73fb      	strb	r3, [r7, #15]
 80086f8:	e001      	b.n	80086fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80086fa:	f7f8 fa27 	bl	8000b4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008704:	7bfa      	ldrb	r2, [r7, #15]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe fd00 	bl	800710e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008714:	4618      	mov	r0, r3
 8008716:	f7fe fca8 	bl	800706a <USBD_LL_Reset>
}
 800871a:	bf00      	nop
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fcfb 	bl	800712e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	6812      	ldr	r2, [r2, #0]
 8008746:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800874a:	f043 0301 	orr.w	r3, r3, #1
 800874e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <HAL_PCD_SuspendCallback+0x48>)
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	4a03      	ldr	r2, [pc, #12]	; (800876c <HAL_PCD_SuspendCallback+0x48>)
 800875e:	f043 0306 	orr.w	r3, r3, #6
 8008762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	e000ed00 	.word	0xe000ed00

08008770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fceb 	bl	800715a <USBD_LL_Resume>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fd43 	bl	800722e <USBD_LL_IsoOUTIncomplete>
}
 80087a8:	bf00      	nop
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fcff 	bl	80071ca <USBD_LL_IsoINIncomplete>
}
 80087cc:	bf00      	nop
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fe fd55 	bl	8007292 <USBD_LL_DevConnected>
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fd52 	bl	80072a8 <USBD_LL_DevDisconnected>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d13c      	bne.n	8008896 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800881c:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <USBD_LL_Init+0x94>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a1e      	ldr	r2, [pc, #120]	; (80088a0 <USBD_LL_Init+0x94>)
 8008828:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800882c:	4b1c      	ldr	r3, [pc, #112]	; (80088a0 <USBD_LL_Init+0x94>)
 800882e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008832:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008834:	4b1a      	ldr	r3, [pc, #104]	; (80088a0 <USBD_LL_Init+0x94>)
 8008836:	2204      	movs	r2, #4
 8008838:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800883a:	4b19      	ldr	r3, [pc, #100]	; (80088a0 <USBD_LL_Init+0x94>)
 800883c:	2202      	movs	r2, #2
 800883e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008840:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <USBD_LL_Init+0x94>)
 8008842:	2200      	movs	r2, #0
 8008844:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008846:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <USBD_LL_Init+0x94>)
 8008848:	2202      	movs	r2, #2
 800884a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800884c:	4b14      	ldr	r3, [pc, #80]	; (80088a0 <USBD_LL_Init+0x94>)
 800884e:	2200      	movs	r2, #0
 8008850:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008852:	4b13      	ldr	r3, [pc, #76]	; (80088a0 <USBD_LL_Init+0x94>)
 8008854:	2200      	movs	r2, #0
 8008856:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008858:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <USBD_LL_Init+0x94>)
 800885a:	2200      	movs	r2, #0
 800885c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800885e:	4b10      	ldr	r3, [pc, #64]	; (80088a0 <USBD_LL_Init+0x94>)
 8008860:	2200      	movs	r2, #0
 8008862:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008864:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <USBD_LL_Init+0x94>)
 8008866:	2200      	movs	r2, #0
 8008868:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800886a:	480d      	ldr	r0, [pc, #52]	; (80088a0 <USBD_LL_Init+0x94>)
 800886c:	f7f9 fad0 	bl	8001e10 <HAL_PCD_Init>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008876:	f7f8 f969 	bl	8000b4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800887a:	2180      	movs	r1, #128	; 0x80
 800887c:	4808      	ldr	r0, [pc, #32]	; (80088a0 <USBD_LL_Init+0x94>)
 800887e:	f7fa fd28 	bl	80032d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008882:	2240      	movs	r2, #64	; 0x40
 8008884:	2100      	movs	r1, #0
 8008886:	4806      	ldr	r0, [pc, #24]	; (80088a0 <USBD_LL_Init+0x94>)
 8008888:	f7fa fcdc 	bl	8003244 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800888c:	2280      	movs	r2, #128	; 0x80
 800888e:	2101      	movs	r1, #1
 8008890:	4803      	ldr	r0, [pc, #12]	; (80088a0 <USBD_LL_Init+0x94>)
 8008892:	f7fa fcd7 	bl	8003244 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3708      	adds	r7, #8
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20004648 	.word	0x20004648

080088a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 fbc5 	bl	800204a <HAL_PCD_Start>
 80088c0:	4603      	mov	r3, r0
 80088c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f942 	bl	8008b50 <USBD_Get_USB_Status>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	4608      	mov	r0, r1
 80088e4:	4611      	mov	r1, r2
 80088e6:	461a      	mov	r2, r3
 80088e8:	4603      	mov	r3, r0
 80088ea:	70fb      	strb	r3, [r7, #3]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70bb      	strb	r3, [r7, #2]
 80088f0:	4613      	mov	r3, r2
 80088f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008902:	78bb      	ldrb	r3, [r7, #2]
 8008904:	883a      	ldrh	r2, [r7, #0]
 8008906:	78f9      	ldrb	r1, [r7, #3]
 8008908:	f7fa f896 	bl	8002a38 <HAL_PCD_EP_Open>
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	4618      	mov	r0, r3
 8008914:	f000 f91c 	bl	8008b50 <USBD_Get_USB_Status>
 8008918:	4603      	mov	r3, r0
 800891a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800891c:	7bbb      	ldrb	r3, [r7, #14]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	460b      	mov	r3, r1
 8008930:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008940:	78fa      	ldrb	r2, [r7, #3]
 8008942:	4611      	mov	r1, r2
 8008944:	4618      	mov	r0, r3
 8008946:	f7fa f8df 	bl	8002b08 <HAL_PCD_EP_Close>
 800894a:	4603      	mov	r3, r0
 800894c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f8fd 	bl	8008b50 <USBD_Get_USB_Status>
 8008956:	4603      	mov	r3, r0
 8008958:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800895a:	7bbb      	ldrb	r3, [r7, #14]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	4611      	mov	r1, r2
 8008982:	4618      	mov	r0, r3
 8008984:	f7fa f9b7 	bl	8002cf6 <HAL_PCD_EP_SetStall>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f8de 	bl	8008b50 <USBD_Get_USB_Status>
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fa f9fc 	bl	8002dbe <HAL_PCD_EP_ClrStall>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f8bf 	bl	8008b50 <USBD_Get_USB_Status>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	da0b      	bge.n	8008a14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089fc:	78fb      	ldrb	r3, [r7, #3]
 80089fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a02:	68f9      	ldr	r1, [r7, #12]
 8008a04:	4613      	mov	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	333e      	adds	r3, #62	; 0x3e
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	e00b      	b.n	8008a2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a14:	78fb      	ldrb	r3, [r7, #3]
 8008a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008a2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	460b      	mov	r3, r1
 8008a42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7f9 ffc9 	bl	80029ee <HAL_PCD_SetAddress>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 f874 	bl	8008b50 <USBD_Get_USB_Status>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
 8008a82:	460b      	mov	r3, r1
 8008a84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a94:	7af9      	ldrb	r1, [r7, #11]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	f7fa f8e2 	bl	8002c62 <HAL_PCD_EP_Transmit>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 f853 	bl	8008b50 <USBD_Get_USB_Status>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aae:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3718      	adds	r7, #24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	607a      	str	r2, [r7, #4]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008ad6:	7af9      	ldrb	r1, [r7, #11]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	f7fa f85e 	bl	8002b9c <HAL_PCD_EP_Receive>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f832 	bl	8008b50 <USBD_Get_USB_Status>
 8008aec:	4603      	mov	r3, r0
 8008aee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008af0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b082      	sub	sp, #8
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fa f88e 	bl	8002c32 <HAL_PCD_EP_GetRxCount>
 8008b16:	4603      	mov	r3, r0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008b28:	4b03      	ldr	r3, [pc, #12]	; (8008b38 <USBD_static_malloc+0x18>)
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	370c      	adds	r7, #12
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20004b54 	.word	0x20004b54

08008b3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]

}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b5e:	79fb      	ldrb	r3, [r7, #7]
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d817      	bhi.n	8008b94 <USBD_Get_USB_Status+0x44>
 8008b64:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <USBD_Get_USB_Status+0x1c>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008b83 	.word	0x08008b83
 8008b74:	08008b89 	.word	0x08008b89
 8008b78:	08008b8f 	.word	0x08008b8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b80:	e00b      	b.n	8008b9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b82:	2303      	movs	r3, #3
 8008b84:	73fb      	strb	r3, [r7, #15]
    break;
 8008b86:	e008      	b.n	8008b9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8c:	e005      	b.n	8008b9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	73fb      	strb	r3, [r7, #15]
    break;
 8008b92:	e002      	b.n	8008b9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b94:	2303      	movs	r3, #3
 8008b96:	73fb      	strb	r3, [r7, #15]
    break;
 8008b98:	bf00      	nop
  }
  return usb_status;
 8008b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <__libc_init_array>:
 8008ba8:	b570      	push	{r4, r5, r6, lr}
 8008baa:	4d0d      	ldr	r5, [pc, #52]	; (8008be0 <__libc_init_array+0x38>)
 8008bac:	4c0d      	ldr	r4, [pc, #52]	; (8008be4 <__libc_init_array+0x3c>)
 8008bae:	1b64      	subs	r4, r4, r5
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	2600      	movs	r6, #0
 8008bb4:	42a6      	cmp	r6, r4
 8008bb6:	d109      	bne.n	8008bcc <__libc_init_array+0x24>
 8008bb8:	4d0b      	ldr	r5, [pc, #44]	; (8008be8 <__libc_init_array+0x40>)
 8008bba:	4c0c      	ldr	r4, [pc, #48]	; (8008bec <__libc_init_array+0x44>)
 8008bbc:	f000 f820 	bl	8008c00 <_init>
 8008bc0:	1b64      	subs	r4, r4, r5
 8008bc2:	10a4      	asrs	r4, r4, #2
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	42a6      	cmp	r6, r4
 8008bc8:	d105      	bne.n	8008bd6 <__libc_init_array+0x2e>
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bd0:	4798      	blx	r3
 8008bd2:	3601      	adds	r6, #1
 8008bd4:	e7ee      	b.n	8008bb4 <__libc_init_array+0xc>
 8008bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bda:	4798      	blx	r3
 8008bdc:	3601      	adds	r6, #1
 8008bde:	e7f2      	b.n	8008bc6 <__libc_init_array+0x1e>
 8008be0:	08008c88 	.word	0x08008c88
 8008be4:	08008c88 	.word	0x08008c88
 8008be8:	08008c88 	.word	0x08008c88
 8008bec:	08008c8c 	.word	0x08008c8c

08008bf0 <memset>:
 8008bf0:	4402      	add	r2, r0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d100      	bne.n	8008bfa <memset+0xa>
 8008bf8:	4770      	bx	lr
 8008bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8008bfe:	e7f9      	b.n	8008bf4 <memset+0x4>

08008c00 <_init>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	bf00      	nop
 8008c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c06:	bc08      	pop	{r3}
 8008c08:	469e      	mov	lr, r3
 8008c0a:	4770      	bx	lr

08008c0c <_fini>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr
