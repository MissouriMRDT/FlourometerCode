
STM32F401_TCD1304CCD_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090e0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08009274  08009274  00019274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092d0  080092d0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080092d0  080092d0  000192d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d8  080092d8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092dc  080092dc  000192dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080092e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cd4  200000fc  080093dc  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004dd0  080093dc  00024dd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015182  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003415  00000000  00000000  000352ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  000386c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  00039918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e8  00000000  00000000  0003a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001692a  00000000  00000000  00054fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab05  00000000  00000000  0006b902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106407  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c78  00000000  00000000  00106458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800925c 	.word	0x0800925c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	0800925c 	.word	0x0800925c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fd42 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f838 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fb02 	bl	8000aec <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 fae0 	bl	8000aac <MX_DMA_Init>
  MX_TIM2_Init();
 80004ec:	f000 f8f0 	bl	80006d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f0:	f000 f966 	bl	80007c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004f4:	f000 f9da 	bl	80008ac <MX_TIM4_Init>
  MX_TIM5_Init();
 80004f8:	f000 fa4a 	bl	8000990 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f008 f968 	bl	80087d0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000500:	f000 f894 	bl	800062c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PA6 - fM
 8000504:	2100      	movs	r1, #0
 8000506:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0x64>)
 8000508:	f003 ff06 	bl	8004318 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 800050c:	210c      	movs	r1, #12
 800050e:	480c      	ldr	r0, [pc, #48]	; (8000540 <main+0x68>)
 8000510:	f003 ff02 	bl	8004318 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PA0 - ICG
 8000514:	2100      	movs	r1, #0
 8000516:	480b      	ldr	r0, [pc, #44]	; (8000544 <main+0x6c>)
 8000518:	f003 fefe 	bl	8004318 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COUNTER(&htim2, 66); //600ns delay
 800051c:	4b09      	ldr	r3, [pc, #36]	; (8000544 <main+0x6c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2242      	movs	r2, #66	; 0x42
 8000522:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //PA2 - SH
 8000524:	2108      	movs	r1, #8
 8000526:	4808      	ldr	r0, [pc, #32]	; (8000548 <main+0x70>)
 8000528:	f003 fef6 	bl	8004318 <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */

	  /*CDC_Transmit_FS((uint8_t *) data, strlen (data));
	  HAL_Delay (1000);*/
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCDBuffer);
 800052c:	f241 7270 	movw	r2, #6000	; 0x1770
 8000530:	4906      	ldr	r1, [pc, #24]	; (800054c <main+0x74>)
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <main+0x78>)
 8000534:	f000 fdf0 	bl	8001118 <HAL_ADC_Start_DMA>
 8000538:	e7f8      	b.n	800052c <main+0x54>
 800053a:	bf00      	nop
 800053c:	20000208 	.word	0x20000208
 8000540:	20000250 	.word	0x20000250
 8000544:	200001c0 	.word	0x200001c0
 8000548:	20000298 	.word	0x20000298
 800054c:	200002e0 	.word	0x200002e0
 8000550:	20000118 	.word	0x20000118

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f008 fe72 	bl	800924c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	; (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd4>)
 80005a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005c8:	2319      	movs	r3, #25
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f9c2 	bl	8003968 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ea:	f000 fab7 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fc24 	bl	8003e58 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000616:	f000 faa1 	bl	8000b5c <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063e:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <MX_ADC1_Init+0xa0>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000644:	4b20      	ldr	r3, [pc, #128]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800064a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <MX_ADC1_Init+0x9c>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_ADC1_Init+0x9c>)
 800065a:	2200      	movs	r2, #0
 800065c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000670:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_ADC1_Init+0x9c>)
 800067e:	2201      	movs	r2, #1
 8000680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC1_Init+0x9c>)
 800068c:	2201      	movs	r2, #1
 800068e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000692:	f000 fcfd 	bl	8001090 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800069c:	f000 fa5e 	bl	8000b5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_ADC1_Init+0x9c>)
 80006b2:	f000 fe35 	bl	8001320 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006bc:	f000 fa4e 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000118 	.word	0x20000118
 80006cc:	40012000 	.word	0x40012000

080006d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	; 0x38
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
 80006fc:	615a      	str	r2, [r3, #20]
 80006fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_TIM2_Init+0xe8>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 630000-1;
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000716:	4a29      	ldr	r2, [pc, #164]	; (80007bc <MX_TIM2_Init+0xec>)
 8000718:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <MX_TIM2_Init+0xe8>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000726:	4824      	ldr	r0, [pc, #144]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000728:	f003 fd4e 	bl	80041c8 <HAL_TIM_Base_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000732:	f000 fa13 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800073c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000740:	4619      	mov	r1, r3
 8000742:	481d      	ldr	r0, [pc, #116]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000744:	f003 ff5a 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800074e:	f000 fa05 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000752:	4819      	ldr	r0, [pc, #100]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000754:	f003 fd87 	bl	8004266 <HAL_TIM_PWM_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800075e:	f000 f9fd 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000762:	2310      	movs	r3, #16
 8000764:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4619      	mov	r1, r3
 8000770:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_TIM2_Init+0xe8>)
 8000772:	f004 fba9 	bl	8004ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800077c:	f000 f9ee 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000780:	2360      	movs	r3, #96	; 0x60
 8000782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 840-1;
 8000784:	f240 3347 	movw	r3, #839	; 0x347
 8000788:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	2200      	movs	r2, #0
 8000796:	4619      	mov	r1, r3
 8000798:	4807      	ldr	r0, [pc, #28]	; (80007b8 <MX_TIM2_Init+0xe8>)
 800079a:	f003 fe6d 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007a4:	f000 f9da 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <MX_TIM2_Init+0xe8>)
 80007aa:	f000 fadd 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 80007ae:	bf00      	nop
 80007b0:	3738      	adds	r7, #56	; 0x38
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200001c0 	.word	0x200001c0
 80007bc:	00099cef 	.word	0x00099cef

080007c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
 80007ec:	615a      	str	r2, [r3, #20]
 80007ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_TIM3_Init+0xe4>)
 80007f2:	4a2d      	ldr	r2, [pc, #180]	; (80008a8 <MX_TIM3_Init+0xe8>)
 80007f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <MX_TIM3_Init+0xe4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fc:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_TIM3_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42-1;
 8000802:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000804:	2229      	movs	r2, #41	; 0x29
 8000806:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_TIM3_Init+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080e:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000814:	4823      	ldr	r0, [pc, #140]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000816:	f003 fcd7 	bl	80041c8 <HAL_TIM_Base_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000820:	f000 f99c 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	4619      	mov	r1, r3
 8000830:	481c      	ldr	r0, [pc, #112]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000832:	f003 fee3 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800083c:	f000 f98e 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000840:	4818      	ldr	r0, [pc, #96]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000842:	f003 fd10 	bl	8004266 <HAL_TIM_PWM_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800084c:	f000 f986 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4619      	mov	r1, r3
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000860:	f004 fb32 	bl	8004ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800086a:	f000 f977 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086e:	2360      	movs	r3, #96	; 0x60
 8000870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21-1;
 8000872:	2314      	movs	r3, #20
 8000874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	4807      	ldr	r0, [pc, #28]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000886:	f003 fdf7 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000890:	f000 f964 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <MX_TIM3_Init+0xe4>)
 8000896:	f000 fa67 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 800089a:	bf00      	nop
 800089c:	3738      	adds	r7, #56	; 0x38
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000208 	.word	0x20000208
 80008a8:	40000400 	.word	0x40000400

080008ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	; 0x38
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	f107 0320 	add.w	r3, r7, #32
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008dc:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_TIM4_Init+0xdc>)
 80008de:	4a2b      	ldr	r2, [pc, #172]	; (800098c <MX_TIM4_Init+0xe0>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008e2:	4b29      	ldr	r3, [pc, #164]	; (8000988 <MX_TIM4_Init+0xdc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b27      	ldr	r3, [pc, #156]	; (8000988 <MX_TIM4_Init+0xdc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_TIM4_Init+0xdc>)
 80008f0:	22a7      	movs	r2, #167	; 0xa7
 80008f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <MX_TIM4_Init+0xdc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b23      	ldr	r3, [pc, #140]	; (8000988 <MX_TIM4_Init+0xdc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_TIM4_Init+0xdc>)
 8000902:	f003 fc61 	bl	80041c8 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800090c:	f000 f926 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800091a:	4619      	mov	r1, r3
 800091c:	481a      	ldr	r0, [pc, #104]	; (8000988 <MX_TIM4_Init+0xdc>)
 800091e:	f003 fe6d 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000928:	f000 f918 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800092c:	4816      	ldr	r0, [pc, #88]	; (8000988 <MX_TIM4_Init+0xdc>)
 800092e:	f003 fc9a 	bl	8004266 <HAL_TIM_PWM_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000938:	f000 f910 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4619      	mov	r1, r3
 800094a:	480f      	ldr	r0, [pc, #60]	; (8000988 <MX_TIM4_Init+0xdc>)
 800094c:	f004 fabc 	bl	8004ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000956:	f000 f901 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 800095e:	2329      	movs	r3, #41	; 0x29
 8000960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	220c      	movs	r2, #12
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_TIM4_Init+0xdc>)
 8000972:	f003 fd81 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800097c:	f000 f8ee 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	3738      	adds	r7, #56	; 0x38
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000250 	.word	0x20000250
 800098c:	40000800 	.word	0x40000800

08000990 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b092      	sub	sp, #72	; 0x48
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	463b      	mov	r3, r7
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009d0:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <MX_TIM5_Init+0x114>)
 80009d2:	4a35      	ldr	r2, [pc, #212]	; (8000aa8 <MX_TIM5_Init+0x118>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009d6:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <MX_TIM5_Init+0x114>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <MX_TIM5_Init+0x114>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1680-1;
 80009e2:	4b30      	ldr	r3, [pc, #192]	; (8000aa4 <MX_TIM5_Init+0x114>)
 80009e4:	f240 628f 	movw	r2, #1679	; 0x68f
 80009e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <MX_TIM5_Init+0x114>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <MX_TIM5_Init+0x114>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009f6:	482b      	ldr	r0, [pc, #172]	; (8000aa4 <MX_TIM5_Init+0x114>)
 80009f8:	f003 fbe6 	bl	80041c8 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000a02:	f000 f8ab 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a10:	4619      	mov	r1, r3
 8000a12:	4824      	ldr	r0, [pc, #144]	; (8000aa4 <MX_TIM5_Init+0x114>)
 8000a14:	f003 fdf2 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000a1e:	f000 f89d 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a22:	4820      	ldr	r0, [pc, #128]	; (8000aa4 <MX_TIM5_Init+0x114>)
 8000a24:	f003 fc1f 	bl	8004266 <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8000a2e:	f000 f895 	bl	8000b5c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a32:	2306      	movs	r3, #6
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4818      	ldr	r0, [pc, #96]	; (8000aa4 <MX_TIM5_Init+0x114>)
 8000a42:	f003 fea2 	bl	800478a <HAL_TIM_SlaveConfigSynchro>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8000a4c:	f000 f886 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_TIM5_Init+0x114>)
 8000a60:	f004 fa32 	bl	8004ec8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000a6a:	f000 f877 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6e:	2360      	movs	r3, #96	; 0x60
 8000a70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 336-1;
 8000a72:	f240 134f 	movw	r3, #335	; 0x14f
 8000a76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	2208      	movs	r2, #8
 8000a84:	4619      	mov	r1, r3
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <MX_TIM5_Init+0x114>)
 8000a88:	f003 fcf6 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM5_Init+0x106>
  {
    Error_Handler();
 8000a92:	f000 f863 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a96:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MX_TIM5_Init+0x114>)
 8000a98:	f000 f966 	bl	8000d68 <HAL_TIM_MspPostInit>

}
 8000a9c:	bf00      	nop
 8000a9e:	3748      	adds	r7, #72	; 0x48
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000298 	.word	0x20000298
 8000aa8:	40000c00 	.word	0x40000c00

08000aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_DMA_Init+0x3c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <MX_DMA_Init+0x3c>)
 8000abc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_DMA_Init+0x3c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2038      	movs	r0, #56	; 0x38
 8000ad4:	f000 ff9f 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ad8:	2038      	movs	r0, #56	; 0x38
 8000ada:	f000 ffb8 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <MX_GPIO_Init+0x4c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <MX_GPIO_Init+0x4c>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <MX_GPIO_Init+0x4c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_GPIO_Init+0x4c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <MX_GPIO_Init+0x4c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <MX_GPIO_Init+0x4c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	 CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCDBuffer);
 8000b44:	f241 7170 	movw	r1, #6000	; 0x1770
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b4a:	f007 feff 	bl	800894c <CDC_Transmit_FS>

 }
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200002e0 	.word	0x200002e0

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <HAL_ADC_MspInit+0xd8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d156      	bne.n	8000c88 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b2d      	ldr	r3, [pc, #180]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a2c      	ldr	r2, [pc, #176]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a25      	ldr	r2, [pc, #148]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b23      	ldr	r3, [pc, #140]	; (8000c94 <HAL_ADC_MspInit+0xdc>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c12:	2308      	movs	r3, #8
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	481c      	ldr	r0, [pc, #112]	; (8000c98 <HAL_ADC_MspInit+0xe0>)
 8000c26:	f001 fa9d 	bl	8002164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <HAL_ADC_MspInit+0xe8>)
 8000c2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c42:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c60:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c6e:	f000 ff09 	bl	8001a84 <HAL_DMA_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000c78:	f7ff ff70 	bl	8000b5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c80:	639a      	str	r2, [r3, #56]	; 0x38
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_ADC_MspInit+0xe4>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40012000 	.word	0x40012000
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	20000160 	.word	0x20000160
 8000ca0:	40026410 	.word	0x40026410

08000ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a26      	ldr	r2, [pc, #152]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000cd2:	e03a      	b.n	8000d4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <HAL_TIM_Base_MspInit+0xb8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d10e      	bne.n	8000cfc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b1a      	ldr	r3, [pc, #104]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
}
 8000cfa:	e026      	b.n	8000d4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a17      	ldr	r2, [pc, #92]	; (8000d60 <HAL_TIM_Base_MspInit+0xbc>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10e      	bne.n	8000d24 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
}
 8000d22:	e012      	b.n	8000d4a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <HAL_TIM_Base_MspInit+0xc0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d10d      	bne.n	8000d4a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_TIM_Base_MspInit+0xb4>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
}
 8000d4a:	bf00      	nop
 8000d4c:	371c      	adds	r7, #28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40000400 	.word	0x40000400
 8000d60:	40000800 	.word	0x40000800
 8000d64:	40000c00 	.word	0x40000c00

08000d68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d88:	d11e      	bne.n	8000dc8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a33      	ldr	r2, [pc, #204]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da6:	2301      	movs	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000db6:	2301      	movs	r3, #1
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4828      	ldr	r0, [pc, #160]	; (8000e64 <HAL_TIM_MspPostInit+0xfc>)
 8000dc2:	f001 f9cf 	bl	8002164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000dc6:	e046      	b.n	8000e56 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <HAL_TIM_MspPostInit+0x100>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d11e      	bne.n	8000e10 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dee:	2340      	movs	r3, #64	; 0x40
 8000df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4816      	ldr	r0, [pc, #88]	; (8000e64 <HAL_TIM_MspPostInit+0xfc>)
 8000e0a:	f001 f9ab 	bl	8002164 <HAL_GPIO_Init>
}
 8000e0e:	e022      	b.n	8000e56 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a15      	ldr	r2, [pc, #84]	; (8000e6c <HAL_TIM_MspPostInit+0x104>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d11d      	bne.n	8000e56 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <HAL_TIM_MspPostInit+0xf8>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e36:	2304      	movs	r3, #4
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e46:	2302      	movs	r3, #2
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4804      	ldr	r0, [pc, #16]	; (8000e64 <HAL_TIM_MspPostInit+0xfc>)
 8000e52:	f001 f987 	bl	8002164 <HAL_GPIO_Init>
}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	40000c00 	.word	0x40000c00

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f8a4 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <DMA2_Stream0_IRQHandler+0x10>)
 8000eca:	f000 fee1 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000160 	.word	0x20000160

08000ed8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <OTG_FS_IRQHandler+0x10>)
 8000ede:	f001 fc15 	bl	800270c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200046a4 	.word	0x200046a4

08000eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <SystemInit+0x20>)
 8000ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <SystemInit+0x20>)
 8000ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f14:	480d      	ldr	r0, [pc, #52]	; (8000f4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f16:	490e      	ldr	r1, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f18:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f2c:	4c0b      	ldr	r4, [pc, #44]	; (8000f5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f3a:	f7ff ffd7 	bl	8000eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f008 f961 	bl	8009204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fac9 	bl	80004d8 <main>
  bx  lr    
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000f54:	080092e0 	.word	0x080092e0
  ldr r2, =_sbss
 8000f58:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000f5c:	20004dd0 	.word	0x20004dd0

08000f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	; (8000fa4 <HAL_Init+0x40>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_Init+0x40>)
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_Init+0x40>)
 8000f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 fd37 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	200f      	movs	r0, #15
 8000f94:	f000 f808 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fde6 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fd4f 	bl	8001a6a <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 fd17 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	; (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	200031c0 	.word	0x200031c0

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	200031c0 	.word	0x200031c0

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008

08001090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e033      	b.n	800110e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d109      	bne.n	80010c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fd82 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d118      	bne.n	8001100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d6:	f023 0302 	bic.w	r3, r3, #2
 80010da:	f043 0202 	orr.w	r2, r3, #2
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fa3e 	bl	8001564 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f023 0303 	bic.w	r3, r3, #3
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
 80010fe:	e001      	b.n	8001104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112e:	2b01      	cmp	r3, #1
 8001130:	d101      	bne.n	8001136 <HAL_ADC_Start_DMA+0x1e>
 8001132:	2302      	movs	r3, #2
 8001134:	e0ce      	b.n	80012d4 <HAL_ADC_Start_DMA+0x1bc>
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d018      	beq.n	800117e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0201 	orr.w	r2, r2, #1
 800115a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800115c:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <HAL_ADC_Start_DMA+0x1c4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a5f      	ldr	r2, [pc, #380]	; (80012e0 <HAL_ADC_Start_DMA+0x1c8>)
 8001162:	fba2 2303 	umull	r2, r3, r2, r3
 8001166:	0c9a      	lsrs	r2, r3, #18
 8001168:	4613      	mov	r3, r2
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4413      	add	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001170:	e002      	b.n	8001178 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3b01      	subs	r3, #1
 8001176:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800118c:	d107      	bne.n	800119e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800119c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 8086 	bne.w	80012ba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ec:	d106      	bne.n	80011fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f023 0206 	bic.w	r2, r3, #6
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44
 80011fa:	e002      	b.n	8001202 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800120a:	4b36      	ldr	r3, [pc, #216]	; (80012e4 <HAL_ADC_Start_DMA+0x1cc>)
 800120c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	4a35      	ldr	r2, [pc, #212]	; (80012e8 <HAL_ADC_Start_DMA+0x1d0>)
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	4a34      	ldr	r2, [pc, #208]	; (80012ec <HAL_ADC_Start_DMA+0x1d4>)
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <HAL_ADC_Start_DMA+0x1d8>)
 8001224:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800122e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800123e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800124e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	334c      	adds	r3, #76	; 0x4c
 800125a:	4619      	mov	r1, r3
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f000 fcbe 	bl	8001be0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10f      	bne.n	8001290 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d129      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	e020      	b.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_ADC_Start_DMA+0x1dc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d11b      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d114      	bne.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e00b      	b.n	80012d2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f043 0210 	orr.w	r2, r3, #16
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f043 0201 	orr.w	r2, r3, #1
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	40012300 	.word	0x40012300
 80012e8:	0800175d 	.word	0x0800175d
 80012ec:	08001817 	.word	0x08001817
 80012f0:	08001833 	.word	0x08001833
 80012f4:	40012000 	.word	0x40012000

080012f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_ADC_ConfigChannel+0x1c>
 8001338:	2302      	movs	r3, #2
 800133a:	e105      	b.n	8001548 <HAL_ADC_ConfigChannel+0x228>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b09      	cmp	r3, #9
 800134a:	d925      	bls.n	8001398 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68d9      	ldr	r1, [r3, #12]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	3b1e      	subs	r3, #30
 8001362:	2207      	movs	r2, #7
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43da      	mvns	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	400a      	ands	r2, r1
 8001370:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	68d9      	ldr	r1, [r3, #12]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	4603      	mov	r3, r0
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4403      	add	r3, r0
 800138a:	3b1e      	subs	r3, #30
 800138c:	409a      	lsls	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	e022      	b.n	80013de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6919      	ldr	r1, [r3, #16]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	2207      	movs	r2, #7
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	400a      	ands	r2, r1
 80013ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6919      	ldr	r1, [r3, #16]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4618      	mov	r0, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4403      	add	r3, r0
 80013d4:	409a      	lsls	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d824      	bhi.n	8001430 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b05      	subs	r3, #5
 80013f8:	221f      	movs	r2, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	400a      	ands	r2, r1
 8001406:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b05      	subs	r3, #5
 8001422:	fa00 f203 	lsl.w	r2, r0, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
 800142e:	e04c      	b.n	80014ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d824      	bhi.n	8001482 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3b23      	subs	r3, #35	; 0x23
 800144a:	221f      	movs	r2, #31
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43da      	mvns	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	400a      	ands	r2, r1
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	3b23      	subs	r3, #35	; 0x23
 8001474:	fa00 f203 	lsl.w	r2, r0, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	631a      	str	r2, [r3, #48]	; 0x30
 8001480:	e023      	b.n	80014ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	3b41      	subs	r3, #65	; 0x41
 8001494:	221f      	movs	r2, #31
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	400a      	ands	r2, r1
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	3b41      	subs	r3, #65	; 0x41
 80014be:	fa00 f203 	lsl.w	r2, r0, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ca:	4b22      	ldr	r3, [pc, #136]	; (8001554 <HAL_ADC_ConfigChannel+0x234>)
 80014cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <HAL_ADC_ConfigChannel+0x238>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d109      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1cc>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b12      	cmp	r3, #18
 80014de:	d105      	bne.n	80014ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	; (8001558 <HAL_ADC_ConfigChannel+0x238>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d123      	bne.n	800153e <HAL_ADC_ConfigChannel+0x21e>
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d003      	beq.n	8001506 <HAL_ADC_ConfigChannel+0x1e6>
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b11      	cmp	r3, #17
 8001504:	d11b      	bne.n	800153e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b10      	cmp	r3, #16
 8001518:	d111      	bne.n	800153e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_ADC_ConfigChannel+0x23c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <HAL_ADC_ConfigChannel+0x240>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0c9a      	lsrs	r2, r3, #18
 8001526:	4613      	mov	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001530:	e002      	b.n	8001538 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3b01      	subs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f9      	bne.n	8001532 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40012300 	.word	0x40012300
 8001558:	40012000 	.word	0x40012000
 800155c:	20000000 	.word	0x20000000
 8001560:	431bde83 	.word	0x431bde83

08001564 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800156c:	4b79      	ldr	r3, [pc, #484]	; (8001754 <ADC_Init+0x1f0>)
 800156e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	431a      	orrs	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001598:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	021a      	lsls	r2, r3, #8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6899      	ldr	r1, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <ADC_Init+0x1f4>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d022      	beq.n	8001642 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800160a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6899      	ldr	r1, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800162c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6899      	ldr	r1, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	e00f      	b.n	8001662 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001650:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001660:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0202 	bic.w	r2, r2, #2
 8001670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e1b      	ldrb	r3, [r3, #24]
 800167c:	005a      	lsls	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01b      	beq.n	80016c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800169e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6859      	ldr	r1, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	3b01      	subs	r3, #1
 80016bc:	035a      	lsls	r2, r3, #13
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	e007      	b.n	80016d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	051a      	lsls	r2, r3, #20
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800170c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6899      	ldr	r1, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800171a:	025a      	lsls	r2, r3, #9
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001732:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6899      	ldr	r1, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	029a      	lsls	r2, r3, #10
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	609a      	str	r2, [r3, #8]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40012300 	.word	0x40012300
 8001758:	0f000001 	.word	0x0f000001

0800175c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001772:	2b00      	cmp	r3, #0
 8001774:	d13c      	bne.n	80017f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d12b      	bne.n	80017e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001794:	2b00      	cmp	r3, #0
 8001796:	d127      	bne.n	80017e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d119      	bne.n	80017e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0220 	bic.w	r2, r2, #32
 80017c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f043 0201 	orr.w	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f7ff f9a7 	bl	8000b3c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017ee:	e00e      	b.n	800180e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f7ff fd85 	bl	800130c <HAL_ADC_ErrorCallback>
}
 8001802:	e004      	b.n	800180e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f7ff fd67 	bl	80012f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f043 0204 	orr.w	r2, r3, #4
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f7ff fd5a 	bl	800130c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff face 	bl	8001030 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e099      	b.n	8001bd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ac0:	e00f      	b.n	8001ae2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ac2:	f7ff fab5 	bl	8001030 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d908      	bls.n	8001ae2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2203      	movs	r2, #3
 8001ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e078      	b.n	8001bd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1e8      	bne.n	8001ac2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_DMA_Init+0x158>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d107      	bne.n	8001b4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4313      	orrs	r3, r2
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f023 0307 	bic.w	r3, r3, #7
 8001b62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	d117      	bne.n	8001ba6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00e      	beq.n	8001ba6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 fa6f 	bl	800206c <DMA_CheckFifoParam>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2240      	movs	r2, #64	; 0x40
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e016      	b.n	8001bd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fa26 	bl	8002000 <DMA_CalcBaseAndBitshift>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	223f      	movs	r2, #63	; 0x3f
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	f010803f 	.word	0xf010803f

08001be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_DMA_Start_IT+0x26>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e040      	b.n	8001c88 <HAL_DMA_Start_IT+0xa8>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d12f      	bne.n	8001c7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f000 f9b8 	bl	8001fa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c38:	223f      	movs	r2, #63	; 0x3f
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0216 	orr.w	r2, r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0208 	orr.w	r2, r2, #8
 8001c66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	e005      	b.n	8001c86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
 8001c84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c9c:	4b8e      	ldr	r3, [pc, #568]	; (8001ed8 <HAL_DMA_IRQHandler+0x248>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a8e      	ldr	r2, [pc, #568]	; (8001edc <HAL_DMA_IRQHandler+0x24c>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0a9b      	lsrs	r3, r3, #10
 8001ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	2208      	movs	r2, #8
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01a      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0204 	bic.w	r2, r2, #4
 8001ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	2208      	movs	r2, #8
 8001cea:	409a      	lsls	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	2201      	movs	r2, #1
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d012      	beq.n	8001d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1e:	2201      	movs	r2, #1
 8001d20:	409a      	lsls	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	2204      	movs	r2, #4
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d012      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00b      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2204      	movs	r2, #4
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0204 	orr.w	r2, r3, #4
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d043      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d03c      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d018      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d024      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
 8001dbe:	e01f      	b.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01b      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
 8001dd0:	e016      	b.n	8001e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0208 	bic.w	r2, r2, #8
 8001dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2220      	movs	r2, #32
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 808f 	beq.w	8001f30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8087 	beq.w	8001f30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2220      	movs	r2, #32
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d136      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0216 	bic.w	r2, r2, #22
 8001e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <HAL_DMA_IRQHandler+0x1da>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0208 	bic.w	r2, r2, #8
 8001e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	223f      	movs	r2, #63	; 0x3f
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d07e      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
        }
        return;
 8001ea6:	e079      	b.n	8001f9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01d      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d031      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e02c      	b.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d023      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e01e      	b.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10f      	bne.n	8001f20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0210 	bic.w	r2, r2, #16
 8001f0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d032      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2205      	movs	r2, #5
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d307      	bcc.n	8001f78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f2      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x2cc>
 8001f76:	e000      	b.n	8001f7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f9c:	bf00      	nop
    }
  }
}
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b40      	cmp	r3, #64	; 0x40
 8001fd0:	d108      	bne.n	8001fe4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fe2:	e007      	b.n	8001ff4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	60da      	str	r2, [r3, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3b10      	subs	r3, #16
 8002010:	4a14      	ldr	r2, [pc, #80]	; (8002064 <DMA_CalcBaseAndBitshift+0x64>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <DMA_CalcBaseAndBitshift+0x68>)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d909      	bls.n	8002042 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	1d1a      	adds	r2, r3, #4
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	659a      	str	r2, [r3, #88]	; 0x58
 8002040:	e007      	b.n	8002052 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	aaaaaaab 	.word	0xaaaaaaab
 8002068:	080092c8 	.word	0x080092c8

0800206c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d11f      	bne.n	80020c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b03      	cmp	r3, #3
 800208a:	d856      	bhi.n	800213a <DMA_CheckFifoParam+0xce>
 800208c:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <DMA_CheckFifoParam+0x28>)
 800208e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002092:	bf00      	nop
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020b7 	.word	0x080020b7
 800209c:	080020a5 	.word	0x080020a5
 80020a0:	0800213b 	.word	0x0800213b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d046      	beq.n	800213e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b4:	e043      	b.n	800213e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020be:	d140      	bne.n	8002142 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c4:	e03d      	b.n	8002142 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ce:	d121      	bne.n	8002114 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d837      	bhi.n	8002146 <DMA_CheckFifoParam+0xda>
 80020d6:	a201      	add	r2, pc, #4	; (adr r2, 80020dc <DMA_CheckFifoParam+0x70>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	080020ed 	.word	0x080020ed
 80020e0:	080020f3 	.word	0x080020f3
 80020e4:	080020ed 	.word	0x080020ed
 80020e8:	08002105 	.word	0x08002105
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	73fb      	strb	r3, [r7, #15]
      break;
 80020f0:	e030      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d025      	beq.n	800214a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002102:	e022      	b.n	800214a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002108:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800210c:	d11f      	bne.n	800214e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002112:	e01c      	b.n	800214e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d903      	bls.n	8002122 <DMA_CheckFifoParam+0xb6>
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b03      	cmp	r3, #3
 800211e:	d003      	beq.n	8002128 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002120:	e018      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      break;
 8002126:	e015      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00e      	beq.n	8002152 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	73fb      	strb	r3, [r7, #15]
      break;
 8002138:	e00b      	b.n	8002152 <DMA_CheckFifoParam+0xe6>
      break;
 800213a:	bf00      	nop
 800213c:	e00a      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
 8002140:	e008      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002142:	bf00      	nop
 8002144:	e006      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002146:	bf00      	nop
 8002148:	e004      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 800214a:	bf00      	nop
 800214c:	e002      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;   
 800214e:	bf00      	nop
 8002150:	e000      	b.n	8002154 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
    }
  } 
  
  return status; 
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e159      	b.n	8002434 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002180:	2201      	movs	r2, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	429a      	cmp	r2, r3
 800219a:	f040 8148 	bne.w	800242e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b03      	cmp	r3, #3
 8002222:	d017      	beq.n	8002254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d123      	bne.n	80022a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	220f      	movs	r2, #15
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	08da      	lsrs	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3208      	adds	r2, #8
 80022a2:	69b9      	ldr	r1, [r7, #24]
 80022a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0203 	and.w	r2, r3, #3
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a2 	beq.w	800242e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_GPIO_Init+0x2e8>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	4a56      	ldr	r2, [pc, #344]	; (800244c <HAL_GPIO_Init+0x2e8>)
 80022f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f8:	6453      	str	r3, [r2, #68]	; 0x44
 80022fa:	4b54      	ldr	r3, [pc, #336]	; (800244c <HAL_GPIO_Init+0x2e8>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a52      	ldr	r2, [pc, #328]	; (8002450 <HAL_GPIO_Init+0x2ec>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a49      	ldr	r2, [pc, #292]	; (8002454 <HAL_GPIO_Init+0x2f0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d019      	beq.n	8002366 <HAL_GPIO_Init+0x202>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_GPIO_Init+0x2f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_GPIO_Init+0x1fe>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_GPIO_Init+0x2f8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00d      	beq.n	800235e <HAL_GPIO_Init+0x1fa>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a46      	ldr	r2, [pc, #280]	; (8002460 <HAL_GPIO_Init+0x2fc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <HAL_GPIO_Init+0x1f6>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a45      	ldr	r2, [pc, #276]	; (8002464 <HAL_GPIO_Init+0x300>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <HAL_GPIO_Init+0x1f2>
 8002352:	2304      	movs	r3, #4
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002356:	2307      	movs	r3, #7
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x204>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x204>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x204>
 8002366:	2300      	movs	r3, #0
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f002 0203 	and.w	r2, r2, #3
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002378:	4935      	ldr	r1, [pc, #212]	; (8002450 <HAL_GPIO_Init+0x2ec>)
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_GPIO_Init+0x304>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023aa:	4a2f      	ldr	r2, [pc, #188]	; (8002468 <HAL_GPIO_Init+0x304>)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_GPIO_Init+0x304>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <HAL_GPIO_Init+0x304>)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <HAL_GPIO_Init+0x304>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fe:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_GPIO_Init+0x304>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002404:	4b18      	ldr	r3, [pc, #96]	; (8002468 <HAL_GPIO_Init+0x304>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002428:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_GPIO_Init+0x304>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3301      	adds	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	2b0f      	cmp	r3, #15
 8002438:	f67f aea2 	bls.w	8002180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	40013800 	.word	0x40013800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020400 	.word	0x40020400
 800245c:	40020800 	.word	0x40020800
 8002460:	40020c00 	.word	0x40020c00
 8002464:	40021000 	.word	0x40021000
 8002468:	40013c00 	.word	0x40013c00

0800246c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800246c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800246e:	b08f      	sub	sp, #60	; 0x3c
 8002470:	af0a      	add	r7, sp, #40	; 0x28
 8002472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e10f      	b.n	800269e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f006 fb9f 	bl	8008bdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2203      	movs	r2, #3
 80024a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 fe86 	bl	80051ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	687e      	ldr	r6, [r7, #4]
 80024ca:	466d      	mov	r5, sp
 80024cc:	f106 0410 	add.w	r4, r6, #16
 80024d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80024e0:	1d33      	adds	r3, r6, #4
 80024e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e4:	6838      	ldr	r0, [r7, #0]
 80024e6:	f002 fd5d 	bl	8004fa4 <USB_CoreInit>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0d0      	b.n	800269e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fe74 	bl	80051f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e04a      	b.n	80025a4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	333d      	adds	r3, #61	; 0x3d
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	333c      	adds	r3, #60	; 0x3c
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	b298      	uxth	r0, r3
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3344      	adds	r3, #68	; 0x44
 800254a:	4602      	mov	r2, r0
 800254c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800254e:	7bfa      	ldrb	r2, [r7, #15]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	3340      	adds	r3, #64	; 0x40
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	3348      	adds	r3, #72	; 0x48
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	334c      	adds	r3, #76	; 0x4c
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	3354      	adds	r3, #84	; 0x54
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d3af      	bcc.n	800250e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
 80025b2:	e044      	b.n	800263e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b4:	7bfa      	ldrb	r2, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4413      	add	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4413      	add	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3301      	adds	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	7bfa      	ldrb	r2, [r7, #15]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d3b5      	bcc.n	80025b4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	687e      	ldr	r6, [r7, #4]
 8002650:	466d      	mov	r5, sp
 8002652:	f106 0410 	add.w	r4, r6, #16
 8002656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002662:	e885 0003 	stmia.w	r5, {r0, r1}
 8002666:	1d33      	adds	r3, r6, #4
 8002668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266a:	6838      	ldr	r0, [r7, #0]
 800266c:	f002 fe0c 	bl	8005288 <USB_DevInit>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00d      	b.n	800269e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 ff5b 	bl	8006552 <USB_DevDisconnect>

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_PCD_Start+0x1c>
 80026be:	2302      	movs	r3, #2
 80026c0:	e020      	b.n	8002704 <HAL_PCD_Start+0x5e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d109      	bne.n	80026e6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f002 fd5e 	bl	80051ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 ff0b 	bl	8006510 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b08d      	sub	sp, #52	; 0x34
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 ffc9 	bl	80066ba <USB_GetMode>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 848a 	bne.w	8003044 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f003 ff2d 	bl	8006594 <USB_ReadInterrupts>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8480 	beq.w	8003042 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 ff1a 	bl	8006594 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b02      	cmp	r3, #2
 8002768:	d107      	bne.n	800277a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f002 0202 	and.w	r2, r2, #2
 8002778:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f003 ff08 	bl	8006594 <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 0310 	and.w	r3, r3, #16
 800278a:	2b10      	cmp	r3, #16
 800278c:	d161      	bne.n	8002852 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699a      	ldr	r2, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0210 	bic.w	r2, r2, #16
 800279c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f003 020f 	and.w	r2, r3, #15
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	0c5b      	lsrs	r3, r3, #17
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d124      	bne.n	8002814 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d035      	beq.n	8002842 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6a38      	ldr	r0, [r7, #32]
 80027ea:	f003 fd3f 	bl	800626c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027fa:	441a      	add	r2, r3
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	091b      	lsrs	r3, r3, #4
 8002808:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800280c:	441a      	add	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	621a      	str	r2, [r3, #32]
 8002812:	e016      	b.n	8002842 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	0c5b      	lsrs	r3, r3, #17
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	2b06      	cmp	r3, #6
 800281e:	d110      	bne.n	8002842 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002826:	2208      	movs	r2, #8
 8002828:	4619      	mov	r1, r3
 800282a:	6a38      	ldr	r0, [r7, #32]
 800282c:	f003 fd1e 	bl	800626c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800283c:	441a      	add	r2, r3
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0210 	orr.w	r2, r2, #16
 8002850:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fe9c 	bl	8006594 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002862:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002866:	f040 80a7 	bne.w	80029b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f003 fea1 	bl	80065ba <USB_ReadDevAllOutEpInterrupt>
 8002878:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800287a:	e099      	b.n	80029b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 808e 	beq.w	80029a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f003 fec5 	bl	8006622 <USB_ReadDevOutEPInterrupt>
 8002898:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00c      	beq.n	80028be <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b0:	461a      	mov	r2, r3
 80028b2:	2301      	movs	r3, #1
 80028b4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fec3 	bl	8003644 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d4:	461a      	mov	r2, r3
 80028d6:	2308      	movs	r3, #8
 80028d8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 ff99 	bl	8003814 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f8:	461a      	mov	r2, r3
 80028fa:	2310      	movs	r3, #16
 80028fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d030      	beq.n	800296a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d109      	bne.n	8002928 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002926:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	78db      	ldrb	r3, [r3, #3]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d108      	bne.n	8002958 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2200      	movs	r2, #0
 800294a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	b2db      	uxtb	r3, r3
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f006 fa48 	bl	8008de8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002964:	461a      	mov	r2, r3
 8002966:	2302      	movs	r3, #2
 8002968:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002980:	461a      	mov	r2, r3
 8002982:	2320      	movs	r3, #32
 8002984:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d009      	beq.n	80029a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299c:	461a      	mov	r2, r3
 800299e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	3301      	adds	r3, #1
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	085b      	lsrs	r3, r3, #1
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f47f af62 	bne.w	800287c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f003 fde9 	bl	8006594 <USB_ReadInterrupts>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029cc:	f040 80db 	bne.w	8002b86 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f003 fe0a 	bl	80065ee <USB_ReadDevAllInEpInterrupt>
 80029da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029e0:	e0cd      	b.n	8002b7e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80c2 	beq.w	8002b72 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fe30 	bl	800665e <USB_ReadDevInEPInterrupt>
 80029fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d057      	beq.n	8002aba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	2201      	movs	r2, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69f9      	ldr	r1, [r7, #28]
 8002a26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d132      	bne.n	8002aae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	334c      	adds	r3, #76	; 0x4c
 8002a58:	6819      	ldr	r1, [r3, #0]
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4403      	add	r3, r0
 8002a68:	3348      	adds	r3, #72	; 0x48
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4419      	add	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4403      	add	r3, r0
 8002a7c:	334c      	adds	r3, #76	; 0x4c
 8002a7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d113      	bne.n	8002aae <HAL_PCD_IRQHandler+0x3a2>
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	3354      	adds	r3, #84	; 0x54
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d108      	bne.n	8002aae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	f003 fe37 	bl	800671c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f006 f912 	bl	8008cde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aec:	461a      	mov	r2, r3
 8002aee:	2310      	movs	r3, #16
 8002af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2340      	movs	r3, #64	; 0x40
 8002b0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d023      	beq.n	8002b60 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b1a:	6a38      	ldr	r0, [r7, #32]
 8002b1c:	f002 fd18 	bl	8005550 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3338      	adds	r3, #56	; 0x38
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4413      	add	r3, r2
 8002b30:	3304      	adds	r3, #4
 8002b32:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	78db      	ldrb	r3, [r3, #3]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d108      	bne.n	8002b4e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f006 f95f 	bl	8008e0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fcdb 	bl	8003528 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	3301      	adds	r3, #1
 8002b76:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f47f af2e 	bne.w	80029e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f003 fd02 	bl	8006594 <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b9a:	d122      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d108      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fec3 	bl	8003950 <HAL_PCDEx_LPM_Callback>
 8002bca:	e002      	b.n	8002bd2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f006 f8fd 	bl	8008dcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fcd4 	bl	8006594 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf6:	d112      	bne.n	8002c1e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f006 f8b9 	bl	8008d80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002c1c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fcb6 	bl	8006594 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c32:	f040 80b7 	bne.w	8002da4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	69fa      	ldr	r2, [r7, #28]
 8002c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2110      	movs	r1, #16
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fc7d 	bl	8005550 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c5a:	e046      	b.n	8002cea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c6e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c80:	0151      	lsls	r1, r2, #5
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	440a      	add	r2, r1
 8002c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	015a      	lsls	r2, r3, #5
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ca2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb4:	0151      	lsls	r1, r2, #5
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	440a      	add	r2, r1
 8002cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002cc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd4:	0151      	lsls	r1, r2, #5
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	440a      	add	r2, r1
 8002cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002cde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ce2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d3b3      	bcc.n	8002c5c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d02:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002d06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d20:	f043 030b 	orr.w	r3, r3, #11
 8002d24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d36:	f043 030b 	orr.w	r3, r3, #11
 8002d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3c:	e015      	b.n	8002d6a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d50:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d54:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d64:	f043 030b 	orr.w	r3, r3, #11
 8002d68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d8e:	461a      	mov	r2, r3
 8002d90:	f003 fcc4 	bl	800671c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fbf3 	bl	8006594 <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db8:	d124      	bne.n	8002e04 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f003 fc89 	bl	80066d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 fc3e 	bl	800564a <USB_GetDevSpeed>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681c      	ldr	r4, [r3, #0]
 8002dda:	f001 f9e9 	bl	80041b0 <HAL_RCC_GetHCLKFreq>
 8002dde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	4620      	mov	r0, r4
 8002dea:	f002 f93d 	bl	8005068 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f005 ff9d 	bl	8008d2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	695a      	ldr	r2, [r3, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f003 fbc3 	bl	8006594 <USB_ReadInterrupts>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d10a      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f005 ff7a 	bl	8008d12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f002 0208 	and.w	r2, r2, #8
 8002e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 fbae 	bl	8006594 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3e:	2b80      	cmp	r3, #128	; 0x80
 8002e40:	d122      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e4e:	2301      	movs	r3, #1
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	e014      	b.n	8002e7e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	4619      	mov	r1, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fb27 	bl	80034c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d3e5      	bcc.n	8002e54 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 fb81 	bl	8006594 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e9c:	d13b      	bne.n	8002f16 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea2:	e02b      	b.n	8002efc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3340      	adds	r3, #64	; 0x40
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d115      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da12      	bge.n	8002ef6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	333f      	adds	r3, #63	; 0x3f
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 fae8 	bl	80034c6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	3301      	adds	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3ce      	bcc.n	8002ea4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fb3a 	bl	8006594 <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f2a:	d155      	bne.n	8002fd8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e045      	b.n	8002fbe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d12e      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	da2b      	bge.n	8002fb8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f6c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d121      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb4:	6053      	str	r3, [r2, #4]
            break;
 8002fb6:	e007      	b.n	8002fc8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	3301      	adds	r3, #1
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3b4      	bcc.n	8002f32 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 fad9 	bl	8006594 <USB_ReadInterrupts>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fec:	d10a      	bne.n	8003004 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f005 ff1e 	bl	8008e30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003002:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 fac3 	bl	8006594 <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b04      	cmp	r3, #4
 8003016:	d115      	bne.n	8003044 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f003 0304 	and.w	r3, r3, #4
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f005 ff0e 	bl	8008e4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6859      	ldr	r1, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	e000      	b.n	8003044 <HAL_PCD_IRQHandler+0x938>
      return;
 8003042:	bf00      	nop
    }
  }
}
 8003044:	3734      	adds	r7, #52	; 0x34
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}

0800304a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	460b      	mov	r3, r1
 8003054:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_PCD_SetAddress+0x1a>
 8003060:	2302      	movs	r3, #2
 8003062:	e013      	b.n	800308c <HAL_PCD_SetAddress+0x42>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f003 fa21 	bl	80064c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3708      	adds	r7, #8
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	4608      	mov	r0, r1
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	4603      	mov	r3, r0
 80030a4:	70fb      	strb	r3, [r7, #3]
 80030a6:	460b      	mov	r3, r1
 80030a8:	803b      	strh	r3, [r7, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0f      	bge.n	80030da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 020f 	and.w	r2, r3, #15
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3338      	adds	r3, #56	; 0x38
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	705a      	strb	r2, [r3, #1]
 80030d8:	e00f      	b.n	80030fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3304      	adds	r3, #4
 80030f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	b2da      	uxtb	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003106:	883a      	ldrh	r2, [r7, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	78ba      	ldrb	r2, [r7, #2]
 8003110:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	785b      	ldrb	r3, [r3, #1]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003124:	78bb      	ldrb	r3, [r7, #2]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d102      	bne.n	8003130 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_PCD_EP_Open+0xaa>
 800313a:	2302      	movs	r3, #2
 800313c:	e00e      	b.n	800315c <HAL_PCD_EP_Open+0xc8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	4618      	mov	r0, r3
 800314e:	f002 faa1 	bl	8005694 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800315a:	7afb      	ldrb	r3, [r7, #11]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003174:	2b00      	cmp	r3, #0
 8003176:	da0f      	bge.n	8003198 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	3338      	adds	r3, #56	; 0x38
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2201      	movs	r2, #1
 8003194:	705a      	strb	r2, [r3, #1]
 8003196:	e00f      	b.n	80031b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	4613      	mov	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4413      	add	r3, r2
 80031ae:	3304      	adds	r3, #4
 80031b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_PCD_EP_Close+0x6e>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e00e      	b.n	80031f0 <HAL_PCD_EP_Close+0x8c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68f9      	ldr	r1, [r7, #12]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f002 fadf 	bl	80057a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	460b      	mov	r3, r1
 8003206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003208:	7afb      	ldrb	r3, [r7, #11]
 800320a:	f003 020f 	and.w	r2, r3, #15
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	3304      	adds	r3, #4
 8003220:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2200      	movs	r2, #0
 8003232:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	2200      	movs	r2, #0
 8003238:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323a:	7afb      	ldrb	r3, [r7, #11]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	b2da      	uxtb	r2, r3
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d102      	bne.n	8003254 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003254:	7afb      	ldrb	r3, [r7, #11]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	6979      	ldr	r1, [r7, #20]
 800326c:	f002 fdbe 	bl	8005dec <USB_EP0StartXfer>
 8003270:	e008      	b.n	8003284 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	6979      	ldr	r1, [r7, #20]
 8003280:	f002 fb6c 	bl	800595c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80032b0:	681b      	ldr	r3, [r3, #0]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	460b      	mov	r3, r1
 80032cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	3338      	adds	r3, #56	; 0x38
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4413      	add	r3, r2
 80032e2:	3304      	adds	r3, #4
 80032e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2201      	movs	r2, #1
 80032fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	b2da      	uxtb	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	6979      	ldr	r1, [r7, #20]
 8003330:	f002 fd5c 	bl	8005dec <USB_EP0StartXfer>
 8003334:	e008      	b.n	8003348 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	461a      	mov	r2, r3
 8003342:	6979      	ldr	r1, [r7, #20]
 8003344:	f002 fb0a 	bl	800595c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b084      	sub	sp, #16
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	460b      	mov	r3, r1
 800335c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800335e:	78fb      	ldrb	r3, [r7, #3]
 8003360:	f003 020f 	and.w	r2, r3, #15
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d901      	bls.n	8003370 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e050      	b.n	8003412 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da0f      	bge.n	8003398 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3338      	adds	r3, #56	; 0x38
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	705a      	strb	r2, [r3, #1]
 8003396:	e00d      	b.n	80033b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	4613      	mov	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	3304      	adds	r3, #4
 80033ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ba:	78fb      	ldrb	r3, [r7, #3]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_PCD_EP_SetStall+0x82>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e01e      	b.n	8003412 <HAL_PCD_EP_SetStall+0xc0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68f9      	ldr	r1, [r7, #12]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f002 ff9a 	bl	800631c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	b2d9      	uxtb	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003402:	461a      	mov	r2, r3
 8003404:	f003 f98a 	bl	800671c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	429a      	cmp	r2, r3
 8003432:	d901      	bls.n	8003438 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e042      	b.n	80034be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800343c:	2b00      	cmp	r3, #0
 800343e:	da0f      	bge.n	8003460 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	f003 020f 	and.w	r2, r3, #15
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	3338      	adds	r3, #56	; 0x38
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	3304      	adds	r3, #4
 8003456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	705a      	strb	r2, [r3, #1]
 800345e:	e00f      	b.n	8003480 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_PCD_EP_ClrStall+0x86>
 800349c:	2302      	movs	r3, #2
 800349e:	e00e      	b.n	80034be <HAL_PCD_EP_ClrStall+0xa4>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68f9      	ldr	r1, [r7, #12]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f002 ffa2 	bl	80063f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da0c      	bge.n	80034f4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	3338      	adds	r3, #56	; 0x38
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e00c      	b.n	800350e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	f003 020f 	and.w	r2, r3, #15
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	3304      	adds	r3, #4
 800350c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	4618      	mov	r0, r3
 8003516:	f002 fdc1 	bl	800609c <USB_EPStopXfer>
 800351a:	4603      	mov	r3, r0
 800351c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800351e:	7afb      	ldrb	r3, [r7, #11]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	; 0x28
 800352c:	af02      	add	r7, sp, #8
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	3338      	adds	r3, #56	; 0x38
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	429a      	cmp	r2, r3
 800355a:	d901      	bls.n	8003560 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e06c      	b.n	800363a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	429a      	cmp	r2, r3
 8003574:	d902      	bls.n	800357c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	3303      	adds	r3, #3
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003584:	e02b      	b.n	80035de <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	429a      	cmp	r2, r3
 800359a:	d902      	bls.n	80035a2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3303      	adds	r3, #3
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6919      	ldr	r1, [r3, #16]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	4603      	mov	r3, r0
 80035c0:	6978      	ldr	r0, [r7, #20]
 80035c2:	f002 fe15 	bl	80061f0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	441a      	add	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1a      	ldr	r2, [r3, #32]
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	441a      	add	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d809      	bhi.n	8003608 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6a1a      	ldr	r2, [r3, #32]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d203      	bcs.n	8003608 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1be      	bne.n	8003586 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	699a      	ldr	r2, [r3, #24]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	429a      	cmp	r2, r3
 8003612:	d811      	bhi.n	8003638 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	2201      	movs	r2, #1
 800361c:	fa02 f303 	lsl.w	r3, r2, r3
 8003620:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	43db      	mvns	r3, r3
 800362e:	6939      	ldr	r1, [r7, #16]
 8003630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003634:	4013      	ands	r3, r2
 8003636:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	333c      	adds	r3, #60	; 0x3c
 800365c:	3304      	adds	r3, #4
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d17b      	bne.n	8003772 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d015      	beq.n	80036b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	4a61      	ldr	r2, [pc, #388]	; (800380c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	f240 80b9 	bls.w	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80b3 	beq.w	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	461a      	mov	r2, r3
 80036a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ac:	6093      	str	r3, [r2, #8]
 80036ae:	e0a7      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036c6:	461a      	mov	r2, r3
 80036c8:	2320      	movs	r3, #32
 80036ca:	6093      	str	r3, [r2, #8]
 80036cc:	e098      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f040 8093 	bne.w	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	; (800380c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d90f      	bls.n	8003702 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	461a      	mov	r2, r3
 80036fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fe:	6093      	str	r3, [r2, #8]
 8003700:	e07e      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4413      	add	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	4413      	add	r3, r2
 8003714:	3304      	adds	r3, #4
 8003716:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	0159      	lsls	r1, r3, #5
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	440b      	add	r3, r1
 8003724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372e:	1ad2      	subs	r2, r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d114      	bne.n	8003764 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800374c:	461a      	mov	r2, r3
 800374e:	2101      	movs	r1, #1
 8003750:	f002 ffe4 	bl	800671c <USB_EP0_OutStart>
 8003754:	e006      	b.n	8003764 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	441a      	add	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f005 fa9c 	bl	8008ca8 <HAL_PCD_DataOutStageCallback>
 8003770:	e046      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	4a26      	ldr	r2, [pc, #152]	; (8003810 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d124      	bne.n	80037c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003790:	461a      	mov	r2, r3
 8003792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003796:	6093      	str	r3, [r2, #8]
 8003798:	e032      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	2320      	movs	r3, #32
 80037b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	4619      	mov	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f005 fa73 	bl	8008ca8 <HAL_PCD_DataOutStageCallback>
 80037c2:	e01d      	b.n	8003800 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d114      	bne.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d108      	bne.n	80037f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037ec:	461a      	mov	r2, r3
 80037ee:	2100      	movs	r1, #0
 80037f0:	f002 ff94 	bl	800671c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	4619      	mov	r1, r3
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f005 fa54 	bl	8008ca8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3720      	adds	r7, #32
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	4f54300a 	.word	0x4f54300a
 8003810:	4f54310a 	.word	0x4f54310a

08003814 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	333c      	adds	r3, #60	; 0x3c
 800382c:	3304      	adds	r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4a15      	ldr	r2, [pc, #84]	; (800389c <PCD_EP_OutSetupPacket_int+0x88>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d90e      	bls.n	8003868 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003850:	2b00      	cmp	r3, #0
 8003852:	d009      	beq.n	8003868 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003860:	461a      	mov	r2, r3
 8003862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003866:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f005 fa0b 	bl	8008c84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4a0a      	ldr	r2, [pc, #40]	; (800389c <PCD_EP_OutSetupPacket_int+0x88>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d90c      	bls.n	8003890 <PCD_EP_OutSetupPacket_int+0x7c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d108      	bne.n	8003890 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6818      	ldr	r0, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003888:	461a      	mov	r2, r3
 800388a:	2101      	movs	r1, #1
 800388c:	f002 ff46 	bl	800671c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	4f54300a 	.word	0x4f54300a

080038a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	70fb      	strb	r3, [r7, #3]
 80038ac:	4613      	mov	r3, r2
 80038ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038be:	883b      	ldrh	r3, [r7, #0]
 80038c0:	0419      	lsls	r1, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28
 80038cc:	e028      	b.n	8003920 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]
 80038e0:	e00d      	b.n	80038fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	3340      	adds	r3, #64	; 0x40
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	0c1b      	lsrs	r3, r3, #16
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	4413      	add	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	3301      	adds	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	3b01      	subs	r3, #1
 8003904:	429a      	cmp	r2, r3
 8003906:	d3ec      	bcc.n	80038e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003908:	883b      	ldrh	r3, [r7, #0]
 800390a:	0418      	lsls	r0, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6819      	ldr	r1, [r3, #0]
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	3b01      	subs	r3, #1
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	4302      	orrs	r2, r0
 8003918:	3340      	adds	r3, #64	; 0x40
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	460b      	mov	r3, r1
 8003938:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e267      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d075      	beq.n	8003a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003986:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b04      	cmp	r3, #4
 8003990:	d00c      	beq.n	80039ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b85      	ldr	r3, [pc, #532]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800399a:	2b08      	cmp	r3, #8
 800399c:	d112      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b82      	ldr	r3, [pc, #520]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b7e      	ldr	r3, [pc, #504]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05b      	beq.n	8003a70 <HAL_RCC_OscConfig+0x108>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d157      	bne.n	8003a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e242      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x74>
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a75      	ldr	r2, [pc, #468]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x98>
 80039e6:	4b70      	ldr	r3, [pc, #448]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a6f      	ldr	r2, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b6d      	ldr	r3, [pc, #436]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a6c      	ldr	r2, [pc, #432]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xb0>
 8003a00:	4b69      	ldr	r3, [pc, #420]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a68      	ldr	r2, [pc, #416]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b66      	ldr	r3, [pc, #408]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a65      	ldr	r2, [pc, #404]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fd fb06 	bl	8001030 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fd fb02 	bl	8001030 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e207      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xc0>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fd faf2 	bl	8001030 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fd faee 	bl	8001030 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e1f3      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b51      	ldr	r3, [pc, #324]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0xe8>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d063      	beq.n	8003b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7e:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a96:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1c7      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b3b      	ldr	r3, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4937      	ldr	r1, [pc, #220]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e03a      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x244>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fd faa7 	bl	8001030 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fd faa3 	bl	8001030 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1a8      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4925      	ldr	r1, [pc, #148]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	e015      	b.n	8003b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b1a:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_OscConfig+0x244>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fd fa86 	bl	8001030 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b28:	f7fd fa82 	bl	8001030 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e187      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d036      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b5a:	4b15      	ldr	r3, [pc, #84]	; (8003bb0 <HAL_RCC_OscConfig+0x248>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd fa66 	bl	8001030 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b68:	f7fd fa62 	bl	8001030 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e167      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0f0      	beq.n	8003b68 <HAL_RCC_OscConfig+0x200>
 8003b86:	e01b      	b.n	8003bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b88:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_OscConfig+0x248>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8e:	f7fd fa4f 	bl	8001030 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	e00e      	b.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b96:	f7fd fa4b 	bl	8001030 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d907      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e150      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	42470000 	.word	0x42470000
 8003bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	4b88      	ldr	r3, [pc, #544]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1ea      	bne.n	8003b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8097 	beq.w	8003cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd2:	4b81      	ldr	r3, [pc, #516]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	4b7d      	ldr	r3, [pc, #500]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a7c      	ldr	r2, [pc, #496]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
 8003bee:	4b7a      	ldr	r3, [pc, #488]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bfe:	4b77      	ldr	r3, [pc, #476]	; (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d118      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0a:	4b74      	ldr	r3, [pc, #464]	; (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a73      	ldr	r2, [pc, #460]	; (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c16:	f7fd fa0b 	bl	8001030 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c1e:	f7fd fa07 	bl	8001030 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e10c      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c30:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <HAL_RCC_OscConfig+0x474>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0f0      	beq.n	8003c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d106      	bne.n	8003c52 <HAL_RCC_OscConfig+0x2ea>
 8003c44:	4b64      	ldr	r3, [pc, #400]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c48:	4a63      	ldr	r2, [pc, #396]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x324>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x30c>
 8003c5a:	4b5f      	ldr	r3, [pc, #380]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a5e      	ldr	r2, [pc, #376]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c60:	f043 0304 	orr.w	r3, r3, #4
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	4b5c      	ldr	r3, [pc, #368]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a5b      	ldr	r2, [pc, #364]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
 8003c72:	e00b      	b.n	8003c8c <HAL_RCC_OscConfig+0x324>
 8003c74:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	4a57      	ldr	r2, [pc, #348]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c80:	4b55      	ldr	r3, [pc, #340]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c84:	4a54      	ldr	r2, [pc, #336]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003c86:	f023 0304 	bic.w	r3, r3, #4
 8003c8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d015      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd f9cc 	bl	8001030 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fd f9c8 	bl	8001030 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0cb      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	4b49      	ldr	r3, [pc, #292]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ee      	beq.n	8003c9c <HAL_RCC_OscConfig+0x334>
 8003cbe:	e014      	b.n	8003cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc0:	f7fd f9b6 	bl	8001030 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd f9b2 	bl	8001030 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e0b5      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cde:	4b3e      	ldr	r3, [pc, #248]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ee      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	4a38      	ldr	r2, [pc, #224]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80a1 	beq.w	8003e48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d06:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d05c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d141      	bne.n	8003d9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b31      	ldr	r3, [pc, #196]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fd f986 	bl	8001030 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d28:	f7fd f982 	bl	8001030 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e087      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3a:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1f0      	bne.n	8003d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69da      	ldr	r2, [r3, #28]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	019b      	lsls	r3, r3, #6
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	085b      	lsrs	r3, r3, #1
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	061b      	lsls	r3, r3, #24
 8003d6a:	491b      	ldr	r1, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fd f95b 	bl	8001030 <HAL_GetTick>
 8003d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7e:	f7fd f957 	bl	8001030 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e05c      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0f0      	beq.n	8003d7e <HAL_RCC_OscConfig+0x416>
 8003d9c:	e054      	b.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d9e:	4b10      	ldr	r3, [pc, #64]	; (8003de0 <HAL_RCC_OscConfig+0x478>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fd f944 	bl	8001030 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dac:	f7fd f940 	bl	8001030 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e045      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0x444>
 8003dca:	e03d      	b.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e038      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003de4:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x4ec>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d028      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d121      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d11a      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e14:	4013      	ands	r3, r2
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d111      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0cc      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b68      	ldr	r3, [pc, #416]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d90c      	bls.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b65      	ldr	r3, [pc, #404]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0b8      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d020      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eac:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a58      	ldr	r2, [pc, #352]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ec4:	4b53      	ldr	r3, [pc, #332]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4a52      	ldr	r2, [pc, #328]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b50      	ldr	r3, [pc, #320]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	494d      	ldr	r1, [pc, #308]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d044      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d107      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	4b47      	ldr	r3, [pc, #284]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d119      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e07f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d107      	bne.n	8003f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f16:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d109      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e06f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e067      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f36:	4b37      	ldr	r3, [pc, #220]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f023 0203 	bic.w	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4934      	ldr	r1, [pc, #208]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f48:	f7fd f872 	bl	8001030 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	e00a      	b.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f50:	f7fd f86e 	bl	8001030 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e04f      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 020c 	and.w	r2, r3, #12
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d1eb      	bne.n	8003f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d20c      	bcs.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f86:	4b22      	ldr	r3, [pc, #136]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <HAL_RCC_ClockConfig+0x1b8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0307 	and.w	r3, r3, #7
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e032      	b.n	8004006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	4b19      	ldr	r3, [pc, #100]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	4916      	ldr	r1, [pc, #88]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	490e      	ldr	r1, [pc, #56]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fde:	f000 f821 	bl	8004024 <HAL_RCC_GetSysClockFreq>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	091b      	lsrs	r3, r3, #4
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	490a      	ldr	r1, [pc, #40]	; (8004018 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	5ccb      	ldrb	r3, [r1, r3]
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	4a09      	ldr	r2, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc ffd2 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023c00 	.word	0x40023c00
 8004014:	40023800 	.word	0x40023800
 8004018:	080092b8 	.word	0x080092b8
 800401c:	20000000 	.word	0x20000000
 8004020:	20000004 	.word	0x20000004

08004024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004028:	b090      	sub	sp, #64	; 0x40
 800402a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800402c:	2300      	movs	r3, #0
 800402e:	637b      	str	r3, [r7, #52]	; 0x34
 8004030:	2300      	movs	r3, #0
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004034:	2300      	movs	r3, #0
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800403c:	4b59      	ldr	r3, [pc, #356]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
 8004044:	2b08      	cmp	r3, #8
 8004046:	d00d      	beq.n	8004064 <HAL_RCC_GetSysClockFreq+0x40>
 8004048:	2b08      	cmp	r3, #8
 800404a:	f200 80a1 	bhi.w	8004190 <HAL_RCC_GetSysClockFreq+0x16c>
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <HAL_RCC_GetSysClockFreq+0x34>
 8004052:	2b04      	cmp	r3, #4
 8004054:	d003      	beq.n	800405e <HAL_RCC_GetSysClockFreq+0x3a>
 8004056:	e09b      	b.n	8004190 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800405a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800405c:	e09b      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800405e:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004062:	e098      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004064:	4b4f      	ldr	r3, [pc, #316]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800406e:	4b4d      	ldr	r3, [pc, #308]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d028      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	099b      	lsrs	r3, r3, #6
 8004080:	2200      	movs	r2, #0
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	627a      	str	r2, [r7, #36]	; 0x24
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800408c:	2100      	movs	r1, #0
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_GetSysClockFreq+0x188>)
 8004090:	fb03 f201 	mul.w	r2, r3, r1
 8004094:	2300      	movs	r3, #0
 8004096:	fb00 f303 	mul.w	r3, r0, r3
 800409a:	4413      	add	r3, r2
 800409c:	4a43      	ldr	r2, [pc, #268]	; (80041ac <HAL_RCC_GetSysClockFreq+0x188>)
 800409e:	fba0 1202 	umull	r1, r2, r0, r2
 80040a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a4:	460a      	mov	r2, r1
 80040a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80040a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040aa:	4413      	add	r3, r2
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b0:	2200      	movs	r2, #0
 80040b2:	61bb      	str	r3, [r7, #24]
 80040b4:	61fa      	str	r2, [r7, #28]
 80040b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040be:	f7fc f889 	bl	80001d4 <__aeabi_uldivmod>
 80040c2:	4602      	mov	r2, r0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4613      	mov	r3, r2
 80040c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ca:	e053      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040cc:	4b35      	ldr	r3, [pc, #212]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	099b      	lsrs	r3, r3, #6
 80040d2:	2200      	movs	r2, #0
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	617a      	str	r2, [r7, #20]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040de:	f04f 0b00 	mov.w	fp, #0
 80040e2:	4652      	mov	r2, sl
 80040e4:	465b      	mov	r3, fp
 80040e6:	f04f 0000 	mov.w	r0, #0
 80040ea:	f04f 0100 	mov.w	r1, #0
 80040ee:	0159      	lsls	r1, r3, #5
 80040f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040f4:	0150      	lsls	r0, r2, #5
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
 80040fa:	ebb2 080a 	subs.w	r8, r2, sl
 80040fe:	eb63 090b 	sbc.w	r9, r3, fp
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800410e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004112:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004116:	ebb2 0408 	subs.w	r4, r2, r8
 800411a:	eb63 0509 	sbc.w	r5, r3, r9
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	f04f 0300 	mov.w	r3, #0
 8004126:	00eb      	lsls	r3, r5, #3
 8004128:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800412c:	00e2      	lsls	r2, r4, #3
 800412e:	4614      	mov	r4, r2
 8004130:	461d      	mov	r5, r3
 8004132:	eb14 030a 	adds.w	r3, r4, sl
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	eb45 030b 	adc.w	r3, r5, fp
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800414a:	4629      	mov	r1, r5
 800414c:	028b      	lsls	r3, r1, #10
 800414e:	4621      	mov	r1, r4
 8004150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004154:	4621      	mov	r1, r4
 8004156:	028a      	lsls	r2, r1, #10
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	2200      	movs	r2, #0
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	60fa      	str	r2, [r7, #12]
 8004164:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004168:	f7fc f834 	bl	80001d4 <__aeabi_uldivmod>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4613      	mov	r3, r2
 8004172:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004174:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	3301      	adds	r3, #1
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800418e:	e002      	b.n	8004196 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004192:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004198:	4618      	mov	r0, r3
 800419a:	3740      	adds	r7, #64	; 0x40
 800419c:	46bd      	mov	sp, r7
 800419e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041a2:	bf00      	nop
 80041a4:	40023800 	.word	0x40023800
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	017d7840 	.word	0x017d7840

080041b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041b4:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20000000 	.word	0x20000000

080041c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e041      	b.n	800425e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fc fd58 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3304      	adds	r3, #4
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f000 fb02 	bl	8004810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e041      	b.n	80042fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f839 	bl	8004304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f000 fab3 	bl	8004810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d109      	bne.n	800433c <HAL_TIM_PWM_Start+0x24>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	bf14      	ite	ne
 8004334:	2301      	movne	r3, #1
 8004336:	2300      	moveq	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e022      	b.n	8004382 <HAL_TIM_PWM_Start+0x6a>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b04      	cmp	r3, #4
 8004340:	d109      	bne.n	8004356 <HAL_TIM_PWM_Start+0x3e>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	bf14      	ite	ne
 800434e:	2301      	movne	r3, #1
 8004350:	2300      	moveq	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	e015      	b.n	8004382 <HAL_TIM_PWM_Start+0x6a>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b08      	cmp	r3, #8
 800435a:	d109      	bne.n	8004370 <HAL_TIM_PWM_Start+0x58>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	bf14      	ite	ne
 8004368:	2301      	movne	r3, #1
 800436a:	2300      	moveq	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e008      	b.n	8004382 <HAL_TIM_PWM_Start+0x6a>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	bf14      	ite	ne
 800437c:	2301      	movne	r3, #1
 800437e:	2300      	moveq	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e068      	b.n	800445c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d104      	bne.n	800439a <HAL_TIM_PWM_Start+0x82>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004398:	e013      	b.n	80043c2 <HAL_TIM_PWM_Start+0xaa>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	2b04      	cmp	r3, #4
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start+0x92>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043a8:	e00b      	b.n	80043c2 <HAL_TIM_PWM_Start+0xaa>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d104      	bne.n	80043ba <HAL_TIM_PWM_Start+0xa2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043b8:	e003      	b.n	80043c2 <HAL_TIM_PWM_Start+0xaa>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	6839      	ldr	r1, [r7, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fd57 	bl	8004e7e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <HAL_TIM_PWM_Start+0x14c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d107      	bne.n	80043ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_TIM_PWM_Start+0x14c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d018      	beq.n	8004426 <HAL_TIM_PWM_Start+0x10e>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fc:	d013      	beq.n	8004426 <HAL_TIM_PWM_Start+0x10e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a19      	ldr	r2, [pc, #100]	; (8004468 <HAL_TIM_PWM_Start+0x150>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_TIM_PWM_Start+0x10e>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_TIM_PWM_Start+0x154>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_TIM_PWM_Start+0x10e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a16      	ldr	r2, [pc, #88]	; (8004470 <HAL_TIM_PWM_Start+0x158>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIM_PWM_Start+0x10e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <HAL_TIM_PWM_Start+0x15c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d111      	bne.n	800444a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b06      	cmp	r3, #6
 8004436:	d010      	beq.n	800445a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004448:	e007      	b.n	800445a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40010000 	.word	0x40010000
 8004468:	40000400 	.word	0x40000400
 800446c:	40000800 	.word	0x40000800
 8004470:	40000c00 	.word	0x40000c00
 8004474:	40014000 	.word	0x40014000

08004478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004492:	2302      	movs	r3, #2
 8004494:	e0ae      	b.n	80045f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	f200 809f 	bhi.w	80045e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044a6:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	080045e5 	.word	0x080045e5
 80044b4:	080045e5 	.word	0x080045e5
 80044b8:	080045e5 	.word	0x080045e5
 80044bc:	08004521 	.word	0x08004521
 80044c0:	080045e5 	.word	0x080045e5
 80044c4:	080045e5 	.word	0x080045e5
 80044c8:	080045e5 	.word	0x080045e5
 80044cc:	08004563 	.word	0x08004563
 80044d0:	080045e5 	.word	0x080045e5
 80044d4:	080045e5 	.word	0x080045e5
 80044d8:	080045e5 	.word	0x080045e5
 80044dc:	080045a3 	.word	0x080045a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa12 	bl	8004910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0208 	orr.w	r2, r2, #8
 80044fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0204 	bic.w	r2, r2, #4
 800450a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	619a      	str	r2, [r3, #24]
      break;
 800451e:	e064      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fa58 	bl	80049dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	699a      	ldr	r2, [r3, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6999      	ldr	r1, [r3, #24]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	021a      	lsls	r2, r3, #8
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	619a      	str	r2, [r3, #24]
      break;
 8004560:	e043      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 faa3 	bl	8004ab4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0208 	orr.w	r2, r2, #8
 800457c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0204 	bic.w	r2, r2, #4
 800458c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	61da      	str	r2, [r3, #28]
      break;
 80045a0:	e023      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 faed 	bl	8004b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69d9      	ldr	r1, [r3, #28]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	021a      	lsls	r2, r3, #8
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	61da      	str	r2, [r3, #28]
      break;
 80045e2:	e002      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	75fb      	strb	r3, [r7, #23]
      break;
 80045e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_TIM_ConfigClockSource+0x1c>
 8004614:	2302      	movs	r3, #2
 8004616:	e0b4      	b.n	8004782 <HAL_TIM_ConfigClockSource+0x186>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004650:	d03e      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004656:	f200 8087 	bhi.w	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 800465a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465e:	f000 8086 	beq.w	800476e <HAL_TIM_ConfigClockSource+0x172>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	d87f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d01a      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0xa6>
 800466c:	2b70      	cmp	r3, #112	; 0x70
 800466e:	d87b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d050      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x11a>
 8004674:	2b60      	cmp	r3, #96	; 0x60
 8004676:	d877      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d03c      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0xfa>
 800467c:	2b50      	cmp	r3, #80	; 0x50
 800467e:	d873      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d058      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x13a>
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d86f      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d064      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 800468c:	2b30      	cmp	r3, #48	; 0x30
 800468e:	d86b      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d060      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	2b20      	cmp	r3, #32
 8004696:	d867      	bhi.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05c      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d05a      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	e062      	b.n	8004768 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f000 fbc4 	bl	8004e3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	609a      	str	r2, [r3, #8]
      break;
 80046ce:	e04f      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f000 fbad 	bl	8004e3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f2:	609a      	str	r2, [r3, #8]
      break;
 80046f4:	e03c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 fb21 	bl	8004d4a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2150      	movs	r1, #80	; 0x50
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fb7a 	bl	8004e08 <TIM_ITRx_SetConfig>
      break;
 8004714:	e02c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 fb40 	bl	8004da8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2160      	movs	r1, #96	; 0x60
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fb6a 	bl	8004e08 <TIM_ITRx_SetConfig>
      break;
 8004734:	e01c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 fb01 	bl	8004d4a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2140      	movs	r1, #64	; 0x40
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fb5a 	bl	8004e08 <TIM_ITRx_SetConfig>
      break;
 8004754:	e00c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f000 fb51 	bl	8004e08 <TIM_ITRx_SetConfig>
      break;
 8004766:	e003      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e000      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800476e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004780:	7bfb      	ldrb	r3, [r7, #15]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800479e:	2302      	movs	r3, #2
 80047a0:	e031      	b.n	8004806 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80047b2:	6839      	ldr	r1, [r7, #0]
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fa37 	bl	8004c28 <TIM_SlaveTimer_SetConfig>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d009      	beq.n	80047d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e018      	b.n	8004806 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a34      	ldr	r2, [pc, #208]	; (80048f4 <TIM_Base_SetConfig+0xe4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00f      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482e:	d00b      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a31      	ldr	r2, [pc, #196]	; (80048f8 <TIM_Base_SetConfig+0xe8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d007      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a30      	ldr	r2, [pc, #192]	; (80048fc <TIM_Base_SetConfig+0xec>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d003      	beq.n	8004848 <TIM_Base_SetConfig+0x38>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a2f      	ldr	r2, [pc, #188]	; (8004900 <TIM_Base_SetConfig+0xf0>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d108      	bne.n	800485a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a25      	ldr	r2, [pc, #148]	; (80048f4 <TIM_Base_SetConfig+0xe4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01b      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004868:	d017      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a22      	ldr	r2, [pc, #136]	; (80048f8 <TIM_Base_SetConfig+0xe8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d013      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a21      	ldr	r2, [pc, #132]	; (80048fc <TIM_Base_SetConfig+0xec>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00f      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a20      	ldr	r2, [pc, #128]	; (8004900 <TIM_Base_SetConfig+0xf0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00b      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a1f      	ldr	r2, [pc, #124]	; (8004904 <TIM_Base_SetConfig+0xf4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d007      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <TIM_Base_SetConfig+0xf8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d003      	beq.n	800489a <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a1d      	ldr	r2, [pc, #116]	; (800490c <TIM_Base_SetConfig+0xfc>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d108      	bne.n	80048ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <TIM_Base_SetConfig+0xe4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d103      	bne.n	80048e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	615a      	str	r2, [r3, #20]
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800

08004910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f023 0303 	bic.w	r3, r3, #3
 8004946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f023 0302 	bic.w	r3, r3, #2
 8004958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a1c      	ldr	r2, [pc, #112]	; (80049d8 <TIM_OC1_SetConfig+0xc8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d10c      	bne.n	8004986 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f023 0308 	bic.w	r3, r3, #8
 8004972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <TIM_OC1_SetConfig+0xc8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d111      	bne.n	80049b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800499c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	621a      	str	r2, [r3, #32]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40010000 	.word	0x40010000

080049dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0210 	bic.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0320 	bic.w	r3, r3, #32
 8004a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <TIM_OC2_SetConfig+0xd4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10d      	bne.n	8004a58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a15      	ldr	r2, [pc, #84]	; (8004ab0 <TIM_OC2_SetConfig+0xd4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d113      	bne.n	8004a88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000

08004ab4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f023 0303 	bic.w	r3, r3, #3
 8004aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	021b      	lsls	r3, r3, #8
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a1d      	ldr	r2, [pc, #116]	; (8004b84 <TIM_OC3_SetConfig+0xd0>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d10d      	bne.n	8004b2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a14      	ldr	r2, [pc, #80]	; (8004b84 <TIM_OC3_SetConfig+0xd0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d113      	bne.n	8004b5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	621a      	str	r2, [r3, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40010000 	.word	0x40010000

08004b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	031b      	lsls	r3, r3, #12
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a10      	ldr	r2, [pc, #64]	; (8004c24 <TIM_OC4_SetConfig+0x9c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d109      	bne.n	8004bfc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	019b      	lsls	r3, r3, #6
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40010000 	.word	0x40010000

08004c28 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c44:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f023 0307 	bic.w	r3, r3, #7
 8004c56:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b70      	cmp	r3, #112	; 0x70
 8004c70:	d01a      	beq.n	8004ca8 <TIM_SlaveTimer_SetConfig+0x80>
 8004c72:	2b70      	cmp	r3, #112	; 0x70
 8004c74:	d860      	bhi.n	8004d38 <TIM_SlaveTimer_SetConfig+0x110>
 8004c76:	2b60      	cmp	r3, #96	; 0x60
 8004c78:	d054      	beq.n	8004d24 <TIM_SlaveTimer_SetConfig+0xfc>
 8004c7a:	2b60      	cmp	r3, #96	; 0x60
 8004c7c:	d85c      	bhi.n	8004d38 <TIM_SlaveTimer_SetConfig+0x110>
 8004c7e:	2b50      	cmp	r3, #80	; 0x50
 8004c80:	d046      	beq.n	8004d10 <TIM_SlaveTimer_SetConfig+0xe8>
 8004c82:	2b50      	cmp	r3, #80	; 0x50
 8004c84:	d858      	bhi.n	8004d38 <TIM_SlaveTimer_SetConfig+0x110>
 8004c86:	2b40      	cmp	r3, #64	; 0x40
 8004c88:	d019      	beq.n	8004cbe <TIM_SlaveTimer_SetConfig+0x96>
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d854      	bhi.n	8004d38 <TIM_SlaveTimer_SetConfig+0x110>
 8004c8e:	2b30      	cmp	r3, #48	; 0x30
 8004c90:	d055      	beq.n	8004d3e <TIM_SlaveTimer_SetConfig+0x116>
 8004c92:	2b30      	cmp	r3, #48	; 0x30
 8004c94:	d850      	bhi.n	8004d38 <TIM_SlaveTimer_SetConfig+0x110>
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d051      	beq.n	8004d3e <TIM_SlaveTimer_SetConfig+0x116>
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d84c      	bhi.n	8004d38 <TIM_SlaveTimer_SetConfig+0x110>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d04d      	beq.n	8004d3e <TIM_SlaveTimer_SetConfig+0x116>
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d04b      	beq.n	8004d3e <TIM_SlaveTimer_SetConfig+0x116>
 8004ca6:	e047      	b.n	8004d38 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68d9      	ldr	r1, [r3, #12]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f000 f8c1 	bl	8004e3e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004cbc:	e040      	b.n	8004d40 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d101      	bne.n	8004cca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e03b      	b.n	8004d42 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a1a      	ldr	r2, [r3, #32]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f022 0201 	bic.w	r2, r2, #1
 8004ce0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cf0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	621a      	str	r2, [r3, #32]
      break;
 8004d0e:	e017      	b.n	8004d40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6899      	ldr	r1, [r3, #8]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	f000 f814 	bl	8004d4a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004d22:	e00d      	b.n	8004d40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6899      	ldr	r1, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	461a      	mov	r2, r3
 8004d32:	f000 f839 	bl	8004da8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004d36:	e003      	b.n	8004d40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d3c:	e000      	b.n	8004d40 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004d3e:	bf00      	nop
  }

  return status;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b087      	sub	sp, #28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f023 0201 	bic.w	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 030a 	bic.w	r3, r3, #10
 8004d86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f023 0210 	bic.w	r2, r3, #16
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	031b      	lsls	r3, r3, #12
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f043 0307 	orr.w	r3, r3, #7
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	609a      	str	r2, [r3, #8]
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b087      	sub	sp, #28
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	60f8      	str	r0, [r7, #12]
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	021a      	lsls	r2, r3, #8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	609a      	str	r2, [r3, #8]
}
 8004e72:	bf00      	nop
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b087      	sub	sp, #28
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2201      	movs	r2, #1
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	401a      	ands	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e050      	b.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1c      	ldr	r2, [pc, #112]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d018      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d013      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a18      	ldr	r2, [pc, #96]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a16      	ldr	r2, [pc, #88]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10c      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800
 8004f9c:	40000c00 	.word	0x40000c00
 8004fa0:	40014000 	.word	0x40014000

08004fa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	f107 001c 	add.w	r0, r7, #28
 8004fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d122      	bne.n	8005002 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fbee 	bl	80067d8 <USB_CoreReset>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e01a      	b.n	8005038 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 fbe2 	bl	80067d8 <USB_CoreReset>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
 800502a:	e005      	b.n	8005038 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	2b01      	cmp	r3, #1
 800503c:	d10b      	bne.n	8005056 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f043 0206 	orr.w	r2, r3, #6
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005056:	7bfb      	ldrb	r3, [r7, #15]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005062:	b004      	add	sp, #16
 8005064:	4770      	bx	lr
	...

08005068 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d165      	bne.n	8005148 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4a41      	ldr	r2, [pc, #260]	; (8005184 <USB_SetTurnaroundTime+0x11c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d906      	bls.n	8005092 <USB_SetTurnaroundTime+0x2a>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a40      	ldr	r2, [pc, #256]	; (8005188 <USB_SetTurnaroundTime+0x120>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d202      	bcs.n	8005092 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800508c:	230f      	movs	r3, #15
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e062      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <USB_SetTurnaroundTime+0x120>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d306      	bcc.n	80050a8 <USB_SetTurnaroundTime+0x40>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a3b      	ldr	r2, [pc, #236]	; (800518c <USB_SetTurnaroundTime+0x124>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d202      	bcs.n	80050a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050a2:	230e      	movs	r3, #14
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e057      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4a38      	ldr	r2, [pc, #224]	; (800518c <USB_SetTurnaroundTime+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d306      	bcc.n	80050be <USB_SetTurnaroundTime+0x56>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a37      	ldr	r2, [pc, #220]	; (8005190 <USB_SetTurnaroundTime+0x128>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d202      	bcs.n	80050be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050b8:	230d      	movs	r3, #13
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e04c      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a33      	ldr	r2, [pc, #204]	; (8005190 <USB_SetTurnaroundTime+0x128>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d306      	bcc.n	80050d4 <USB_SetTurnaroundTime+0x6c>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a32      	ldr	r2, [pc, #200]	; (8005194 <USB_SetTurnaroundTime+0x12c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d802      	bhi.n	80050d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050ce:	230c      	movs	r3, #12
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e041      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a2f      	ldr	r2, [pc, #188]	; (8005194 <USB_SetTurnaroundTime+0x12c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d906      	bls.n	80050ea <USB_SetTurnaroundTime+0x82>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a2e      	ldr	r2, [pc, #184]	; (8005198 <USB_SetTurnaroundTime+0x130>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d802      	bhi.n	80050ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050e4:	230b      	movs	r3, #11
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e036      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <USB_SetTurnaroundTime+0x130>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d906      	bls.n	8005100 <USB_SetTurnaroundTime+0x98>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a29      	ldr	r2, [pc, #164]	; (800519c <USB_SetTurnaroundTime+0x134>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d802      	bhi.n	8005100 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050fa:	230a      	movs	r3, #10
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e02b      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a26      	ldr	r2, [pc, #152]	; (800519c <USB_SetTurnaroundTime+0x134>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d906      	bls.n	8005116 <USB_SetTurnaroundTime+0xae>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a25      	ldr	r2, [pc, #148]	; (80051a0 <USB_SetTurnaroundTime+0x138>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d202      	bcs.n	8005116 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005110:	2309      	movs	r3, #9
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e020      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <USB_SetTurnaroundTime+0x138>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d306      	bcc.n	800512c <USB_SetTurnaroundTime+0xc4>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4a20      	ldr	r2, [pc, #128]	; (80051a4 <USB_SetTurnaroundTime+0x13c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d802      	bhi.n	800512c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005126:	2308      	movs	r3, #8
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e015      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <USB_SetTurnaroundTime+0x13c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d906      	bls.n	8005142 <USB_SetTurnaroundTime+0xda>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <USB_SetTurnaroundTime+0x140>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d202      	bcs.n	8005142 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800513c:	2307      	movs	r3, #7
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e00a      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005142:	2306      	movs	r3, #6
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e007      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800514e:	2309      	movs	r3, #9
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e001      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005154:	2309      	movs	r3, #9
 8005156:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	00d8acbf 	.word	0x00d8acbf
 8005188:	00e4e1c0 	.word	0x00e4e1c0
 800518c:	00f42400 	.word	0x00f42400
 8005190:	01067380 	.word	0x01067380
 8005194:	011a499f 	.word	0x011a499f
 8005198:	01312cff 	.word	0x01312cff
 800519c:	014ca43f 	.word	0x014ca43f
 80051a0:	016e3600 	.word	0x016e3600
 80051a4:	01a6ab1f 	.word	0x01a6ab1f
 80051a8:	01e84800 	.word	0x01e84800

080051ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f043 0201 	orr.w	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d115      	bne.n	800523e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800521e:	2001      	movs	r0, #1
 8005220:	f7fb ff12 	bl	8001048 <HAL_Delay>
      ms++;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3301      	adds	r3, #1
 8005228:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f001 fa45 	bl	80066ba <USB_GetMode>
 8005230:	4603      	mov	r3, r0
 8005232:	2b01      	cmp	r3, #1
 8005234:	d01e      	beq.n	8005274 <USB_SetCurrentMode+0x84>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b31      	cmp	r3, #49	; 0x31
 800523a:	d9f0      	bls.n	800521e <USB_SetCurrentMode+0x2e>
 800523c:	e01a      	b.n	8005274 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d115      	bne.n	8005270 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005250:	2001      	movs	r0, #1
 8005252:	f7fb fef9 	bl	8001048 <HAL_Delay>
      ms++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f001 fa2c 	bl	80066ba <USB_GetMode>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <USB_SetCurrentMode+0x84>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b31      	cmp	r3, #49	; 0x31
 800526c:	d9f0      	bls.n	8005250 <USB_SetCurrentMode+0x60>
 800526e:	e001      	b.n	8005274 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e005      	b.n	8005280 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b32      	cmp	r3, #50	; 0x32
 8005278:	d101      	bne.n	800527e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005288:	b084      	sub	sp, #16
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	e009      	b.n	80052bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	3340      	adds	r3, #64	; 0x40
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	3301      	adds	r3, #1
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b0e      	cmp	r3, #14
 80052c0:	d9f2      	bls.n	80052a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11c      	bne.n	8005302 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d6:	f043 0302 	orr.w	r3, r3, #2
 80052da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38
 8005300:	e00b      	b.n	800531a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005306:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005320:	461a      	mov	r2, r3
 8005322:	2300      	movs	r3, #0
 8005324:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532c:	4619      	mov	r1, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005334:	461a      	mov	r2, r3
 8005336:	680b      	ldr	r3, [r1, #0]
 8005338:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	2b01      	cmp	r3, #1
 800533e:	d10c      	bne.n	800535a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005346:	2100      	movs	r1, #0
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f965 	bl	8005618 <USB_SetDevSpeed>
 800534e:	e008      	b.n	8005362 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005350:	2101      	movs	r1, #1
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f960 	bl	8005618 <USB_SetDevSpeed>
 8005358:	e003      	b.n	8005362 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800535a:	2103      	movs	r1, #3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f95b 	bl	8005618 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005362:	2110      	movs	r1, #16
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f8f3 	bl	8005550 <USB_FlushTxFifo>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f91f 	bl	80055b8 <USB_FlushRxFifo>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	461a      	mov	r2, r3
 800538c:	2300      	movs	r3, #0
 800538e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005396:	461a      	mov	r2, r3
 8005398:	2300      	movs	r3, #0
 800539a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a2:	461a      	mov	r2, r3
 80053a4:	2300      	movs	r3, #0
 80053a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	e043      	b.n	8005436 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053c4:	d118      	bne.n	80053f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d8:	461a      	mov	r2, r3
 80053da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	e013      	b.n	800540a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	461a      	mov	r2, r3
 80053f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e008      	b.n	800540a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005404:	461a      	mov	r2, r3
 8005406:	2300      	movs	r3, #0
 8005408:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005416:	461a      	mov	r2, r3
 8005418:	2300      	movs	r3, #0
 800541a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	461a      	mov	r2, r3
 800542a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800542e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3301      	adds	r3, #1
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	429a      	cmp	r2, r3
 800543c:	d3b7      	bcc.n	80053ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	e043      	b.n	80054cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800545a:	d118      	bne.n	800548e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	015a      	lsls	r2, r3, #5
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4413      	add	r3, r2
 800546a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546e:	461a      	mov	r2, r3
 8005470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e013      	b.n	80054a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005484:	461a      	mov	r2, r3
 8005486:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	e008      	b.n	80054a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	461a      	mov	r2, r3
 800549c:	2300      	movs	r3, #0
 800549e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ac:	461a      	mov	r2, r3
 80054ae:	2300      	movs	r3, #0
 80054b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	461a      	mov	r2, r3
 80054c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	3301      	adds	r3, #1
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d3b7      	bcc.n	8005444 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f043 0210 	orr.w	r2, r3, #16
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699a      	ldr	r2, [r3, #24]
 800550c:	4b0f      	ldr	r3, [pc, #60]	; (800554c <USB_DevInit+0x2c4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f043 0208 	orr.w	r2, r3, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d107      	bne.n	800553c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005534:	f043 0304 	orr.w	r3, r3, #4
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005548:	b004      	add	sp, #16
 800554a:	4770      	bx	lr
 800554c:	803c3800 	.word	0x803c3800

08005550 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <USB_FlushTxFifo+0x64>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d901      	bls.n	8005570 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e01b      	b.n	80055a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	daf2      	bge.n	800555e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	019b      	lsls	r3, r3, #6
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	3301      	adds	r3, #1
 800558c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a08      	ldr	r2, [pc, #32]	; (80055b4 <USB_FlushTxFifo+0x64>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e006      	b.n	80055a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d0f0      	beq.n	8005588 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	00030d40 	.word	0x00030d40

080055b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3301      	adds	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a11      	ldr	r2, [pc, #68]	; (8005614 <USB_FlushRxFifo+0x5c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d901      	bls.n	80055d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e018      	b.n	8005608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	daf2      	bge.n	80055c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2210      	movs	r2, #16
 80055e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3301      	adds	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4a08      	ldr	r2, [pc, #32]	; (8005614 <USB_FlushRxFifo+0x5c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d901      	bls.n	80055fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e006      	b.n	8005608 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f003 0310 	and.w	r3, r3, #16
 8005602:	2b10      	cmp	r3, #16
 8005604:	d0f0      	beq.n	80055e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	00030d40 	.word	0x00030d40

08005618 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	78fb      	ldrb	r3, [r7, #3]
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800564a:	b480      	push	{r7}
 800564c:	b087      	sub	sp, #28
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 0306 	and.w	r3, r3, #6
 8005662:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800566a:	2300      	movs	r3, #0
 800566c:	75fb      	strb	r3, [r7, #23]
 800566e:	e00a      	b.n	8005686 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d002      	beq.n	800567c <USB_GetDevSpeed+0x32>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b06      	cmp	r3, #6
 800567a:	d102      	bne.n	8005682 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800567c:	2302      	movs	r3, #2
 800567e:	75fb      	strb	r3, [r7, #23]
 8005680:	e001      	b.n	8005686 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005682:	230f      	movs	r3, #15
 8005684:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
}
 8005688:	4618      	mov	r0, r3
 800568a:	371c      	adds	r7, #28
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d13a      	bne.n	8005726 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	2101      	movs	r1, #1
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	68f9      	ldr	r1, [r7, #12]
 80056ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d155      	bne.n	8005794 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	791b      	ldrb	r3, [r3, #4]
 8005702:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005704:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	059b      	lsls	r3, r3, #22
 800570a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800570c:	4313      	orrs	r3, r2
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	0151      	lsls	r1, r2, #5
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	440a      	add	r2, r1
 8005716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	e036      	b.n	8005794 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572c:	69da      	ldr	r2, [r3, #28]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	2101      	movs	r1, #1
 8005738:	fa01 f303 	lsl.w	r3, r1, r3
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005744:	4313      	orrs	r3, r2
 8005746:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d11a      	bne.n	8005794 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	791b      	ldrb	r3, [r3, #4]
 8005778:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800577a:	430b      	orrs	r3, r1
 800577c:	4313      	orrs	r3, r2
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005792:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d161      	bne.n	8005884 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d6:	d11f      	bne.n	8005818 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	0151      	lsls	r1, r2, #5
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	440a      	add	r2, r1
 80057ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005812:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005816:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	2101      	movs	r1, #1
 800582a:	fa01 f303 	lsl.w	r3, r1, r3
 800582e:	b29b      	uxth	r3, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005838:	4013      	ands	r3, r2
 800583a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	2101      	movs	r1, #1
 800584e:	fa01 f303 	lsl.w	r3, r1, r3
 8005852:	b29b      	uxth	r3, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	68f9      	ldr	r1, [r7, #12]
 8005858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800585c:	4013      	ands	r3, r2
 800585e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	0159      	lsls	r1, r3, #5
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	440b      	add	r3, r1
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	4619      	mov	r1, r3
 800587c:	4b35      	ldr	r3, [pc, #212]	; (8005954 <USB_DeactivateEndpoint+0x1b0>)
 800587e:	4013      	ands	r3, r2
 8005880:	600b      	str	r3, [r1, #0]
 8005882:	e060      	b.n	8005946 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005896:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800589a:	d11f      	bne.n	80058dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 030f 	and.w	r3, r3, #15
 80058ec:	2101      	movs	r1, #1
 80058ee:	fa01 f303 	lsl.w	r3, r1, r3
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	43db      	mvns	r3, r3
 80058f6:	68f9      	ldr	r1, [r7, #12]
 80058f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058fc:	4013      	ands	r3, r2
 80058fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	2101      	movs	r1, #1
 8005912:	fa01 f303 	lsl.w	r3, r1, r3
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	43db      	mvns	r3, r3
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005920:	4013      	ands	r3, r2
 8005922:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	0159      	lsls	r1, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	440b      	add	r3, r1
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	4619      	mov	r1, r3
 8005940:	4b05      	ldr	r3, [pc, #20]	; (8005958 <USB_DeactivateEndpoint+0x1b4>)
 8005942:	4013      	ands	r3, r2
 8005944:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	ec337800 	.word	0xec337800
 8005958:	eff37800 	.word	0xeff37800

0800595c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08a      	sub	sp, #40	; 0x28
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b01      	cmp	r3, #1
 800597a:	f040 815c 	bne.w	8005c36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d132      	bne.n	80059ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059e4:	0cdb      	lsrs	r3, r3, #19
 80059e6:	04db      	lsls	r3, r3, #19
 80059e8:	6113      	str	r3, [r2, #16]
 80059ea:	e074      	b.n	8005ad6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a06:	0cdb      	lsrs	r3, r3, #19
 8005a08:	04db      	lsls	r3, r3, #19
 8005a0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a26:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a2a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	6999      	ldr	r1, [r3, #24]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	440b      	add	r3, r1
 8005a48:	1e59      	subs	r1, r3, #1
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a52:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a54:	4b9d      	ldr	r3, [pc, #628]	; (8005ccc <USB_EPStartXfer+0x370>)
 8005a56:	400b      	ands	r3, r1
 8005a58:	69b9      	ldr	r1, [r7, #24]
 8005a5a:	0148      	lsls	r0, r1, #5
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	4401      	add	r1, r0
 8005a60:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a64:	4313      	orrs	r3, r2
 8005a66:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a7e:	69b9      	ldr	r1, [r7, #24]
 8005a80:	0148      	lsls	r0, r1, #5
 8005a82:	69f9      	ldr	r1, [r7, #28]
 8005a84:	4401      	add	r1, r0
 8005a86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	791b      	ldrb	r3, [r3, #4]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d11f      	bne.n	8005ad6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ab4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ad4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d14b      	bne.n	8005b74 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	461a      	mov	r2, r3
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	791b      	ldrb	r3, [r3, #4]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d128      	bne.n	8005b52 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d110      	bne.n	8005b32 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69ba      	ldr	r2, [r7, #24]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e00f      	b.n	8005b52 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b50:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	e133      	b.n	8005ddc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69ba      	ldr	r2, [r7, #24]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b92:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	791b      	ldrb	r3, [r3, #4]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d015      	beq.n	8005bc8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 811b 	beq.w	8005ddc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbc:	69f9      	ldr	r1, [r7, #28]
 8005bbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	634b      	str	r3, [r1, #52]	; 0x34
 8005bc6:	e109      	b.n	8005ddc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d110      	bne.n	8005bfa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	0151      	lsls	r1, r2, #5
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	440a      	add	r2, r1
 8005bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	e00f      	b.n	8005c1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	69fa      	ldr	r2, [r7, #28]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	6919      	ldr	r1, [r3, #16]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781a      	ldrb	r2, [r3, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	b298      	uxth	r0, r3
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 fade 	bl	80061f0 <USB_WritePacket>
 8005c34:	e0d2      	b.n	8005ddc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c50:	0cdb      	lsrs	r3, r3, #19
 8005c52:	04db      	lsls	r3, r3, #19
 8005c54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	69fa      	ldr	r2, [r7, #28]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d126      	bne.n	8005cd0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	015a      	lsls	r2, r3, #5
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	4413      	add	r3, r2
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c98:	69b9      	ldr	r1, [r7, #24]
 8005c9a:	0148      	lsls	r0, r1, #5
 8005c9c:	69f9      	ldr	r1, [r7, #28]
 8005c9e:	4401      	add	r1, r0
 8005ca0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cc6:	6113      	str	r3, [r2, #16]
 8005cc8:	e03a      	b.n	8005d40 <USB_EPStartXfer+0x3e4>
 8005cca:	bf00      	nop
 8005ccc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	699a      	ldr	r2, [r3, #24]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	1e5a      	subs	r2, r3, #1
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	8afa      	ldrh	r2, [r7, #22]
 8005cec:	fb03 f202 	mul.w	r2, r3, r2
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	8afb      	ldrh	r3, [r7, #22]
 8005d04:	04d9      	lsls	r1, r3, #19
 8005d06:	4b38      	ldr	r3, [pc, #224]	; (8005de8 <USB_EPStartXfer+0x48c>)
 8005d08:	400b      	ands	r3, r1
 8005d0a:	69b9      	ldr	r1, [r7, #24]
 8005d0c:	0148      	lsls	r0, r1, #5
 8005d0e:	69f9      	ldr	r1, [r7, #28]
 8005d10:	4401      	add	r1, r0
 8005d12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d16:	4313      	orrs	r3, r2
 8005d18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	69db      	ldr	r3, [r3, #28]
 8005d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d30:	69b9      	ldr	r1, [r7, #24]
 8005d32:	0148      	lsls	r0, r1, #5
 8005d34:	69f9      	ldr	r1, [r7, #28]
 8005d36:	4401      	add	r1, r0
 8005d38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d10d      	bne.n	8005d62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6919      	ldr	r1, [r3, #16]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	015a      	lsls	r2, r3, #5
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	4413      	add	r3, r2
 8005d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d5e:	460a      	mov	r2, r1
 8005d60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	791b      	ldrb	r3, [r3, #4]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d128      	bne.n	8005dbc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d110      	bne.n	8005d9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	e00f      	b.n	8005dbc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005dda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3720      	adds	r7, #32
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	1ff80000 	.word	0x1ff80000

08005dec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	4613      	mov	r3, r2
 8005df8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	f040 80ce 	bne.w	8005faa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d132      	bne.n	8005e7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e74:	0cdb      	lsrs	r3, r3, #19
 8005e76:	04db      	lsls	r3, r3, #19
 8005e78:	6113      	str	r3, [r2, #16]
 8005e7a:	e04e      	b.n	8005f1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e96:	0cdb      	lsrs	r3, r3, #19
 8005e98:	04db      	lsls	r3, r3, #19
 8005e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005eba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ebe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d903      	bls.n	8005ed4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ef2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f00:	691a      	ldr	r2, [r3, #16]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f0a:	6939      	ldr	r1, [r7, #16]
 8005f0c:	0148      	lsls	r0, r1, #5
 8005f0e:	6979      	ldr	r1, [r7, #20]
 8005f10:	4401      	add	r1, r0
 8005f12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f16:	4313      	orrs	r3, r2
 8005f18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005f1a:	79fb      	ldrb	r3, [r7, #7]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d11e      	bne.n	8005f5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d009      	beq.n	8005f3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	461a      	mov	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	e097      	b.n	800608e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	0151      	lsls	r1, r2, #5
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	440a      	add	r2, r1
 8005f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8083 	beq.w	800608e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	2101      	movs	r1, #1
 8005f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f9e:	6979      	ldr	r1, [r7, #20]
 8005fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	634b      	str	r3, [r1, #52]	; 0x34
 8005fa8:	e071      	b.n	800608e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc4:	0cdb      	lsrs	r3, r3, #19
 8005fc6:	04db      	lsls	r3, r3, #19
 8005fc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fe8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	0151      	lsls	r1, r2, #5
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	440a      	add	r2, r1
 800601c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006024:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603c:	6939      	ldr	r1, [r7, #16]
 800603e:	0148      	lsls	r0, r1, #5
 8006040:	6979      	ldr	r1, [r7, #20]
 8006042:	4401      	add	r1, r0
 8006044:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006048:	4313      	orrs	r3, r2
 800604a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800604c:	79fb      	ldrb	r3, [r7, #7]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10d      	bne.n	800606e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6919      	ldr	r1, [r3, #16]
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	460a      	mov	r2, r1
 800606c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	0151      	lsls	r1, r2, #5
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	440a      	add	r2, r1
 8006084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006088:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800608c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	785b      	ldrb	r3, [r3, #1]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d14a      	bne.n	8006150 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060d2:	f040 8086 	bne.w	80061e2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	7812      	ldrb	r2, [r2, #0]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060f8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	7812      	ldrb	r2, [r2, #0]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800611c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3301      	adds	r3, #1
 8006122:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f242 7210 	movw	r2, #10000	; 0x2710
 800612a:	4293      	cmp	r3, r2
 800612c:	d902      	bls.n	8006134 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	75fb      	strb	r3, [r7, #23]
          break;
 8006132:	e056      	b.n	80061e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800614c:	d0e7      	beq.n	800611e <USB_EPStopXfer+0x82>
 800614e:	e048      	b.n	80061e2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006168:	d13b      	bne.n	80061e2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006188:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800618c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	0151      	lsls	r1, r2, #5
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	440a      	add	r2, r1
 80061a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80061be:	4293      	cmp	r3, r2
 80061c0:	d902      	bls.n	80061c8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
          break;
 80061c6:	e00c      	b.n	80061e2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061e0:	d0e7      	beq.n	80061b2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	; 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4611      	mov	r1, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	460b      	mov	r3, r1
 8006200:	71fb      	strb	r3, [r7, #7]
 8006202:	4613      	mov	r3, r2
 8006204:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800620e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006212:	2b00      	cmp	r3, #0
 8006214:	d123      	bne.n	800625e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006216:	88bb      	ldrh	r3, [r7, #4]
 8006218:	3303      	adds	r3, #3
 800621a:	089b      	lsrs	r3, r3, #2
 800621c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800621e:	2300      	movs	r3, #0
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e018      	b.n	8006256 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006224:	79fb      	ldrb	r3, [r7, #7]
 8006226:	031a      	lsls	r2, r3, #12
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	4413      	add	r3, r2
 800622c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006230:	461a      	mov	r2, r3
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	3301      	adds	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	3301      	adds	r3, #1
 8006248:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	3301      	adds	r3, #1
 800624e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	3301      	adds	r3, #1
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	429a      	cmp	r2, r3
 800625c:	d3e2      	bcc.n	8006224 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3724      	adds	r7, #36	; 0x24
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800626c:	b480      	push	{r7}
 800626e:	b08b      	sub	sp, #44	; 0x2c
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	089b      	lsrs	r3, r3, #2
 8006286:	b29b      	uxth	r3, r3
 8006288:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800628a:	88fb      	ldrh	r3, [r7, #6]
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006292:	2300      	movs	r3, #0
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	e014      	b.n	80062c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	3301      	adds	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	3301      	adds	r3, #1
 80062b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	3301      	adds	r3, #1
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	3301      	adds	r3, #1
 80062c0:	623b      	str	r3, [r7, #32]
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d3e6      	bcc.n	8006298 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062ca:	8bfb      	ldrh	r3, [r7, #30]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01e      	beq.n	800630e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062da:	461a      	mov	r2, r3
 80062dc:	f107 0310 	add.w	r3, r7, #16
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	fa22 f303 	lsr.w	r3, r2, r3
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	701a      	strb	r2, [r3, #0]
      i++;
 80062f6:	6a3b      	ldr	r3, [r7, #32]
 80062f8:	3301      	adds	r3, #1
 80062fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	3301      	adds	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006302:	8bfb      	ldrh	r3, [r7, #30]
 8006304:	3b01      	subs	r3, #1
 8006306:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006308:	8bfb      	ldrh	r3, [r7, #30]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1ea      	bne.n	80062e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800630e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006310:	4618      	mov	r0, r3
 8006312:	372c      	adds	r7, #44	; 0x2c
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	785b      	ldrb	r3, [r3, #1]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d12c      	bne.n	8006392 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	db12      	blt.n	8006370 <USB_EPSetStall+0x54>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00f      	beq.n	8006370 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4413      	add	r3, r2
 8006358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68ba      	ldr	r2, [r7, #8]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	440a      	add	r2, r1
 8006366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800636e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	0151      	lsls	r1, r2, #5
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	440a      	add	r2, r1
 8006386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	e02b      	b.n	80063ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db12      	blt.n	80063ca <USB_EPSetStall+0xae>
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00f      	beq.n	80063ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	015a      	lsls	r2, r3, #5
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4413      	add	r3, r2
 80063b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	0151      	lsls	r1, r2, #5
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	440a      	add	r2, r1
 80063c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	0151      	lsls	r1, r2, #5
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	440a      	add	r2, r1
 80063e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d128      	bne.n	8006466 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006432:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	791b      	ldrb	r3, [r3, #4]
 8006438:	2b03      	cmp	r3, #3
 800643a:	d003      	beq.n	8006444 <USB_EPClearStall+0x4c>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	791b      	ldrb	r3, [r3, #4]
 8006440:	2b02      	cmp	r3, #2
 8006442:	d138      	bne.n	80064b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	0151      	lsls	r1, r2, #5
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	440a      	add	r2, r1
 800645a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	e027      	b.n	80064b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	0151      	lsls	r1, r2, #5
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	440a      	add	r2, r1
 800647c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006480:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006484:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	791b      	ldrb	r3, [r3, #4]
 800648a:	2b03      	cmp	r3, #3
 800648c:	d003      	beq.n	8006496 <USB_EPClearStall+0x9e>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	791b      	ldrb	r3, [r3, #4]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d10f      	bne.n	80064b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	0151      	lsls	r1, r2, #5
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	440a      	add	r2, r1
 80064ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3714      	adds	r7, #20
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80064f8:	68f9      	ldr	r1, [r7, #12]
 80064fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064fe:	4313      	orrs	r3, r2
 8006500:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800653e:	f023 0302 	bic.w	r3, r3, #2
 8006542:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006552:	b480      	push	{r7}
 8006554:	b085      	sub	sp, #20
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800656c:	f023 0303 	bic.w	r3, r3, #3
 8006570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006580:	f043 0302 	orr.w	r3, r3, #2
 8006584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4013      	ands	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065ac:	68fb      	ldr	r3, [r7, #12]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b085      	sub	sp, #20
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	4013      	ands	r3, r2
 80065dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	0c1b      	lsrs	r3, r3, #16
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	4013      	ands	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	b29b      	uxth	r3, r3
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	4013      	ands	r3, r2
 800664e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006650:	68bb      	ldr	r3, [r7, #8]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	fa22 f303 	lsr.w	r3, r2, r3
 800668e:	01db      	lsls	r3, r3, #7
 8006690:	b2db      	uxtb	r3, r3
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4013      	ands	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066ac:	68bb      	ldr	r3, [r7, #8]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0301 	and.w	r3, r3, #1
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80066f4:	f023 0307 	bic.w	r3, r3, #7
 80066f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	460b      	mov	r3, r1
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	333c      	adds	r3, #60	; 0x3c
 8006732:	3304      	adds	r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4a26      	ldr	r2, [pc, #152]	; (80067d4 <USB_EP0_OutStart+0xb8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d90a      	bls.n	8006756 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800674c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006750:	d101      	bne.n	8006756 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e037      	b.n	80067c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	461a      	mov	r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006774:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006784:	f043 0318 	orr.w	r3, r3, #24
 8006788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	697a      	ldr	r2, [r7, #20]
 8006794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006798:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800679c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d10f      	bne.n	80067c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80067c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	4f54300a 	.word	0x4f54300a

080067d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a13      	ldr	r2, [pc, #76]	; (800683c <USB_CoreReset+0x64>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e01b      	b.n	800682e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	daf2      	bge.n	80067e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f043 0201 	orr.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3301      	adds	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4a09      	ldr	r2, [pc, #36]	; (800683c <USB_CoreReset+0x64>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d901      	bls.n	8006820 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e006      	b.n	800682e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	d0f0      	beq.n	800680e <USB_CoreReset+0x36>

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	00030d40 	.word	0x00030d40

08006840 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800684c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006850:	f002 fc94 	bl	800917c <USBD_static_malloc>
 8006854:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d109      	bne.n	8006870 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	32b0      	adds	r2, #176	; 0xb0
 8006866:	2100      	movs	r1, #0
 8006868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800686c:	2302      	movs	r3, #2
 800686e:	e0d4      	b.n	8006a1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006870:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006874:	2100      	movs	r1, #0
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f002 fce8 	bl	800924c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	32b0      	adds	r2, #176	; 0xb0
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	32b0      	adds	r2, #176	; 0xb0
 8006896:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	7c1b      	ldrb	r3, [r3, #16]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d138      	bne.n	800691a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80068a8:	4b5e      	ldr	r3, [pc, #376]	; (8006a24 <USBD_CDC_Init+0x1e4>)
 80068aa:	7819      	ldrb	r1, [r3, #0]
 80068ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b0:	2202      	movs	r2, #2
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f002 fb3f 	bl	8008f36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80068b8:	4b5a      	ldr	r3, [pc, #360]	; (8006a24 <USBD_CDC_Init+0x1e4>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f003 020f 	and.w	r2, r3, #15
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	3324      	adds	r3, #36	; 0x24
 80068ce:	2201      	movs	r2, #1
 80068d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80068d2:	4b55      	ldr	r3, [pc, #340]	; (8006a28 <USBD_CDC_Init+0x1e8>)
 80068d4:	7819      	ldrb	r1, [r3, #0]
 80068d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068da:	2202      	movs	r2, #2
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f002 fb2a 	bl	8008f36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80068e2:	4b51      	ldr	r3, [pc, #324]	; (8006a28 <USBD_CDC_Init+0x1e8>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	f003 020f 	and.w	r2, r3, #15
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068fa:	2201      	movs	r2, #1
 80068fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068fe:	4b4b      	ldr	r3, [pc, #300]	; (8006a2c <USBD_CDC_Init+0x1ec>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	f003 020f 	and.w	r2, r3, #15
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	3326      	adds	r3, #38	; 0x26
 8006914:	2210      	movs	r2, #16
 8006916:	801a      	strh	r2, [r3, #0]
 8006918:	e035      	b.n	8006986 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800691a:	4b42      	ldr	r3, [pc, #264]	; (8006a24 <USBD_CDC_Init+0x1e4>)
 800691c:	7819      	ldrb	r1, [r3, #0]
 800691e:	2340      	movs	r3, #64	; 0x40
 8006920:	2202      	movs	r2, #2
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f002 fb07 	bl	8008f36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006928:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <USBD_CDC_Init+0x1e4>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	f003 020f 	and.w	r2, r3, #15
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	3324      	adds	r3, #36	; 0x24
 800693e:	2201      	movs	r2, #1
 8006940:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006942:	4b39      	ldr	r3, [pc, #228]	; (8006a28 <USBD_CDC_Init+0x1e8>)
 8006944:	7819      	ldrb	r1, [r3, #0]
 8006946:	2340      	movs	r3, #64	; 0x40
 8006948:	2202      	movs	r2, #2
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f002 faf3 	bl	8008f36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006950:	4b35      	ldr	r3, [pc, #212]	; (8006a28 <USBD_CDC_Init+0x1e8>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	f003 020f 	and.w	r2, r3, #15
 8006958:	6879      	ldr	r1, [r7, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	440b      	add	r3, r1
 8006964:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006968:	2201      	movs	r2, #1
 800696a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800696c:	4b2f      	ldr	r3, [pc, #188]	; (8006a2c <USBD_CDC_Init+0x1ec>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f003 020f 	and.w	r2, r3, #15
 8006974:	6879      	ldr	r1, [r7, #4]
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	440b      	add	r3, r1
 8006980:	3326      	adds	r3, #38	; 0x26
 8006982:	2210      	movs	r2, #16
 8006984:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006986:	4b29      	ldr	r3, [pc, #164]	; (8006a2c <USBD_CDC_Init+0x1ec>)
 8006988:	7819      	ldrb	r1, [r3, #0]
 800698a:	2308      	movs	r3, #8
 800698c:	2203      	movs	r2, #3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f002 fad1 	bl	8008f36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006994:	4b25      	ldr	r3, [pc, #148]	; (8006a2c <USBD_CDC_Init+0x1ec>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 020f 	and.w	r2, r3, #15
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	3324      	adds	r3, #36	; 0x24
 80069aa:	2201      	movs	r2, #1
 80069ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	33b0      	adds	r3, #176	; 0xb0
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80069e4:	2302      	movs	r3, #2
 80069e6:	e018      	b.n	8006a1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7c1b      	ldrb	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10a      	bne.n	8006a06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069f0:	4b0d      	ldr	r3, [pc, #52]	; (8006a28 <USBD_CDC_Init+0x1e8>)
 80069f2:	7819      	ldrb	r1, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 fb88 	bl	8009114 <USBD_LL_PrepareReceive>
 8006a04:	e008      	b.n	8006a18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a06:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <USBD_CDC_Init+0x1e8>)
 8006a08:	7819      	ldrb	r1, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a10:	2340      	movs	r3, #64	; 0x40
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f002 fb7e 	bl	8009114 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000093 	.word	0x20000093
 8006a28:	20000094 	.word	0x20000094
 8006a2c:	20000095 	.word	0x20000095

08006a30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006a3c:	4b3a      	ldr	r3, [pc, #232]	; (8006b28 <USBD_CDC_DeInit+0xf8>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f002 fa9d 	bl	8008f82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006a48:	4b37      	ldr	r3, [pc, #220]	; (8006b28 <USBD_CDC_DeInit+0xf8>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	f003 020f 	and.w	r2, r3, #15
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	4613      	mov	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	440b      	add	r3, r1
 8006a5c:	3324      	adds	r3, #36	; 0x24
 8006a5e:	2200      	movs	r2, #0
 8006a60:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006a62:	4b32      	ldr	r3, [pc, #200]	; (8006b2c <USBD_CDC_DeInit+0xfc>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f002 fa8a 	bl	8008f82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006a6e:	4b2f      	ldr	r3, [pc, #188]	; (8006b2c <USBD_CDC_DeInit+0xfc>)
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	f003 020f 	and.w	r2, r3, #15
 8006a76:	6879      	ldr	r1, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a86:	2200      	movs	r2, #0
 8006a88:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006a8a:	4b29      	ldr	r3, [pc, #164]	; (8006b30 <USBD_CDC_DeInit+0x100>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f002 fa76 	bl	8008f82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006a96:	4b26      	ldr	r3, [pc, #152]	; (8006b30 <USBD_CDC_DeInit+0x100>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	f003 020f 	and.w	r2, r3, #15
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	3324      	adds	r3, #36	; 0x24
 8006aac:	2200      	movs	r2, #0
 8006aae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006ab0:	4b1f      	ldr	r3, [pc, #124]	; (8006b30 <USBD_CDC_DeInit+0x100>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f003 020f 	and.w	r2, r3, #15
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3326      	adds	r3, #38	; 0x26
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	32b0      	adds	r2, #176	; 0xb0
 8006ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01f      	beq.n	8006b1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	33b0      	adds	r3, #176	; 0xb0
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	32b0      	adds	r2, #176	; 0xb0
 8006afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f002 fb4a 	bl	8009198 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	32b0      	adds	r2, #176	; 0xb0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000093 	.word	0x20000093
 8006b2c:	20000094 	.word	0x20000094
 8006b30:	20000095 	.word	0x20000095

08006b34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	32b0      	adds	r2, #176	; 0xb0
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e0bf      	b.n	8006ce4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d050      	beq.n	8006c12 <USBD_CDC_Setup+0xde>
 8006b70:	2b20      	cmp	r3, #32
 8006b72:	f040 80af 	bne.w	8006cd4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	88db      	ldrh	r3, [r3, #6]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d03a      	beq.n	8006bf4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	b25b      	sxtb	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da1b      	bge.n	8006bc0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	33b0      	adds	r3, #176	; 0xb0
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006b9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	88d2      	ldrh	r2, [r2, #6]
 8006ba4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	88db      	ldrh	r3, [r3, #6]
 8006baa:	2b07      	cmp	r3, #7
 8006bac:	bf28      	it	cs
 8006bae:	2307      	movcs	r3, #7
 8006bb0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	89fa      	ldrh	r2, [r7, #14]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 fd89 	bl	80086d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006bbe:	e090      	b.n	8006ce2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	785a      	ldrb	r2, [r3, #1]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	88db      	ldrh	r3, [r3, #6]
 8006bce:	2b3f      	cmp	r3, #63	; 0x3f
 8006bd0:	d803      	bhi.n	8006bda <USBD_CDC_Setup+0xa6>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	88db      	ldrh	r3, [r3, #6]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	e000      	b.n	8006bdc <USBD_CDC_Setup+0xa8>
 8006bda:	2240      	movs	r2, #64	; 0x40
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006be2:	6939      	ldr	r1, [r7, #16]
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006bea:	461a      	mov	r2, r3
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f001 fd9b 	bl	8008728 <USBD_CtlPrepareRx>
      break;
 8006bf2:	e076      	b.n	8006ce2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	33b0      	adds	r3, #176	; 0xb0
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	7850      	ldrb	r0, [r2, #1]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	4798      	blx	r3
      break;
 8006c10:	e067      	b.n	8006ce2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b0b      	cmp	r3, #11
 8006c18:	d851      	bhi.n	8006cbe <USBD_CDC_Setup+0x18a>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <USBD_CDC_Setup+0xec>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c51 	.word	0x08006c51
 8006c24:	08006ccd 	.word	0x08006ccd
 8006c28:	08006cbf 	.word	0x08006cbf
 8006c2c:	08006cbf 	.word	0x08006cbf
 8006c30:	08006cbf 	.word	0x08006cbf
 8006c34:	08006cbf 	.word	0x08006cbf
 8006c38:	08006cbf 	.word	0x08006cbf
 8006c3c:	08006cbf 	.word	0x08006cbf
 8006c40:	08006cbf 	.word	0x08006cbf
 8006c44:	08006cbf 	.word	0x08006cbf
 8006c48:	08006c7b 	.word	0x08006c7b
 8006c4c:	08006ca5 	.word	0x08006ca5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d107      	bne.n	8006c6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c5c:	f107 030a 	add.w	r3, r7, #10
 8006c60:	2202      	movs	r2, #2
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f001 fd33 	bl	80086d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c6a:	e032      	b.n	8006cd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fcbd 	bl	80085ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006c74:	2303      	movs	r3, #3
 8006c76:	75fb      	strb	r3, [r7, #23]
          break;
 8006c78:	e02b      	b.n	8006cd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d107      	bne.n	8006c96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006c86:	f107 030d 	add.w	r3, r7, #13
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fd1e 	bl	80086d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c94:	e01d      	b.n	8006cd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 fca8 	bl	80085ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ca2:	e016      	b.n	8006cd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d00f      	beq.n	8006cd0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fc9b 	bl	80085ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cbc:	e008      	b.n	8006cd0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fc94 	bl	80085ee <USBD_CtlError>
          ret = USBD_FAIL;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cca:	e002      	b.n	8006cd2 <USBD_CDC_Setup+0x19e>
          break;
 8006ccc:	bf00      	nop
 8006cce:	e008      	b.n	8006ce2 <USBD_CDC_Setup+0x1ae>
          break;
 8006cd0:	bf00      	nop
      }
      break;
 8006cd2:	e006      	b.n	8006ce2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fc89 	bl	80085ee <USBD_CtlError>
      ret = USBD_FAIL;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce0:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32b0      	adds	r2, #176	; 0xb0
 8006d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e065      	b.n	8006de2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	32b0      	adds	r2, #176	; 0xb0
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	440b      	add	r3, r1
 8006d38:	3318      	adds	r3, #24
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d02f      	beq.n	8006da0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	f003 020f 	and.w	r2, r3, #15
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	3318      	adds	r3, #24
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	f003 010f 	and.w	r1, r3, #15
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	440b      	add	r3, r1
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4403      	add	r3, r0
 8006d68:	3348      	adds	r3, #72	; 0x48
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006d70:	fb01 f303 	mul.w	r3, r1, r3
 8006d74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d112      	bne.n	8006da0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3318      	adds	r3, #24
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d92:	78f9      	ldrb	r1, [r7, #3]
 8006d94:	2300      	movs	r3, #0
 8006d96:	2200      	movs	r2, #0
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f002 f99a 	bl	80090d2 <USBD_LL_Transmit>
 8006d9e:	e01f      	b.n	8006de0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	33b0      	adds	r3, #176	; 0xb0
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d010      	beq.n	8006de0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	33b0      	adds	r3, #176	; 0xb0
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ddc:	78fa      	ldrb	r2, [r7, #3]
 8006dde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32b0      	adds	r2, #176	; 0xb0
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	32b0      	adds	r2, #176	; 0xb0
 8006e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e01a      	b.n	8006e52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e1c:	78fb      	ldrb	r3, [r7, #3]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 f998 	bl	8009156 <USBD_LL_GetRxDataSize>
 8006e26:	4602      	mov	r2, r0
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	33b0      	adds	r3, #176	; 0xb0
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	32b0      	adds	r2, #176	; 0xb0
 8006e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e025      	b.n	8006ec8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	33b0      	adds	r3, #176	; 0xb0
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01a      	beq.n	8006ec6 <USBD_CDC_EP0_RxReady+0x6c>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e96:	2bff      	cmp	r3, #255	; 0xff
 8006e98:	d015      	beq.n	8006ec6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	33b0      	adds	r3, #176	; 0xb0
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	4413      	add	r3, r2
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006eb2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006eba:	b292      	uxth	r2, r2
 8006ebc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	22ff      	movs	r2, #255	; 0xff
 8006ec2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ed8:	2182      	movs	r1, #130	; 0x82
 8006eda:	4818      	ldr	r0, [pc, #96]	; (8006f3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006edc:	f000 fd4f 	bl	800797e <USBD_GetEpDesc>
 8006ee0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	4815      	ldr	r0, [pc, #84]	; (8006f3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ee6:	f000 fd4a 	bl	800797e <USBD_GetEpDesc>
 8006eea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006eec:	2181      	movs	r1, #129	; 0x81
 8006eee:	4813      	ldr	r0, [pc, #76]	; (8006f3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ef0:	f000 fd45 	bl	800797e <USBD_GetEpDesc>
 8006ef4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2210      	movs	r2, #16
 8006f00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d006      	beq.n	8006f16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f10:	711a      	strb	r2, [r3, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d006      	beq.n	8006f2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f24:	711a      	strb	r2, [r3, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2243      	movs	r2, #67	; 0x43
 8006f2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000050 	.word	0x20000050

08006f40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f48:	2182      	movs	r1, #130	; 0x82
 8006f4a:	4818      	ldr	r0, [pc, #96]	; (8006fac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f4c:	f000 fd17 	bl	800797e <USBD_GetEpDesc>
 8006f50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f52:	2101      	movs	r1, #1
 8006f54:	4815      	ldr	r0, [pc, #84]	; (8006fac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f56:	f000 fd12 	bl	800797e <USBD_GetEpDesc>
 8006f5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f5c:	2181      	movs	r1, #129	; 0x81
 8006f5e:	4813      	ldr	r0, [pc, #76]	; (8006fac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006f60:	f000 fd0d 	bl	800797e <USBD_GetEpDesc>
 8006f64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2210      	movs	r2, #16
 8006f70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d006      	beq.n	8006f86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	711a      	strb	r2, [r3, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f042 0202 	orr.w	r2, r2, #2
 8006f84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d006      	beq.n	8006f9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	711a      	strb	r2, [r3, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f042 0202 	orr.w	r2, r2, #2
 8006f98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2243      	movs	r2, #67	; 0x43
 8006f9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006fa0:	4b02      	ldr	r3, [pc, #8]	; (8006fac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000050 	.word	0x20000050

08006fb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fb8:	2182      	movs	r1, #130	; 0x82
 8006fba:	4818      	ldr	r0, [pc, #96]	; (800701c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fbc:	f000 fcdf 	bl	800797e <USBD_GetEpDesc>
 8006fc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fc2:	2101      	movs	r1, #1
 8006fc4:	4815      	ldr	r0, [pc, #84]	; (800701c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fc6:	f000 fcda 	bl	800797e <USBD_GetEpDesc>
 8006fca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fcc:	2181      	movs	r1, #129	; 0x81
 8006fce:	4813      	ldr	r0, [pc, #76]	; (800701c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006fd0:	f000 fcd5 	bl	800797e <USBD_GetEpDesc>
 8006fd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2210      	movs	r2, #16
 8006fe0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d006      	beq.n	8006ff6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ff0:	711a      	strb	r2, [r3, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d006      	beq.n	800700a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007004:	711a      	strb	r2, [r3, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2243      	movs	r2, #67	; 0x43
 800700e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007010:	4b02      	ldr	r3, [pc, #8]	; (800701c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000050 	.word	0x20000050

08007020 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	220a      	movs	r2, #10
 800702c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800702e:	4b03      	ldr	r3, [pc, #12]	; (800703c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	2000000c 	.word	0x2000000c

08007040 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007050:	2303      	movs	r3, #3
 8007052:	e009      	b.n	8007068 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	33b0      	adds	r3, #176	; 0xb0
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	32b0      	adds	r2, #176	; 0xb0
 800708a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800708e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007096:	2303      	movs	r3, #3
 8007098:	e008      	b.n	80070ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	371c      	adds	r7, #28
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	32b0      	adds	r2, #176	; 0xb0
 80070cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80070d8:	2303      	movs	r3, #3
 80070da:	e004      	b.n	80070e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
	...

080070f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	32b0      	adds	r2, #176	; 0xb0
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	32b0      	adds	r2, #176	; 0xb0
 800711a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007122:	2303      	movs	r3, #3
 8007124:	e025      	b.n	8007172 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800712c:	2b00      	cmp	r3, #0
 800712e:	d11f      	bne.n	8007170 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2201      	movs	r2, #1
 8007134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007138:	4b10      	ldr	r3, [pc, #64]	; (800717c <USBD_CDC_TransmitPacket+0x88>)
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	f003 020f 	and.w	r2, r3, #15
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	4613      	mov	r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4403      	add	r3, r0
 8007152:	3318      	adds	r3, #24
 8007154:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <USBD_CDC_TransmitPacket+0x88>)
 8007158:	7819      	ldrb	r1, [r3, #0]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f001 ffb3 	bl	80090d2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800716c:	2300      	movs	r3, #0
 800716e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000093 	.word	0x20000093

08007180 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	32b0      	adds	r2, #176	; 0xb0
 8007192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007196:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	32b0      	adds	r2, #176	; 0xb0
 80071a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e018      	b.n	80071e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	7c1b      	ldrb	r3, [r3, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10a      	bne.n	80071cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071b6:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <USBD_CDC_ReceivePacket+0x68>)
 80071b8:	7819      	ldrb	r1, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 ffa5 	bl	8009114 <USBD_LL_PrepareReceive>
 80071ca:	e008      	b.n	80071de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071cc:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <USBD_CDC_ReceivePacket+0x68>)
 80071ce:	7819      	ldrb	r1, [r3, #0]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071d6:	2340      	movs	r3, #64	; 0x40
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 ff9b 	bl	8009114 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	20000094 	.word	0x20000094

080071ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d101      	bne.n	8007204 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007200:	2303      	movs	r3, #3
 8007202:	e01f      	b.n	8007244 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	79fa      	ldrb	r2, [r7, #7]
 8007236:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f001 fe15 	bl	8008e68 <USBD_LL_Init>
 800723e:	4603      	mov	r3, r0
 8007240:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e025      	b.n	80072b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	32ae      	adds	r2, #174	; 0xae
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00f      	beq.n	80072a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	32ae      	adds	r2, #174	; 0xae
 800728a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	f107 020e 	add.w	r2, r7, #14
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
 8007298:	4602      	mov	r2, r0
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 fe1d 	bl	8008f00 <USBD_LL_Start>
 80072c6:	4603      	mov	r3, r0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3708      	adds	r7, #8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80072da:	4618      	mov	r0, r3
 80072dc:	370c      	adds	r7, #12
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	78fa      	ldrb	r2, [r7, #3]
 800730a:	4611      	mov	r1, r2
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	4798      	blx	r3
 8007310:	4603      	mov	r3, r0
 8007312:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	78fa      	ldrb	r2, [r7, #3]
 8007338:	4611      	mov	r1, r2
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007344:	2303      	movs	r3, #3
 8007346:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007348:	7bfb      	ldrb	r3, [r7, #15]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f001 f908 	bl	800857a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007378:	461a      	mov	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	2b02      	cmp	r3, #2
 800738c:	d01a      	beq.n	80073c4 <USBD_LL_SetupStage+0x72>
 800738e:	2b02      	cmp	r3, #2
 8007390:	d822      	bhi.n	80073d8 <USBD_LL_SetupStage+0x86>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <USBD_LL_SetupStage+0x4a>
 8007396:	2b01      	cmp	r3, #1
 8007398:	d00a      	beq.n	80073b0 <USBD_LL_SetupStage+0x5e>
 800739a:	e01d      	b.n	80073d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fb5f 	bl	8007a68 <USBD_StdDevReq>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
      break;
 80073ae:	e020      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fbc7 	bl	8007b4c <USBD_StdItfReq>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]
      break;
 80073c2:	e016      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fc29 	bl	8007c24 <USBD_StdEPReq>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
      break;
 80073d6:	e00c      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fdea 	bl	8008fc0 <USBD_LL_StallEP>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]
      break;
 80073f0:	bf00      	nop
  }

  return ret;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	460b      	mov	r3, r1
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800740e:	7afb      	ldrb	r3, [r7, #11]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d16e      	bne.n	80074f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800741a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007422:	2b03      	cmp	r3, #3
 8007424:	f040 8098 	bne.w	8007558 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	429a      	cmp	r2, r3
 8007432:	d913      	bls.n	800745c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	1ad2      	subs	r2, r2, r3
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	4293      	cmp	r3, r2
 800744c:	bf28      	it	cs
 800744e:	4613      	movcs	r3, r2
 8007450:	461a      	mov	r2, r3
 8007452:	6879      	ldr	r1, [r7, #4]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f001 f984 	bl	8008762 <USBD_CtlContinueRx>
 800745a:	e07d      	b.n	8007558 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007462:	f003 031f 	and.w	r3, r3, #31
 8007466:	2b02      	cmp	r3, #2
 8007468:	d014      	beq.n	8007494 <USBD_LL_DataOutStage+0x98>
 800746a:	2b02      	cmp	r3, #2
 800746c:	d81d      	bhi.n	80074aa <USBD_LL_DataOutStage+0xae>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d002      	beq.n	8007478 <USBD_LL_DataOutStage+0x7c>
 8007472:	2b01      	cmp	r3, #1
 8007474:	d003      	beq.n	800747e <USBD_LL_DataOutStage+0x82>
 8007476:	e018      	b.n	80074aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	75bb      	strb	r3, [r7, #22]
            break;
 800747c:	e018      	b.n	80074b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007484:	b2db      	uxtb	r3, r3
 8007486:	4619      	mov	r1, r3
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 fa5e 	bl	800794a <USBD_CoreFindIF>
 800748e:	4603      	mov	r3, r0
 8007490:	75bb      	strb	r3, [r7, #22]
            break;
 8007492:	e00d      	b.n	80074b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800749a:	b2db      	uxtb	r3, r3
 800749c:	4619      	mov	r1, r3
 800749e:	68f8      	ldr	r0, [r7, #12]
 80074a0:	f000 fa60 	bl	8007964 <USBD_CoreFindEP>
 80074a4:	4603      	mov	r3, r0
 80074a6:	75bb      	strb	r3, [r7, #22]
            break;
 80074a8:	e002      	b.n	80074b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	75bb      	strb	r3, [r7, #22]
            break;
 80074ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80074b0:	7dbb      	ldrb	r3, [r7, #22]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d119      	bne.n	80074ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d113      	bne.n	80074ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80074c2:	7dba      	ldrb	r2, [r7, #22]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	32ae      	adds	r2, #174	; 0xae
 80074c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80074d2:	7dba      	ldrb	r2, [r7, #22]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80074da:	7dba      	ldrb	r2, [r7, #22]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	32ae      	adds	r2, #174	; 0xae
 80074e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f001 f94a 	bl	8008784 <USBD_CtlSendStatus>
 80074f0:	e032      	b.n	8007558 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80074f2:	7afb      	ldrb	r3, [r7, #11]
 80074f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	4619      	mov	r1, r3
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fa31 	bl	8007964 <USBD_CoreFindEP>
 8007502:	4603      	mov	r3, r0
 8007504:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007506:	7dbb      	ldrb	r3, [r7, #22]
 8007508:	2bff      	cmp	r3, #255	; 0xff
 800750a:	d025      	beq.n	8007558 <USBD_LL_DataOutStage+0x15c>
 800750c:	7dbb      	ldrb	r3, [r7, #22]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d122      	bne.n	8007558 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d117      	bne.n	800754e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800751e:	7dba      	ldrb	r2, [r7, #22]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	32ae      	adds	r2, #174	; 0xae
 8007524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00f      	beq.n	800754e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800752e:	7dba      	ldrb	r2, [r7, #22]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007536:	7dba      	ldrb	r2, [r7, #22]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	32ae      	adds	r2, #174	; 0xae
 800753c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	7afa      	ldrb	r2, [r7, #11]
 8007544:	4611      	mov	r1, r2
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	4798      	blx	r3
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	e000      	b.n	800755a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	460b      	mov	r3, r1
 800756c:	607a      	str	r2, [r7, #4]
 800756e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d16f      	bne.n	8007656 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3314      	adds	r3, #20
 800757a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007582:	2b02      	cmp	r3, #2
 8007584:	d15a      	bne.n	800763c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	429a      	cmp	r2, r3
 8007590:	d914      	bls.n	80075bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	1ad2      	subs	r2, r2, r3
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6879      	ldr	r1, [r7, #4]
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f001 f8ac 	bl	8008706 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ae:	2300      	movs	r3, #0
 80075b0:	2200      	movs	r2, #0
 80075b2:	2100      	movs	r1, #0
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f001 fdad 	bl	8009114 <USBD_LL_PrepareReceive>
 80075ba:	e03f      	b.n	800763c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d11c      	bne.n	8007602 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d316      	bcc.n	8007602 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80075de:	429a      	cmp	r2, r3
 80075e0:	d20f      	bcs.n	8007602 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075e2:	2200      	movs	r2, #0
 80075e4:	2100      	movs	r1, #0
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f001 f88d 	bl	8008706 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075f4:	2300      	movs	r3, #0
 80075f6:	2200      	movs	r2, #0
 80075f8:	2100      	movs	r1, #0
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f001 fd8a 	bl	8009114 <USBD_LL_PrepareReceive>
 8007600:	e01c      	b.n	800763c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b03      	cmp	r3, #3
 800760c:	d10f      	bne.n	800762e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800762e:	2180      	movs	r1, #128	; 0x80
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f001 fcc5 	bl	8008fc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f001 f8b7 	bl	80087aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d03a      	beq.n	80076bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fe42 	bl	80072d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007654:	e032      	b.n	80076bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800765c:	b2db      	uxtb	r3, r3
 800765e:	4619      	mov	r1, r3
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f97f 	bl	8007964 <USBD_CoreFindEP>
 8007666:	4603      	mov	r3, r0
 8007668:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	2bff      	cmp	r3, #255	; 0xff
 800766e:	d025      	beq.n	80076bc <USBD_LL_DataInStage+0x15a>
 8007670:	7dfb      	ldrb	r3, [r7, #23]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d122      	bne.n	80076bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b03      	cmp	r3, #3
 8007680:	d11c      	bne.n	80076bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007682:	7dfa      	ldrb	r2, [r7, #23]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	32ae      	adds	r2, #174	; 0xae
 8007688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d014      	beq.n	80076bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007692:	7dfa      	ldrb	r2, [r7, #23]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800769a:	7dfa      	ldrb	r2, [r7, #23]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	32ae      	adds	r2, #174	; 0xae
 80076a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	7afa      	ldrb	r2, [r7, #11]
 80076a8:	4611      	mov	r1, r2
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	4798      	blx	r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80076b2:	7dbb      	ldrb	r3, [r7, #22]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80076b8:	7dbb      	ldrb	r3, [r7, #22]
 80076ba:	e000      	b.n	80076be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d014      	beq.n	800772c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6852      	ldr	r2, [r2, #4]
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	4611      	mov	r1, r2
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	4798      	blx	r3
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007728:	2303      	movs	r3, #3
 800772a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800772c:	2340      	movs	r3, #64	; 0x40
 800772e:	2200      	movs	r2, #0
 8007730:	2100      	movs	r1, #0
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fbff 	bl	8008f36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2240      	movs	r2, #64	; 0x40
 8007744:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007748:	2340      	movs	r3, #64	; 0x40
 800774a:	2200      	movs	r2, #0
 800774c:	2180      	movs	r1, #128	; 0x80
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f001 fbf1 	bl	8008f36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2240      	movs	r2, #64	; 0x40
 800775e:	621a      	str	r2, [r3, #32]

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	460b      	mov	r3, r1
 8007774:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800778a:	b480      	push	{r7}
 800778c:	b083      	sub	sp, #12
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007798:	b2da      	uxtb	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2204      	movs	r2, #4
 80077a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d106      	bne.n	80077d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d110      	bne.n	800781c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800780a:	69db      	ldr	r3, [r3, #28]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	32ae      	adds	r2, #174	; 0xae
 800783c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007844:	2303      	movs	r3, #3
 8007846:	e01c      	b.n	8007882 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b03      	cmp	r3, #3
 8007852:	d115      	bne.n	8007880 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	32ae      	adds	r2, #174	; 0xae
 800785e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00b      	beq.n	8007880 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	32ae      	adds	r2, #174	; 0xae
 8007872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	78fa      	ldrb	r2, [r7, #3]
 800787a:	4611      	mov	r1, r2
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3708      	adds	r7, #8
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b082      	sub	sp, #8
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	460b      	mov	r3, r1
 8007894:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	32ae      	adds	r2, #174	; 0xae
 80078a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e01c      	b.n	80078e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d115      	bne.n	80078e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	32ae      	adds	r2, #174	; 0xae
 80078c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	32ae      	adds	r2, #174	; 0xae
 80078d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	78fa      	ldrb	r2, [r7, #3]
 80078de:	4611      	mov	r1, r2
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00e      	beq.n	8007940 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	6852      	ldr	r2, [r2, #4]
 800792e:	b2d2      	uxtb	r2, r2
 8007930:	4611      	mov	r1, r2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800793c:	2303      	movs	r3, #3
 800793e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	460b      	mov	r3, r1
 8007954:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007956:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007958:	4618      	mov	r0, r3
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007970:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b086      	sub	sp, #24
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	885b      	ldrh	r3, [r3, #2]
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d920      	bls.n	80079e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80079ae:	e013      	b.n	80079d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80079b0:	f107 030a 	add.w	r3, r7, #10
 80079b4:	4619      	mov	r1, r3
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f000 f81b 	bl	80079f2 <USBD_GetNextDesc>
 80079bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	785b      	ldrb	r3, [r3, #1]
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	d108      	bne.n	80079d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	789b      	ldrb	r3, [r3, #2]
 80079ce:	78fa      	ldrb	r2, [r7, #3]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d008      	beq.n	80079e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	885b      	ldrh	r3, [r3, #2]
 80079dc:	b29a      	uxth	r2, r3
 80079de:	897b      	ldrh	r3, [r7, #10]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d8e5      	bhi.n	80079b0 <USBD_GetEpDesc+0x32>
 80079e4:	e000      	b.n	80079e8 <USBD_GetEpDesc+0x6a>
          break;
 80079e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80079e8:	693b      	ldr	r3, [r7, #16]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	881a      	ldrh	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	4413      	add	r3, r2
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	3301      	adds	r3, #1
 8007a42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007a4a:	8a3b      	ldrh	r3, [r7, #16]
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	b21a      	sxth	r2, r3
 8007a50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007a5a:	89fb      	ldrh	r3, [r7, #14]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a7e:	2b40      	cmp	r3, #64	; 0x40
 8007a80:	d005      	beq.n	8007a8e <USBD_StdDevReq+0x26>
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d857      	bhi.n	8007b36 <USBD_StdDevReq+0xce>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00f      	beq.n	8007aaa <USBD_StdDevReq+0x42>
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	d153      	bne.n	8007b36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	32ae      	adds	r2, #174	; 0xae
 8007a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	6839      	ldr	r1, [r7, #0]
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	4798      	blx	r3
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa8:	e04a      	b.n	8007b40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	785b      	ldrb	r3, [r3, #1]
 8007aae:	2b09      	cmp	r3, #9
 8007ab0:	d83b      	bhi.n	8007b2a <USBD_StdDevReq+0xc2>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <USBD_StdDevReq+0x50>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007b0d 	.word	0x08007b0d
 8007abc:	08007b21 	.word	0x08007b21
 8007ac0:	08007b2b 	.word	0x08007b2b
 8007ac4:	08007b17 	.word	0x08007b17
 8007ac8:	08007b2b 	.word	0x08007b2b
 8007acc:	08007aeb 	.word	0x08007aeb
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007b2b 	.word	0x08007b2b
 8007ad8:	08007b03 	.word	0x08007b03
 8007adc:	08007af5 	.word	0x08007af5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa3c 	bl	8007f60 <USBD_GetDescriptor>
          break;
 8007ae8:	e024      	b.n	8007b34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fba1 	bl	8008234 <USBD_SetAddress>
          break;
 8007af2:	e01f      	b.n	8007b34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fbe0 	bl	80082bc <USBD_SetConfig>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
          break;
 8007b00:	e018      	b.n	8007b34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fc83 	bl	8008410 <USBD_GetConfig>
          break;
 8007b0a:	e013      	b.n	8007b34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fcb4 	bl	800847c <USBD_GetStatus>
          break;
 8007b14:	e00e      	b.n	8007b34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b16:	6839      	ldr	r1, [r7, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fce3 	bl	80084e4 <USBD_SetFeature>
          break;
 8007b1e:	e009      	b.n	8007b34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b20:	6839      	ldr	r1, [r7, #0]
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fd07 	bl	8008536 <USBD_ClrFeature>
          break;
 8007b28:	e004      	b.n	8007b34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fd5e 	bl	80085ee <USBD_CtlError>
          break;
 8007b32:	bf00      	nop
      }
      break;
 8007b34:	e004      	b.n	8007b40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fd58 	bl	80085ee <USBD_CtlError>
      break;
 8007b3e:	bf00      	nop
  }

  return ret;
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop

08007b4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d005      	beq.n	8007b72 <USBD_StdItfReq+0x26>
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d852      	bhi.n	8007c10 <USBD_StdItfReq+0xc4>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <USBD_StdItfReq+0x26>
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d14e      	bne.n	8007c10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d840      	bhi.n	8007c02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	889b      	ldrh	r3, [r3, #4]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d836      	bhi.n	8007bf8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	889b      	ldrh	r3, [r3, #4]
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff fed9 	bl	800794a <USBD_CoreFindIF>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2bff      	cmp	r3, #255	; 0xff
 8007ba0:	d01d      	beq.n	8007bde <USBD_StdItfReq+0x92>
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d11a      	bne.n	8007bde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007ba8:	7bba      	ldrb	r2, [r7, #14]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	32ae      	adds	r2, #174	; 0xae
 8007bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00f      	beq.n	8007bd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007bb8:	7bba      	ldrb	r2, [r7, #14]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bc0:	7bba      	ldrb	r2, [r7, #14]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32ae      	adds	r2, #174	; 0xae
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007bd6:	e004      	b.n	8007be2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007bdc:	e001      	b.n	8007be2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007bde:	2303      	movs	r3, #3
 8007be0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	88db      	ldrh	r3, [r3, #6]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d110      	bne.n	8007c0c <USBD_StdItfReq+0xc0>
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10d      	bne.n	8007c0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fdc7 	bl	8008784 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007bf6:	e009      	b.n	8007c0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fcf7 	bl	80085ee <USBD_CtlError>
          break;
 8007c00:	e004      	b.n	8007c0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fcf2 	bl	80085ee <USBD_CtlError>
          break;
 8007c0a:	e000      	b.n	8007c0e <USBD_StdItfReq+0xc2>
          break;
 8007c0c:	bf00      	nop
      }
      break;
 8007c0e:	e004      	b.n	8007c1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c10:	6839      	ldr	r1, [r7, #0]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fceb 	bl	80085ee <USBD_CtlError>
      break;
 8007c18:	bf00      	nop
  }

  return ret;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	889b      	ldrh	r3, [r3, #4]
 8007c36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c40:	2b40      	cmp	r3, #64	; 0x40
 8007c42:	d007      	beq.n	8007c54 <USBD_StdEPReq+0x30>
 8007c44:	2b40      	cmp	r3, #64	; 0x40
 8007c46:	f200 817f 	bhi.w	8007f48 <USBD_StdEPReq+0x324>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d02a      	beq.n	8007ca4 <USBD_StdEPReq+0x80>
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	f040 817a 	bne.w	8007f48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007c54:	7bbb      	ldrb	r3, [r7, #14]
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff fe83 	bl	8007964 <USBD_CoreFindEP>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c62:	7b7b      	ldrb	r3, [r7, #13]
 8007c64:	2bff      	cmp	r3, #255	; 0xff
 8007c66:	f000 8174 	beq.w	8007f52 <USBD_StdEPReq+0x32e>
 8007c6a:	7b7b      	ldrb	r3, [r7, #13]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	f040 8170 	bne.w	8007f52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007c72:	7b7a      	ldrb	r2, [r7, #13]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007c7a:	7b7a      	ldrb	r2, [r7, #13]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	32ae      	adds	r2, #174	; 0xae
 8007c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8163 	beq.w	8007f52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007c8c:	7b7a      	ldrb	r2, [r7, #13]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	32ae      	adds	r2, #174	; 0xae
 8007c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ca2:	e156      	b.n	8007f52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d008      	beq.n	8007cbe <USBD_StdEPReq+0x9a>
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	f300 8145 	bgt.w	8007f3c <USBD_StdEPReq+0x318>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 809b 	beq.w	8007dee <USBD_StdEPReq+0x1ca>
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d03c      	beq.n	8007d36 <USBD_StdEPReq+0x112>
 8007cbc:	e13e      	b.n	8007f3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d002      	beq.n	8007cd0 <USBD_StdEPReq+0xac>
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d016      	beq.n	8007cfc <USBD_StdEPReq+0xd8>
 8007cce:	e02c      	b.n	8007d2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00d      	beq.n	8007cf2 <USBD_StdEPReq+0xce>
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b80      	cmp	r3, #128	; 0x80
 8007cda:	d00a      	beq.n	8007cf2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 f96d 	bl	8008fc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ce6:	2180      	movs	r1, #128	; 0x80
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 f969 	bl	8008fc0 <USBD_LL_StallEP>
 8007cee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cf0:	e020      	b.n	8007d34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fc7a 	bl	80085ee <USBD_CtlError>
              break;
 8007cfa:	e01b      	b.n	8007d34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	885b      	ldrh	r3, [r3, #2]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10e      	bne.n	8007d22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <USBD_StdEPReq+0xfe>
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b80      	cmp	r3, #128	; 0x80
 8007d0e:	d008      	beq.n	8007d22 <USBD_StdEPReq+0xfe>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	88db      	ldrh	r3, [r3, #6]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d104      	bne.n	8007d22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f94f 	bl	8008fc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fd2e 	bl	8008784 <USBD_CtlSendStatus>

              break;
 8007d28:	e004      	b.n	8007d34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fc5e 	bl	80085ee <USBD_CtlError>
              break;
 8007d32:	bf00      	nop
          }
          break;
 8007d34:	e107      	b.n	8007f46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d002      	beq.n	8007d48 <USBD_StdEPReq+0x124>
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d016      	beq.n	8007d74 <USBD_StdEPReq+0x150>
 8007d46:	e04b      	b.n	8007de0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00d      	beq.n	8007d6a <USBD_StdEPReq+0x146>
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b80      	cmp	r3, #128	; 0x80
 8007d52:	d00a      	beq.n	8007d6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d54:	7bbb      	ldrb	r3, [r7, #14]
 8007d56:	4619      	mov	r1, r3
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 f931 	bl	8008fc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d5e:	2180      	movs	r1, #128	; 0x80
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 f92d 	bl	8008fc0 <USBD_LL_StallEP>
 8007d66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d68:	e040      	b.n	8007dec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fc3e 	bl	80085ee <USBD_CtlError>
              break;
 8007d72:	e03b      	b.n	8007dec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	885b      	ldrh	r3, [r3, #2]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d136      	bne.n	8007dea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d004      	beq.n	8007d90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 f937 	bl	8008ffe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fcf7 	bl	8008784 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007d96:	7bbb      	ldrb	r3, [r7, #14]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fde2 	bl	8007964 <USBD_CoreFindEP>
 8007da0:	4603      	mov	r3, r0
 8007da2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007da4:	7b7b      	ldrb	r3, [r7, #13]
 8007da6:	2bff      	cmp	r3, #255	; 0xff
 8007da8:	d01f      	beq.n	8007dea <USBD_StdEPReq+0x1c6>
 8007daa:	7b7b      	ldrb	r3, [r7, #13]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d11c      	bne.n	8007dea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007db0:	7b7a      	ldrb	r2, [r7, #13]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007db8:	7b7a      	ldrb	r2, [r7, #13]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	32ae      	adds	r2, #174	; 0xae
 8007dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d010      	beq.n	8007dea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dc8:	7b7a      	ldrb	r2, [r7, #13]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	32ae      	adds	r2, #174	; 0xae
 8007dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007dde:	e004      	b.n	8007dea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fc03 	bl	80085ee <USBD_CtlError>
              break;
 8007de8:	e000      	b.n	8007dec <USBD_StdEPReq+0x1c8>
              break;
 8007dea:	bf00      	nop
          }
          break;
 8007dec:	e0ab      	b.n	8007f46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d002      	beq.n	8007e00 <USBD_StdEPReq+0x1dc>
 8007dfa:	2b03      	cmp	r3, #3
 8007dfc:	d032      	beq.n	8007e64 <USBD_StdEPReq+0x240>
 8007dfe:	e097      	b.n	8007f30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e00:	7bbb      	ldrb	r3, [r7, #14]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <USBD_StdEPReq+0x1f2>
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b80      	cmp	r3, #128	; 0x80
 8007e0a:	d004      	beq.n	8007e16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fbed 	bl	80085ee <USBD_CtlError>
                break;
 8007e14:	e091      	b.n	8007f3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da0b      	bge.n	8007e36 <USBD_StdEPReq+0x212>
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	3310      	adds	r3, #16
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	3304      	adds	r3, #4
 8007e34:	e00b      	b.n	8007e4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e36:	7bbb      	ldrb	r3, [r7, #14]
 8007e38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2200      	movs	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fc37 	bl	80086d0 <USBD_CtlSendData>
              break;
 8007e62:	e06a      	b.n	8007f3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	da11      	bge.n	8007e90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	f003 020f 	and.w	r2, r3, #15
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	3324      	adds	r3, #36	; 0x24
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d117      	bne.n	8007eb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007e86:	6839      	ldr	r1, [r7, #0]
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fbb0 	bl	80085ee <USBD_CtlError>
                  break;
 8007e8e:	e054      	b.n	8007f3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
 8007e92:	f003 020f 	and.w	r2, r3, #15
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	4613      	mov	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	440b      	add	r3, r1
 8007ea2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d104      	bne.n	8007eb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fb9d 	bl	80085ee <USBD_CtlError>
                  break;
 8007eb4:	e041      	b.n	8007f3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	da0b      	bge.n	8007ed6 <USBD_StdEPReq+0x2b2>
 8007ebe:	7bbb      	ldrb	r3, [r7, #14]
 8007ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	3310      	adds	r3, #16
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	e00b      	b.n	8007eee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	4413      	add	r3, r2
 8007eec:	3304      	adds	r3, #4
 8007eee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ef0:	7bbb      	ldrb	r3, [r7, #14]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <USBD_StdEPReq+0x2d8>
 8007ef6:	7bbb      	ldrb	r3, [r7, #14]
 8007ef8:	2b80      	cmp	r3, #128	; 0x80
 8007efa:	d103      	bne.n	8007f04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	e00e      	b.n	8007f22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f001 f897 	bl	800903c <USBD_LL_IsStallEP>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d003      	beq.n	8007f1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2201      	movs	r2, #1
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e002      	b.n	8007f22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	2202      	movs	r2, #2
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fbd1 	bl	80086d0 <USBD_CtlSendData>
              break;
 8007f2e:	e004      	b.n	8007f3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fb5b 	bl	80085ee <USBD_CtlError>
              break;
 8007f38:	bf00      	nop
          }
          break;
 8007f3a:	e004      	b.n	8007f46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fb55 	bl	80085ee <USBD_CtlError>
          break;
 8007f44:	bf00      	nop
      }
      break;
 8007f46:	e005      	b.n	8007f54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fb4f 	bl	80085ee <USBD_CtlError>
      break;
 8007f50:	e000      	b.n	8007f54 <USBD_StdEPReq+0x330>
      break;
 8007f52:	bf00      	nop
  }

  return ret;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	885b      	ldrh	r3, [r3, #2]
 8007f7a:	0a1b      	lsrs	r3, r3, #8
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	2b06      	cmp	r3, #6
 8007f82:	f200 8128 	bhi.w	80081d6 <USBD_GetDescriptor+0x276>
 8007f86:	a201      	add	r2, pc, #4	; (adr r2, 8007f8c <USBD_GetDescriptor+0x2c>)
 8007f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8c:	08007fa9 	.word	0x08007fa9
 8007f90:	08007fc1 	.word	0x08007fc1
 8007f94:	08008001 	.word	0x08008001
 8007f98:	080081d7 	.word	0x080081d7
 8007f9c:	080081d7 	.word	0x080081d7
 8007fa0:	08008177 	.word	0x08008177
 8007fa4:	080081a3 	.word	0x080081a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	7c12      	ldrb	r2, [r2, #16]
 8007fb4:	f107 0108 	add.w	r1, r7, #8
 8007fb8:	4610      	mov	r0, r2
 8007fba:	4798      	blx	r3
 8007fbc:	60f8      	str	r0, [r7, #12]
      break;
 8007fbe:	e112      	b.n	80081e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	7c1b      	ldrb	r3, [r3, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10d      	bne.n	8007fe4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f107 0208 	add.w	r2, r7, #8
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4798      	blx	r3
 8007fd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	2202      	movs	r2, #2
 8007fe0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007fe2:	e100      	b.n	80081e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fec:	f107 0208 	add.w	r2, r7, #8
 8007ff0:	4610      	mov	r0, r2
 8007ff2:	4798      	blx	r3
 8007ff4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	701a      	strb	r2, [r3, #0]
      break;
 8007ffe:	e0f2      	b.n	80081e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	885b      	ldrh	r3, [r3, #2]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b05      	cmp	r3, #5
 8008008:	f200 80ac 	bhi.w	8008164 <USBD_GetDescriptor+0x204>
 800800c:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <USBD_GetDescriptor+0xb4>)
 800800e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008012:	bf00      	nop
 8008014:	0800802d 	.word	0x0800802d
 8008018:	08008061 	.word	0x08008061
 800801c:	08008095 	.word	0x08008095
 8008020:	080080c9 	.word	0x080080c9
 8008024:	080080fd 	.word	0x080080fd
 8008028:	08008131 	.word	0x08008131
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00b      	beq.n	8008050 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	7c12      	ldrb	r2, [r2, #16]
 8008044:	f107 0108 	add.w	r1, r7, #8
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800804e:	e091      	b.n	8008174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 facb 	bl	80085ee <USBD_CtlError>
            err++;
 8008058:	7afb      	ldrb	r3, [r7, #11]
 800805a:	3301      	adds	r3, #1
 800805c:	72fb      	strb	r3, [r7, #11]
          break;
 800805e:	e089      	b.n	8008174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00b      	beq.n	8008084 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	7c12      	ldrb	r2, [r2, #16]
 8008078:	f107 0108 	add.w	r1, r7, #8
 800807c:	4610      	mov	r0, r2
 800807e:	4798      	blx	r3
 8008080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008082:	e077      	b.n	8008174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008084:	6839      	ldr	r1, [r7, #0]
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fab1 	bl	80085ee <USBD_CtlError>
            err++;
 800808c:	7afb      	ldrb	r3, [r7, #11]
 800808e:	3301      	adds	r3, #1
 8008090:	72fb      	strb	r3, [r7, #11]
          break;
 8008092:	e06f      	b.n	8008174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	7c12      	ldrb	r2, [r2, #16]
 80080ac:	f107 0108 	add.w	r1, r7, #8
 80080b0:	4610      	mov	r0, r2
 80080b2:	4798      	blx	r3
 80080b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080b6:	e05d      	b.n	8008174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fa97 	bl	80085ee <USBD_CtlError>
            err++;
 80080c0:	7afb      	ldrb	r3, [r7, #11]
 80080c2:	3301      	adds	r3, #1
 80080c4:	72fb      	strb	r3, [r7, #11]
          break;
 80080c6:	e055      	b.n	8008174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00b      	beq.n	80080ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	7c12      	ldrb	r2, [r2, #16]
 80080e0:	f107 0108 	add.w	r1, r7, #8
 80080e4:	4610      	mov	r0, r2
 80080e6:	4798      	blx	r3
 80080e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ea:	e043      	b.n	8008174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa7d 	bl	80085ee <USBD_CtlError>
            err++;
 80080f4:	7afb      	ldrb	r3, [r7, #11]
 80080f6:	3301      	adds	r3, #1
 80080f8:	72fb      	strb	r3, [r7, #11]
          break;
 80080fa:	e03b      	b.n	8008174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00b      	beq.n	8008120 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	7c12      	ldrb	r2, [r2, #16]
 8008114:	f107 0108 	add.w	r1, r7, #8
 8008118:	4610      	mov	r0, r2
 800811a:	4798      	blx	r3
 800811c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800811e:	e029      	b.n	8008174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa63 	bl	80085ee <USBD_CtlError>
            err++;
 8008128:	7afb      	ldrb	r3, [r7, #11]
 800812a:	3301      	adds	r3, #1
 800812c:	72fb      	strb	r3, [r7, #11]
          break;
 800812e:	e021      	b.n	8008174 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00b      	beq.n	8008154 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	7c12      	ldrb	r2, [r2, #16]
 8008148:	f107 0108 	add.w	r1, r7, #8
 800814c:	4610      	mov	r0, r2
 800814e:	4798      	blx	r3
 8008150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008152:	e00f      	b.n	8008174 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fa49 	bl	80085ee <USBD_CtlError>
            err++;
 800815c:	7afb      	ldrb	r3, [r7, #11]
 800815e:	3301      	adds	r3, #1
 8008160:	72fb      	strb	r3, [r7, #11]
          break;
 8008162:	e007      	b.n	8008174 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fa41 	bl	80085ee <USBD_CtlError>
          err++;
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	3301      	adds	r3, #1
 8008170:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008172:	bf00      	nop
      }
      break;
 8008174:	e037      	b.n	80081e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7c1b      	ldrb	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	f107 0208 	add.w	r2, r7, #8
 800818a:	4610      	mov	r0, r2
 800818c:	4798      	blx	r3
 800818e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008190:	e029      	b.n	80081e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008192:	6839      	ldr	r1, [r7, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fa2a 	bl	80085ee <USBD_CtlError>
        err++;
 800819a:	7afb      	ldrb	r3, [r7, #11]
 800819c:	3301      	adds	r3, #1
 800819e:	72fb      	strb	r3, [r7, #11]
      break;
 80081a0:	e021      	b.n	80081e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	7c1b      	ldrb	r3, [r3, #16]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10d      	bne.n	80081c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	f107 0208 	add.w	r2, r7, #8
 80081b6:	4610      	mov	r0, r2
 80081b8:	4798      	blx	r3
 80081ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	3301      	adds	r3, #1
 80081c0:	2207      	movs	r2, #7
 80081c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081c4:	e00f      	b.n	80081e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fa10 	bl	80085ee <USBD_CtlError>
        err++;
 80081ce:	7afb      	ldrb	r3, [r7, #11]
 80081d0:	3301      	adds	r3, #1
 80081d2:	72fb      	strb	r3, [r7, #11]
      break;
 80081d4:	e007      	b.n	80081e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fa08 	bl	80085ee <USBD_CtlError>
      err++;
 80081de:	7afb      	ldrb	r3, [r7, #11]
 80081e0:	3301      	adds	r3, #1
 80081e2:	72fb      	strb	r3, [r7, #11]
      break;
 80081e4:	bf00      	nop
  }

  if (err != 0U)
 80081e6:	7afb      	ldrb	r3, [r7, #11]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d11e      	bne.n	800822a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	88db      	ldrh	r3, [r3, #6]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d016      	beq.n	8008222 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80081f4:	893b      	ldrh	r3, [r7, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	88da      	ldrh	r2, [r3, #6]
 80081fe:	893b      	ldrh	r3, [r7, #8]
 8008200:	4293      	cmp	r3, r2
 8008202:	bf28      	it	cs
 8008204:	4613      	movcs	r3, r2
 8008206:	b29b      	uxth	r3, r3
 8008208:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800820a:	893b      	ldrh	r3, [r7, #8]
 800820c:	461a      	mov	r2, r3
 800820e:	68f9      	ldr	r1, [r7, #12]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fa5d 	bl	80086d0 <USBD_CtlSendData>
 8008216:	e009      	b.n	800822c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f9e7 	bl	80085ee <USBD_CtlError>
 8008220:	e004      	b.n	800822c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 faae 	bl	8008784 <USBD_CtlSendStatus>
 8008228:	e000      	b.n	800822c <USBD_GetDescriptor+0x2cc>
    return;
 800822a:	bf00      	nop
  }
}
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop

08008234 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	889b      	ldrh	r3, [r3, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d131      	bne.n	80082aa <USBD_SetAddress+0x76>
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	88db      	ldrh	r3, [r3, #6]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d12d      	bne.n	80082aa <USBD_SetAddress+0x76>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	885b      	ldrh	r3, [r3, #2]
 8008252:	2b7f      	cmp	r3, #127	; 0x7f
 8008254:	d829      	bhi.n	80082aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	885b      	ldrh	r3, [r3, #2]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008260:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008268:	b2db      	uxtb	r3, r3
 800826a:	2b03      	cmp	r3, #3
 800826c:	d104      	bne.n	8008278 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f9bc 	bl	80085ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008276:	e01d      	b.n	80082b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	7bfa      	ldrb	r2, [r7, #15]
 800827c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 ff05 	bl	8009094 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa7a 	bl	8008784 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2202      	movs	r2, #2
 800829a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800829e:	e009      	b.n	80082b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082a8:	e004      	b.n	80082b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f99e 	bl	80085ee <USBD_CtlError>
  }
}
 80082b2:	bf00      	nop
 80082b4:	bf00      	nop
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	885b      	ldrh	r3, [r3, #2]
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	4b4e      	ldr	r3, [pc, #312]	; (800840c <USBD_SetConfig+0x150>)
 80082d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80082d4:	4b4d      	ldr	r3, [pc, #308]	; (800840c <USBD_SetConfig+0x150>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d905      	bls.n	80082e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f985 	bl	80085ee <USBD_CtlError>
    return USBD_FAIL;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e08c      	b.n	8008402 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d002      	beq.n	80082fa <USBD_SetConfig+0x3e>
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d029      	beq.n	800834c <USBD_SetConfig+0x90>
 80082f8:	e075      	b.n	80083e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80082fa:	4b44      	ldr	r3, [pc, #272]	; (800840c <USBD_SetConfig+0x150>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d020      	beq.n	8008344 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008302:	4b42      	ldr	r3, [pc, #264]	; (800840c <USBD_SetConfig+0x150>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800830c:	4b3f      	ldr	r3, [pc, #252]	; (800840c <USBD_SetConfig+0x150>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f7fe ffe7 	bl	80072e6 <USBD_SetClassConfig>
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d008      	beq.n	8008334 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f962 	bl	80085ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008332:	e065      	b.n	8008400 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa25 	bl	8008784 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2203      	movs	r2, #3
 800833e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008342:	e05d      	b.n	8008400 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fa1d 	bl	8008784 <USBD_CtlSendStatus>
      break;
 800834a:	e059      	b.n	8008400 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800834c:	4b2f      	ldr	r3, [pc, #188]	; (800840c <USBD_SetConfig+0x150>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d112      	bne.n	800837a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800835c:	4b2b      	ldr	r3, [pc, #172]	; (800840c <USBD_SetConfig+0x150>)
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008366:	4b29      	ldr	r3, [pc, #164]	; (800840c <USBD_SetConfig+0x150>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f7fe ffd6 	bl	800731e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 fa06 	bl	8008784 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008378:	e042      	b.n	8008400 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800837a:	4b24      	ldr	r3, [pc, #144]	; (800840c <USBD_SetConfig+0x150>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	461a      	mov	r2, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	429a      	cmp	r2, r3
 8008386:	d02a      	beq.n	80083de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fe ffc4 	bl	800731e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008396:	4b1d      	ldr	r3, [pc, #116]	; (800840c <USBD_SetConfig+0x150>)
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80083a0:	4b1a      	ldr	r3, [pc, #104]	; (800840c <USBD_SetConfig+0x150>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7fe ff9d 	bl	80072e6 <USBD_SetClassConfig>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00f      	beq.n	80083d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f918 	bl	80085ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	4619      	mov	r1, r3
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7fe ffa9 	bl	800731e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2202      	movs	r2, #2
 80083d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80083d4:	e014      	b.n	8008400 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f9d4 	bl	8008784 <USBD_CtlSendStatus>
      break;
 80083dc:	e010      	b.n	8008400 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f9d0 	bl	8008784 <USBD_CtlSendStatus>
      break;
 80083e4:	e00c      	b.n	8008400 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f900 	bl	80085ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083ee:	4b07      	ldr	r3, [pc, #28]	; (800840c <USBD_SetConfig+0x150>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7fe ff92 	bl	800731e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80083fa:	2303      	movs	r3, #3
 80083fc:	73fb      	strb	r3, [r7, #15]
      break;
 80083fe:	bf00      	nop
  }

  return ret;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	200031c4 	.word	0x200031c4

08008410 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	88db      	ldrh	r3, [r3, #6]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d004      	beq.n	800842c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f8e2 	bl	80085ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800842a:	e023      	b.n	8008474 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008432:	b2db      	uxtb	r3, r3
 8008434:	2b02      	cmp	r3, #2
 8008436:	dc02      	bgt.n	800843e <USBD_GetConfig+0x2e>
 8008438:	2b00      	cmp	r3, #0
 800843a:	dc03      	bgt.n	8008444 <USBD_GetConfig+0x34>
 800843c:	e015      	b.n	800846a <USBD_GetConfig+0x5a>
 800843e:	2b03      	cmp	r3, #3
 8008440:	d00b      	beq.n	800845a <USBD_GetConfig+0x4a>
 8008442:	e012      	b.n	800846a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3308      	adds	r3, #8
 800844e:	2201      	movs	r2, #1
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f93c 	bl	80086d0 <USBD_CtlSendData>
        break;
 8008458:	e00c      	b.n	8008474 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3304      	adds	r3, #4
 800845e:	2201      	movs	r2, #1
 8008460:	4619      	mov	r1, r3
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f934 	bl	80086d0 <USBD_CtlSendData>
        break;
 8008468:	e004      	b.n	8008474 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f8be 	bl	80085ee <USBD_CtlError>
        break;
 8008472:	bf00      	nop
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800848c:	b2db      	uxtb	r3, r3
 800848e:	3b01      	subs	r3, #1
 8008490:	2b02      	cmp	r3, #2
 8008492:	d81e      	bhi.n	80084d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	88db      	ldrh	r3, [r3, #6]
 8008498:	2b02      	cmp	r3, #2
 800849a:	d004      	beq.n	80084a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f8a5 	bl	80085ee <USBD_CtlError>
        break;
 80084a4:	e01a      	b.n	80084dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d005      	beq.n	80084c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	f043 0202 	orr.w	r2, r3, #2
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	330c      	adds	r3, #12
 80084c6:	2202      	movs	r2, #2
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f900 	bl	80086d0 <USBD_CtlSendData>
      break;
 80084d0:	e004      	b.n	80084dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 f88a 	bl	80085ee <USBD_CtlError>
      break;
 80084da:	bf00      	nop
  }
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	885b      	ldrh	r3, [r3, #2]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d107      	bne.n	8008506 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f940 	bl	8008784 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008504:	e013      	b.n	800852e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	885b      	ldrh	r3, [r3, #2]
 800850a:	2b02      	cmp	r3, #2
 800850c:	d10b      	bne.n	8008526 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	889b      	ldrh	r3, [r3, #4]
 8008512:	0a1b      	lsrs	r3, r3, #8
 8008514:	b29b      	uxth	r3, r3
 8008516:	b2da      	uxtb	r2, r3
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f930 	bl	8008784 <USBD_CtlSendStatus>
}
 8008524:	e003      	b.n	800852e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f860 	bl	80085ee <USBD_CtlError>
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b082      	sub	sp, #8
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
 800853e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008546:	b2db      	uxtb	r3, r3
 8008548:	3b01      	subs	r3, #1
 800854a:	2b02      	cmp	r3, #2
 800854c:	d80b      	bhi.n	8008566 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	885b      	ldrh	r3, [r3, #2]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d10c      	bne.n	8008570 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f910 	bl	8008784 <USBD_CtlSendStatus>
      }
      break;
 8008564:	e004      	b.n	8008570 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f840 	bl	80085ee <USBD_CtlError>
      break;
 800856e:	e000      	b.n	8008572 <USBD_ClrFeature+0x3c>
      break;
 8008570:	bf00      	nop
  }
}
 8008572:	bf00      	nop
 8008574:	3708      	adds	r7, #8
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	781a      	ldrb	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	3301      	adds	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff fa41 	bl	8007a2c <SWAPBYTE>
 80085aa:	4603      	mov	r3, r0
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3301      	adds	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f7ff fa34 	bl	8007a2c <SWAPBYTE>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3301      	adds	r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f7ff fa27 	bl	8007a2c <SWAPBYTE>
 80085de:	4603      	mov	r3, r0
 80085e0:	461a      	mov	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	80da      	strh	r2, [r3, #6]
}
 80085e6:	bf00      	nop
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b082      	sub	sp, #8
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80085f8:	2180      	movs	r1, #128	; 0x80
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fce0 	bl	8008fc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008600:	2100      	movs	r1, #0
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fcdc 	bl	8008fc0 <USBD_LL_StallEP>
}
 8008608:	bf00      	nop
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d036      	beq.n	8008694 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800862a:	6938      	ldr	r0, [r7, #16]
 800862c:	f000 f836 	bl	800869c <USBD_GetLen>
 8008630:	4603      	mov	r3, r0
 8008632:	3301      	adds	r3, #1
 8008634:	b29b      	uxth	r3, r3
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	68ba      	ldr	r2, [r7, #8]
 8008642:	4413      	add	r3, r2
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	7812      	ldrb	r2, [r2, #0]
 8008648:	701a      	strb	r2, [r3, #0]
  idx++;
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	3301      	adds	r3, #1
 800864e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008650:	7dfb      	ldrb	r3, [r7, #23]
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	4413      	add	r3, r2
 8008656:	2203      	movs	r2, #3
 8008658:	701a      	strb	r2, [r3, #0]
  idx++;
 800865a:	7dfb      	ldrb	r3, [r7, #23]
 800865c:	3301      	adds	r3, #1
 800865e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008660:	e013      	b.n	800868a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008662:	7dfb      	ldrb	r3, [r7, #23]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	4413      	add	r3, r2
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3301      	adds	r3, #1
 8008672:	613b      	str	r3, [r7, #16]
    idx++;
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	3301      	adds	r3, #1
 8008678:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800867a:	7dfb      	ldrb	r3, [r7, #23]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	4413      	add	r3, r2
 8008680:	2200      	movs	r2, #0
 8008682:	701a      	strb	r2, [r3, #0]
    idx++;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	3301      	adds	r3, #1
 8008688:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e7      	bne.n	8008662 <USBD_GetString+0x52>
 8008692:	e000      	b.n	8008696 <USBD_GetString+0x86>
    return;
 8008694:	bf00      	nop
  }
}
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80086ac:	e005      	b.n	80086ba <USBD_GetLen+0x1e>
  {
    len++;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	3301      	adds	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3301      	adds	r3, #1
 80086b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1f5      	bne.n	80086ae <USBD_GetLen+0x12>
  }

  return len;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2202      	movs	r2, #2
 80086e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	2100      	movs	r1, #0
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 fceb 	bl	80090d2 <USBD_LL_Transmit>

  return USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68ba      	ldr	r2, [r7, #8]
 8008716:	2100      	movs	r1, #0
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 fcda 	bl	80090d2 <USBD_LL_Transmit>

  return USBD_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2203      	movs	r2, #3
 8008738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	2100      	movs	r1, #0
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f000 fcde 	bl	8009114 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	2100      	movs	r1, #0
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 fccd 	bl	8009114 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2204      	movs	r2, #4
 8008790:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008794:	2300      	movs	r3, #0
 8008796:	2200      	movs	r2, #0
 8008798:	2100      	movs	r1, #0
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fc99 	bl	80090d2 <USBD_LL_Transmit>

  return USBD_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2205      	movs	r2, #5
 80087b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087ba:	2300      	movs	r3, #0
 80087bc:	2200      	movs	r2, #0
 80087be:	2100      	movs	r1, #0
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fca7 	bl	8009114 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80087d4:	2200      	movs	r2, #0
 80087d6:	4912      	ldr	r1, [pc, #72]	; (8008820 <MX_USB_DEVICE_Init+0x50>)
 80087d8:	4812      	ldr	r0, [pc, #72]	; (8008824 <MX_USB_DEVICE_Init+0x54>)
 80087da:	f7fe fd07 	bl	80071ec <USBD_Init>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80087e4:	f7f8 f9ba 	bl	8000b5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80087e8:	490f      	ldr	r1, [pc, #60]	; (8008828 <MX_USB_DEVICE_Init+0x58>)
 80087ea:	480e      	ldr	r0, [pc, #56]	; (8008824 <MX_USB_DEVICE_Init+0x54>)
 80087ec:	f7fe fd2e 	bl	800724c <USBD_RegisterClass>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80087f6:	f7f8 f9b1 	bl	8000b5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80087fa:	490c      	ldr	r1, [pc, #48]	; (800882c <MX_USB_DEVICE_Init+0x5c>)
 80087fc:	4809      	ldr	r0, [pc, #36]	; (8008824 <MX_USB_DEVICE_Init+0x54>)
 80087fe:	f7fe fc1f 	bl	8007040 <USBD_CDC_RegisterInterface>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008808:	f7f8 f9a8 	bl	8000b5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800880c:	4805      	ldr	r0, [pc, #20]	; (8008824 <MX_USB_DEVICE_Init+0x54>)
 800880e:	f7fe fd53 	bl	80072b8 <USBD_Start>
 8008812:	4603      	mov	r3, r0
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008818:	f7f8 f9a0 	bl	8000b5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800881c:	bf00      	nop
 800881e:	bd80      	pop	{r7, pc}
 8008820:	200000ac 	.word	0x200000ac
 8008824:	200031c8 	.word	0x200031c8
 8008828:	20000018 	.word	0x20000018
 800882c:	20000098 	.word	0x20000098

08008830 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008834:	2200      	movs	r2, #0
 8008836:	4905      	ldr	r1, [pc, #20]	; (800884c <CDC_Init_FS+0x1c>)
 8008838:	4805      	ldr	r0, [pc, #20]	; (8008850 <CDC_Init_FS+0x20>)
 800883a:	f7fe fc1b 	bl	8007074 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800883e:	4905      	ldr	r1, [pc, #20]	; (8008854 <CDC_Init_FS+0x24>)
 8008840:	4803      	ldr	r0, [pc, #12]	; (8008850 <CDC_Init_FS+0x20>)
 8008842:	f7fe fc39 	bl	80070b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008846:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008848:	4618      	mov	r0, r3
 800884a:	bd80      	pop	{r7, pc}
 800884c:	20003ca4 	.word	0x20003ca4
 8008850:	200031c8 	.word	0x200031c8
 8008854:	200034a4 	.word	0x200034a4

08008858 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800885c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800885e:	4618      	mov	r0, r3
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	6039      	str	r1, [r7, #0]
 8008872:	71fb      	strb	r3, [r7, #7]
 8008874:	4613      	mov	r3, r2
 8008876:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008878:	79fb      	ldrb	r3, [r7, #7]
 800887a:	2b23      	cmp	r3, #35	; 0x23
 800887c:	d84a      	bhi.n	8008914 <CDC_Control_FS+0xac>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <CDC_Control_FS+0x1c>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	08008915 	.word	0x08008915
 8008888:	08008915 	.word	0x08008915
 800888c:	08008915 	.word	0x08008915
 8008890:	08008915 	.word	0x08008915
 8008894:	08008915 	.word	0x08008915
 8008898:	08008915 	.word	0x08008915
 800889c:	08008915 	.word	0x08008915
 80088a0:	08008915 	.word	0x08008915
 80088a4:	08008915 	.word	0x08008915
 80088a8:	08008915 	.word	0x08008915
 80088ac:	08008915 	.word	0x08008915
 80088b0:	08008915 	.word	0x08008915
 80088b4:	08008915 	.word	0x08008915
 80088b8:	08008915 	.word	0x08008915
 80088bc:	08008915 	.word	0x08008915
 80088c0:	08008915 	.word	0x08008915
 80088c4:	08008915 	.word	0x08008915
 80088c8:	08008915 	.word	0x08008915
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008915 	.word	0x08008915
 80088d4:	08008915 	.word	0x08008915
 80088d8:	08008915 	.word	0x08008915
 80088dc:	08008915 	.word	0x08008915
 80088e0:	08008915 	.word	0x08008915
 80088e4:	08008915 	.word	0x08008915
 80088e8:	08008915 	.word	0x08008915
 80088ec:	08008915 	.word	0x08008915
 80088f0:	08008915 	.word	0x08008915
 80088f4:	08008915 	.word	0x08008915
 80088f8:	08008915 	.word	0x08008915
 80088fc:	08008915 	.word	0x08008915
 8008900:	08008915 	.word	0x08008915
 8008904:	08008915 	.word	0x08008915
 8008908:	08008915 	.word	0x08008915
 800890c:	08008915 	.word	0x08008915
 8008910:	08008915 	.word	0x08008915
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008914:	bf00      	nop
  }

  return (USBD_OK);
 8008916:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008918:	4618      	mov	r0, r3
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	4805      	ldr	r0, [pc, #20]	; (8008948 <CDC_Receive_FS+0x24>)
 8008932:	f7fe fbc1 	bl	80070b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008936:	4804      	ldr	r0, [pc, #16]	; (8008948 <CDC_Receive_FS+0x24>)
 8008938:	f7fe fc22 	bl	8007180 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800893c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	200031c8 	.word	0x200031c8

0800894c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800895c:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <CDC_Transmit_FS+0x48>)
 800895e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008962:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800896e:	2301      	movs	r3, #1
 8008970:	e00b      	b.n	800898a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008972:	887b      	ldrh	r3, [r7, #2]
 8008974:	461a      	mov	r2, r3
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4806      	ldr	r0, [pc, #24]	; (8008994 <CDC_Transmit_FS+0x48>)
 800897a:	f7fe fb7b 	bl	8007074 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800897e:	4805      	ldr	r0, [pc, #20]	; (8008994 <CDC_Transmit_FS+0x48>)
 8008980:	f7fe fbb8 	bl	80070f4 <USBD_CDC_TransmitPacket>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200031c8 	.word	0x200031c8

08008998 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	4613      	mov	r3, r2
 80089a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80089aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
	...

080089bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2212      	movs	r2, #18
 80089cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80089ce:	4b03      	ldr	r3, [pc, #12]	; (80089dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	200000c8 	.word	0x200000c8

080089e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	6039      	str	r1, [r7, #0]
 80089ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2204      	movs	r2, #4
 80089f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80089f2:	4b03      	ldr	r3, [pc, #12]	; (8008a00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	200000dc 	.word	0x200000dc

08008a04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	6039      	str	r1, [r7, #0]
 8008a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d105      	bne.n	8008a22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4907      	ldr	r1, [pc, #28]	; (8008a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a1a:	4808      	ldr	r0, [pc, #32]	; (8008a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008a1c:	f7ff fdf8 	bl	8008610 <USBD_GetString>
 8008a20:	e004      	b.n	8008a2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	4904      	ldr	r1, [pc, #16]	; (8008a38 <USBD_FS_ProductStrDescriptor+0x34>)
 8008a26:	4805      	ldr	r0, [pc, #20]	; (8008a3c <USBD_FS_ProductStrDescriptor+0x38>)
 8008a28:	f7ff fdf2 	bl	8008610 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a2c:	4b02      	ldr	r3, [pc, #8]	; (8008a38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3708      	adds	r7, #8
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	200044a4 	.word	0x200044a4
 8008a3c:	08009274 	.word	0x08009274

08008a40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	4603      	mov	r3, r0
 8008a48:	6039      	str	r1, [r7, #0]
 8008a4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	4904      	ldr	r1, [pc, #16]	; (8008a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008a50:	4804      	ldr	r0, [pc, #16]	; (8008a64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008a52:	f7ff fddd 	bl	8008610 <USBD_GetString>
  return USBD_StrDesc;
 8008a56:	4b02      	ldr	r3, [pc, #8]	; (8008a60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	200044a4 	.word	0x200044a4
 8008a64:	08009288 	.word	0x08009288

08008a68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	6039      	str	r1, [r7, #0]
 8008a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	221a      	movs	r2, #26
 8008a78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008a7a:	f000 f843 	bl	8008b04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008a7e:	4b02      	ldr	r3, [pc, #8]	; (8008a88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	200000e0 	.word	0x200000e0

08008a8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	6039      	str	r1, [r7, #0]
 8008a96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d105      	bne.n	8008aaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	4907      	ldr	r1, [pc, #28]	; (8008ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008aa2:	4808      	ldr	r0, [pc, #32]	; (8008ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008aa4:	f7ff fdb4 	bl	8008610 <USBD_GetString>
 8008aa8:	e004      	b.n	8008ab4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	4904      	ldr	r1, [pc, #16]	; (8008ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008aae:	4805      	ldr	r0, [pc, #20]	; (8008ac4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008ab0:	f7ff fdae 	bl	8008610 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ab4:	4b02      	ldr	r3, [pc, #8]	; (8008ac0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	200044a4 	.word	0x200044a4
 8008ac4:	0800929c 	.word	0x0800929c

08008ac8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	4603      	mov	r3, r0
 8008ad0:	6039      	str	r1, [r7, #0]
 8008ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d105      	bne.n	8008ae6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4907      	ldr	r1, [pc, #28]	; (8008afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008ade:	4808      	ldr	r0, [pc, #32]	; (8008b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008ae0:	f7ff fd96 	bl	8008610 <USBD_GetString>
 8008ae4:	e004      	b.n	8008af0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	4904      	ldr	r1, [pc, #16]	; (8008afc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008aea:	4805      	ldr	r0, [pc, #20]	; (8008b00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008aec:	f7ff fd90 	bl	8008610 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008af0:	4b02      	ldr	r3, [pc, #8]	; (8008afc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop
 8008afc:	200044a4 	.word	0x200044a4
 8008b00:	080092a8 	.word	0x080092a8

08008b04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008b0a:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <Get_SerialNum+0x44>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008b10:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <Get_SerialNum+0x48>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008b16:	4b0e      	ldr	r3, [pc, #56]	; (8008b50 <Get_SerialNum+0x4c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4413      	add	r3, r2
 8008b22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d009      	beq.n	8008b3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008b2a:	2208      	movs	r2, #8
 8008b2c:	4909      	ldr	r1, [pc, #36]	; (8008b54 <Get_SerialNum+0x50>)
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 f814 	bl	8008b5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008b34:	2204      	movs	r2, #4
 8008b36:	4908      	ldr	r1, [pc, #32]	; (8008b58 <Get_SerialNum+0x54>)
 8008b38:	68b8      	ldr	r0, [r7, #8]
 8008b3a:	f000 f80f 	bl	8008b5c <IntToUnicode>
  }
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	1fff7a10 	.word	0x1fff7a10
 8008b4c:	1fff7a14 	.word	0x1fff7a14
 8008b50:	1fff7a18 	.word	0x1fff7a18
 8008b54:	200000e2 	.word	0x200000e2
 8008b58:	200000f2 	.word	0x200000f2

08008b5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b087      	sub	sp, #28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75fb      	strb	r3, [r7, #23]
 8008b72:	e027      	b.n	8008bc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	0f1b      	lsrs	r3, r3, #28
 8008b78:	2b09      	cmp	r3, #9
 8008b7a:	d80b      	bhi.n	8008b94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	0f1b      	lsrs	r3, r3, #28
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	4619      	mov	r1, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	440b      	add	r3, r1
 8008b8c:	3230      	adds	r2, #48	; 0x30
 8008b8e:	b2d2      	uxtb	r2, r2
 8008b90:	701a      	strb	r2, [r3, #0]
 8008b92:	e00a      	b.n	8008baa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	0f1b      	lsrs	r3, r3, #28
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	440b      	add	r3, r1
 8008ba4:	3237      	adds	r2, #55	; 0x37
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	011b      	lsls	r3, r3, #4
 8008bae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	4413      	add	r3, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	75fb      	strb	r3, [r7, #23]
 8008bc4:	7dfa      	ldrb	r2, [r7, #23]
 8008bc6:	79fb      	ldrb	r3, [r7, #7]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d3d3      	bcc.n	8008b74 <IntToUnicode+0x18>
  }
}
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	371c      	adds	r7, #28
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
	...

08008bdc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08a      	sub	sp, #40	; 0x28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008be4:	f107 0314 	add.w	r3, r7, #20
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	605a      	str	r2, [r3, #4]
 8008bee:	609a      	str	r2, [r3, #8]
 8008bf0:	60da      	str	r2, [r3, #12]
 8008bf2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bfc:	d13a      	bne.n	8008c74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bfe:	2300      	movs	r3, #0
 8008c00:	613b      	str	r3, [r7, #16]
 8008c02:	4b1e      	ldr	r3, [pc, #120]	; (8008c7c <HAL_PCD_MspInit+0xa0>)
 8008c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c06:	4a1d      	ldr	r2, [pc, #116]	; (8008c7c <HAL_PCD_MspInit+0xa0>)
 8008c08:	f043 0301 	orr.w	r3, r3, #1
 8008c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c0e:	4b1b      	ldr	r3, [pc, #108]	; (8008c7c <HAL_PCD_MspInit+0xa0>)
 8008c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	613b      	str	r3, [r7, #16]
 8008c18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c20:	2302      	movs	r3, #2
 8008c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c2c:	230a      	movs	r3, #10
 8008c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c30:	f107 0314 	add.w	r3, r7, #20
 8008c34:	4619      	mov	r1, r3
 8008c36:	4812      	ldr	r0, [pc, #72]	; (8008c80 <HAL_PCD_MspInit+0xa4>)
 8008c38:	f7f9 fa94 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c3c:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <HAL_PCD_MspInit+0xa0>)
 8008c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c40:	4a0e      	ldr	r2, [pc, #56]	; (8008c7c <HAL_PCD_MspInit+0xa0>)
 8008c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c46:	6353      	str	r3, [r2, #52]	; 0x34
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]
 8008c4c:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <HAL_PCD_MspInit+0xa0>)
 8008c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c50:	4a0a      	ldr	r2, [pc, #40]	; (8008c7c <HAL_PCD_MspInit+0xa0>)
 8008c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c56:	6453      	str	r3, [r2, #68]	; 0x44
 8008c58:	4b08      	ldr	r3, [pc, #32]	; (8008c7c <HAL_PCD_MspInit+0xa0>)
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c64:	2200      	movs	r2, #0
 8008c66:	2100      	movs	r1, #0
 8008c68:	2043      	movs	r0, #67	; 0x43
 8008c6a:	f7f8 fed4 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c6e:	2043      	movs	r0, #67	; 0x43
 8008c70:	f7f8 feed 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c74:	bf00      	nop
 8008c76:	3728      	adds	r7, #40	; 0x28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	40023800 	.word	0x40023800
 8008c80:	40020000 	.word	0x40020000

08008c84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	f7fe fb59 	bl	8007352 <USBD_LL_SetupStage>
}
 8008ca0:	bf00      	nop
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008cba:	78fa      	ldrb	r2, [r7, #3]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	00db      	lsls	r3, r3, #3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	78fb      	ldrb	r3, [r7, #3]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	f7fe fb93 	bl	80073fc <USBD_LL_DataOutStage>
}
 8008cd6:	bf00      	nop
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008cf0:	78fa      	ldrb	r2, [r7, #3]
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	334c      	adds	r3, #76	; 0x4c
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	4619      	mov	r1, r3
 8008d06:	f7fe fc2c 	bl	8007562 <USBD_LL_DataInStage>
}
 8008d0a:	bf00      	nop
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe fd60 	bl	80077e6 <USBD_LL_SOF>
}
 8008d26:	bf00      	nop
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008d36:	2301      	movs	r3, #1
 8008d38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d102      	bne.n	8008d48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008d42:	2300      	movs	r3, #0
 8008d44:	73fb      	strb	r3, [r7, #15]
 8008d46:	e008      	b.n	8008d5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d102      	bne.n	8008d56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008d50:	2301      	movs	r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]
 8008d54:	e001      	b.n	8008d5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008d56:	f7f7 ff01 	bl	8000b5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d60:	7bfa      	ldrb	r2, [r7, #15]
 8008d62:	4611      	mov	r1, r2
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7fe fd00 	bl	800776a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fe fca8 	bl	80076c6 <USBD_LL_Reset>
}
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe fcfb 	bl	800778a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008da6:	f043 0301 	orr.w	r3, r3, #1
 8008daa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008db4:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <HAL_PCD_SuspendCallback+0x48>)
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	4a03      	ldr	r2, [pc, #12]	; (8008dc8 <HAL_PCD_SuspendCallback+0x48>)
 8008dba:	f043 0306 	orr.w	r3, r3, #6
 8008dbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	e000ed00 	.word	0xe000ed00

08008dcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fe fceb 	bl	80077b6 <USBD_LL_Resume>
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008dfa:	78fa      	ldrb	r2, [r7, #3]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fd43 	bl	800788a <USBD_LL_IsoOUTIncomplete>
}
 8008e04:	bf00      	nop
 8008e06:	3708      	adds	r7, #8
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe fcff 	bl	8007826 <USBD_LL_IsoINIncomplete>
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fe fd55 	bl	80078ee <USBD_LL_DevConnected>
}
 8008e44:	bf00      	nop
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe fd52 	bl	8007904 <USBD_LL_DevDisconnected>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d13c      	bne.n	8008ef2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008e78:	4a20      	ldr	r2, [pc, #128]	; (8008efc <USBD_LL_Init+0x94>)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a1e      	ldr	r2, [pc, #120]	; (8008efc <USBD_LL_Init+0x94>)
 8008e84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008e88:	4b1c      	ldr	r3, [pc, #112]	; (8008efc <USBD_LL_Init+0x94>)
 8008e8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008e8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008e90:	4b1a      	ldr	r3, [pc, #104]	; (8008efc <USBD_LL_Init+0x94>)
 8008e92:	2204      	movs	r2, #4
 8008e94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008e96:	4b19      	ldr	r3, [pc, #100]	; (8008efc <USBD_LL_Init+0x94>)
 8008e98:	2202      	movs	r2, #2
 8008e9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008e9c:	4b17      	ldr	r3, [pc, #92]	; (8008efc <USBD_LL_Init+0x94>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ea2:	4b16      	ldr	r3, [pc, #88]	; (8008efc <USBD_LL_Init+0x94>)
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008ea8:	4b14      	ldr	r3, [pc, #80]	; (8008efc <USBD_LL_Init+0x94>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008eae:	4b13      	ldr	r3, [pc, #76]	; (8008efc <USBD_LL_Init+0x94>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008eb4:	4b11      	ldr	r3, [pc, #68]	; (8008efc <USBD_LL_Init+0x94>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008eba:	4b10      	ldr	r3, [pc, #64]	; (8008efc <USBD_LL_Init+0x94>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ec0:	4b0e      	ldr	r3, [pc, #56]	; (8008efc <USBD_LL_Init+0x94>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008ec6:	480d      	ldr	r0, [pc, #52]	; (8008efc <USBD_LL_Init+0x94>)
 8008ec8:	f7f9 fad0 	bl	800246c <HAL_PCD_Init>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d001      	beq.n	8008ed6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ed2:	f7f7 fe43 	bl	8000b5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008ed6:	2180      	movs	r1, #128	; 0x80
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <USBD_LL_Init+0x94>)
 8008eda:	f7fa fd28 	bl	800392e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008ede:	2240      	movs	r2, #64	; 0x40
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4806      	ldr	r0, [pc, #24]	; (8008efc <USBD_LL_Init+0x94>)
 8008ee4:	f7fa fcdc 	bl	80038a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008ee8:	2280      	movs	r2, #128	; 0x80
 8008eea:	2101      	movs	r1, #1
 8008eec:	4803      	ldr	r0, [pc, #12]	; (8008efc <USBD_LL_Init+0x94>)
 8008eee:	f7fa fcd7 	bl	80038a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008ef2:	2300      	movs	r3, #0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3708      	adds	r7, #8
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	200046a4 	.word	0x200046a4

08008f00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f9 fbc5 	bl	80026a6 <HAL_PCD_Start>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 f942 	bl	80091ac <USBD_Get_USB_Status>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	4608      	mov	r0, r1
 8008f40:	4611      	mov	r1, r2
 8008f42:	461a      	mov	r2, r3
 8008f44:	4603      	mov	r3, r0
 8008f46:	70fb      	strb	r3, [r7, #3]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	70bb      	strb	r3, [r7, #2]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f5e:	78bb      	ldrb	r3, [r7, #2]
 8008f60:	883a      	ldrh	r2, [r7, #0]
 8008f62:	78f9      	ldrb	r1, [r7, #3]
 8008f64:	f7fa f896 	bl	8003094 <HAL_PCD_EP_Open>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f000 f91c 	bl	80091ac <USBD_Get_USB_Status>
 8008f74:	4603      	mov	r3, r0
 8008f76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7fa f8df 	bl	8003164 <HAL_PCD_EP_Close>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 f8fd 	bl	80091ac <USBD_Get_USB_Status>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fda:	78fa      	ldrb	r2, [r7, #3]
 8008fdc:	4611      	mov	r1, r2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fa f9b7 	bl	8003352 <HAL_PCD_EP_SetStall>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 f8de 	bl	80091ac <USBD_Get_USB_Status>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	460b      	mov	r3, r1
 8009008:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009018:	78fa      	ldrb	r2, [r7, #3]
 800901a:	4611      	mov	r1, r2
 800901c:	4618      	mov	r0, r3
 800901e:	f7fa f9fc 	bl	800341a <HAL_PCD_EP_ClrStall>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f8bf 	bl	80091ac <USBD_Get_USB_Status>
 800902e:	4603      	mov	r3, r0
 8009030:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009032:	7bbb      	ldrb	r3, [r7, #14]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800904e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009054:	2b00      	cmp	r3, #0
 8009056:	da0b      	bge.n	8009070 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009058:	78fb      	ldrb	r3, [r7, #3]
 800905a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800905e:	68f9      	ldr	r1, [r7, #12]
 8009060:	4613      	mov	r3, r2
 8009062:	00db      	lsls	r3, r3, #3
 8009064:	4413      	add	r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	333e      	adds	r3, #62	; 0x3e
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	e00b      	b.n	8009088 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009076:	68f9      	ldr	r1, [r7, #12]
 8009078:	4613      	mov	r3, r2
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4413      	add	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	440b      	add	r3, r1
 8009082:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009086:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090a4:	2300      	movs	r3, #0
 80090a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090ae:	78fa      	ldrb	r2, [r7, #3]
 80090b0:	4611      	mov	r1, r2
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f9 ffc9 	bl	800304a <HAL_PCD_SetAddress>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 f874 	bl	80091ac <USBD_Get_USB_Status>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	607a      	str	r2, [r7, #4]
 80090dc:	603b      	str	r3, [r7, #0]
 80090de:	460b      	mov	r3, r1
 80090e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80090f0:	7af9      	ldrb	r1, [r7, #11]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	f7fa f8e2 	bl	80032be <HAL_PCD_EP_Transmit>
 80090fa:	4603      	mov	r3, r0
 80090fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	4618      	mov	r0, r3
 8009102:	f000 f853 	bl	80091ac <USBD_Get_USB_Status>
 8009106:	4603      	mov	r3, r0
 8009108:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800910a:	7dbb      	ldrb	r3, [r7, #22]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3718      	adds	r7, #24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	607a      	str	r2, [r7, #4]
 800911e:	603b      	str	r3, [r7, #0]
 8009120:	460b      	mov	r3, r1
 8009122:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009132:	7af9      	ldrb	r1, [r7, #11]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	f7fa f85e 	bl	80031f8 <HAL_PCD_EP_Receive>
 800913c:	4603      	mov	r3, r0
 800913e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009140:	7dfb      	ldrb	r3, [r7, #23]
 8009142:	4618      	mov	r0, r3
 8009144:	f000 f832 	bl	80091ac <USBD_Get_USB_Status>
 8009148:	4603      	mov	r3, r0
 800914a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800914c:	7dbb      	ldrb	r3, [r7, #22]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	4611      	mov	r1, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f7fa f88e 	bl	800328e <HAL_PCD_EP_GetRxCount>
 8009172:	4603      	mov	r3, r0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009184:	4b03      	ldr	r3, [pc, #12]	; (8009194 <USBD_static_malloc+0x18>)
}
 8009186:	4618      	mov	r0, r3
 8009188:	370c      	adds	r7, #12
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20004bb0 	.word	0x20004bb0

08009198 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]

}
 80091a0:	bf00      	nop
 80091a2:	370c      	adds	r7, #12
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	2b03      	cmp	r3, #3
 80091be:	d817      	bhi.n	80091f0 <USBD_Get_USB_Status+0x44>
 80091c0:	a201      	add	r2, pc, #4	; (adr r2, 80091c8 <USBD_Get_USB_Status+0x1c>)
 80091c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c6:	bf00      	nop
 80091c8:	080091d9 	.word	0x080091d9
 80091cc:	080091df 	.word	0x080091df
 80091d0:	080091e5 	.word	0x080091e5
 80091d4:	080091eb 	.word	0x080091eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]
    break;
 80091dc:	e00b      	b.n	80091f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80091de:	2303      	movs	r3, #3
 80091e0:	73fb      	strb	r3, [r7, #15]
    break;
 80091e2:	e008      	b.n	80091f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80091e4:	2301      	movs	r3, #1
 80091e6:	73fb      	strb	r3, [r7, #15]
    break;
 80091e8:	e005      	b.n	80091f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80091ea:	2303      	movs	r3, #3
 80091ec:	73fb      	strb	r3, [r7, #15]
    break;
 80091ee:	e002      	b.n	80091f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80091f0:	2303      	movs	r3, #3
 80091f2:	73fb      	strb	r3, [r7, #15]
    break;
 80091f4:	bf00      	nop
  }
  return usb_status;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <__libc_init_array>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	4d0d      	ldr	r5, [pc, #52]	; (800923c <__libc_init_array+0x38>)
 8009208:	4c0d      	ldr	r4, [pc, #52]	; (8009240 <__libc_init_array+0x3c>)
 800920a:	1b64      	subs	r4, r4, r5
 800920c:	10a4      	asrs	r4, r4, #2
 800920e:	2600      	movs	r6, #0
 8009210:	42a6      	cmp	r6, r4
 8009212:	d109      	bne.n	8009228 <__libc_init_array+0x24>
 8009214:	4d0b      	ldr	r5, [pc, #44]	; (8009244 <__libc_init_array+0x40>)
 8009216:	4c0c      	ldr	r4, [pc, #48]	; (8009248 <__libc_init_array+0x44>)
 8009218:	f000 f820 	bl	800925c <_init>
 800921c:	1b64      	subs	r4, r4, r5
 800921e:	10a4      	asrs	r4, r4, #2
 8009220:	2600      	movs	r6, #0
 8009222:	42a6      	cmp	r6, r4
 8009224:	d105      	bne.n	8009232 <__libc_init_array+0x2e>
 8009226:	bd70      	pop	{r4, r5, r6, pc}
 8009228:	f855 3b04 	ldr.w	r3, [r5], #4
 800922c:	4798      	blx	r3
 800922e:	3601      	adds	r6, #1
 8009230:	e7ee      	b.n	8009210 <__libc_init_array+0xc>
 8009232:	f855 3b04 	ldr.w	r3, [r5], #4
 8009236:	4798      	blx	r3
 8009238:	3601      	adds	r6, #1
 800923a:	e7f2      	b.n	8009222 <__libc_init_array+0x1e>
 800923c:	080092d8 	.word	0x080092d8
 8009240:	080092d8 	.word	0x080092d8
 8009244:	080092d8 	.word	0x080092d8
 8009248:	080092dc 	.word	0x080092dc

0800924c <memset>:
 800924c:	4402      	add	r2, r0
 800924e:	4603      	mov	r3, r0
 8009250:	4293      	cmp	r3, r2
 8009252:	d100      	bne.n	8009256 <memset+0xa>
 8009254:	4770      	bx	lr
 8009256:	f803 1b01 	strb.w	r1, [r3], #1
 800925a:	e7f9      	b.n	8009250 <memset+0x4>

0800925c <_init>:
 800925c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925e:	bf00      	nop
 8009260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009262:	bc08      	pop	{r3}
 8009264:	469e      	mov	lr, r3
 8009266:	4770      	bx	lr

08009268 <_fini>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	bf00      	nop
 800926c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926e:	bc08      	pop	{r3}
 8009270:	469e      	mov	lr, r3
 8009272:	4770      	bx	lr
