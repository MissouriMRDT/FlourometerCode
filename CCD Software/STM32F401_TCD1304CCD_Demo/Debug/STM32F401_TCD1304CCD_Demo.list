
STM32F401_TCD1304CCD_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a50  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008be4  08008be4  00018be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c3c  08008c3c  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008c3c  08008c3c  00018c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c44  08008c44  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c74  200000fc  08008d48  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d70  08008d48  00024d70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c80  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338f  00000000  00000000  00034dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00038140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00039380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5e8  00000000  00000000  0003a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168d0  00000000  00000000  00054a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aaf1  00000000  00000000  0006b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105df1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  00105e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008bcc 	.word	0x08008bcc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08008bcc 	.word	0x08008bcc

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fce4 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f836 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fae0 	bl	8000aa8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004e8:	f000 f8f0 	bl	80006cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80004ec:	f000 f966 	bl	80007bc <MX_TIM3_Init>
  MX_TIM4_Init();
 80004f0:	f000 f9da 	bl	80008a8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004f4:	f000 fa4a 	bl	800098c <MX_TIM5_Init>
  MX_ADC1_Init();
 80004f8:	f000 f896 	bl	8000628 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f007 fe20 	bl	8008140 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PA6 - fM
 8000500:	2100      	movs	r1, #0
 8000502:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x60>)
 8000504:	f003 fbc0 	bl	8003c88 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000508:	210c      	movs	r1, #12
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x64>)
 800050c:	f003 fbbc 	bl	8003c88 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //PA0 - ICG
 8000510:	2100      	movs	r1, #0
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <main+0x68>)
 8000514:	f003 fbb8 	bl	8003c88 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COUNTER(&htim2, 66); //600ns delay
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <main+0x68>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2242      	movs	r2, #66	; 0x42
 800051e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //PA2 - SH
 8000520:	2108      	movs	r1, #8
 8000522:	4808      	ldr	r0, [pc, #32]	; (8000544 <main+0x6c>)
 8000524:	f003 fbb0 	bl	8003c88 <HAL_TIM_PWM_Start>

    /* USER CODE BEGIN 3 */

	  /*CDC_Transmit_FS((uint8_t *) data, strlen (data));
	  HAL_Delay (1000);*/
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCDBuffer);
 8000528:	f241 7270 	movw	r2, #6000	; 0x1770
 800052c:	4906      	ldr	r1, [pc, #24]	; (8000548 <main+0x70>)
 800052e:	4807      	ldr	r0, [pc, #28]	; (800054c <main+0x74>)
 8000530:	f000 fd94 	bl	800105c <HAL_ADC_Start_DMA>
 8000534:	e7f8      	b.n	8000528 <main+0x50>
 8000536:	bf00      	nop
 8000538:	200001a8 	.word	0x200001a8
 800053c:	200001f0 	.word	0x200001f0
 8000540:	20000160 	.word	0x20000160
 8000544:	20000238 	.word	0x20000238
 8000548:	20000280 	.word	0x20000280
 800054c:	20000118 	.word	0x20000118

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f008 fb2c 	bl	8008bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <SystemClock_Config+0xd0>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a28      	ldr	r2, [pc, #160]	; (8000620 <SystemClock_Config+0xd0>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <SystemClock_Config+0xd0>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd4>)
 800059e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005c4:	2319      	movs	r3, #25
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ce:	2304      	movs	r3, #4
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d2:	2307      	movs	r3, #7
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fe7c 	bl	80032d8 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005e6:	f000 fa97 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2302      	movs	r3, #2
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f8de 	bl	80037c8 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000612:	f000 fa81 	bl	8000b18 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x98>)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <MX_ADC1_Init+0x9c>)
 800063e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000642:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000646:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_ADC1_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_ADC1_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_ADC1_Init+0x98>)
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_ADC1_Init+0xa0>)
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000676:	2201      	movs	r2, #1
 8000678:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000688:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_ADC1_Init+0x98>)
 800068a:	f000 fca3 	bl	8000fd4 <HAL_ADC_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000694:	f000 fa40 	bl	8000b18 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000698:	2303      	movs	r3, #3
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069c:	2301      	movs	r3, #1
 800069e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_ADC1_Init+0x98>)
 80006aa:	f000 fddb 	bl	8001264 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b4:	f000 fa30 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000118 	.word	0x20000118
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08e      	sub	sp, #56	; 0x38
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <MX_TIM2_Init+0xe8>)
 80006fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000702:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <MX_TIM2_Init+0xe8>)
 8000706:	2200      	movs	r2, #0
 8000708:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <MX_TIM2_Init+0xe8>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 630000-1;
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <MX_TIM2_Init+0xe8>)
 8000712:	4a29      	ldr	r2, [pc, #164]	; (80007b8 <MX_TIM2_Init+0xec>)
 8000714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MX_TIM2_Init+0xe8>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <MX_TIM2_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000722:	4824      	ldr	r0, [pc, #144]	; (80007b4 <MX_TIM2_Init+0xe8>)
 8000724:	f003 fa08 	bl	8003b38 <HAL_TIM_Base_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800072e:	f000 f9f3 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073c:	4619      	mov	r1, r3
 800073e:	481d      	ldr	r0, [pc, #116]	; (80007b4 <MX_TIM2_Init+0xe8>)
 8000740:	f003 fc14 	bl	8003f6c <HAL_TIM_ConfigClockSource>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800074a:	f000 f9e5 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800074e:	4819      	ldr	r0, [pc, #100]	; (80007b4 <MX_TIM2_Init+0xe8>)
 8000750:	f003 fa41 	bl	8003bd6 <HAL_TIM_PWM_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800075a:	f000 f9dd 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800075e:	2310      	movs	r3, #16
 8000760:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000762:	2380      	movs	r3, #128	; 0x80
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	4619      	mov	r1, r3
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_TIM2_Init+0xe8>)
 800076e:	f004 f863 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000778:	f000 f9ce 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077c:	2360      	movs	r3, #96	; 0x60
 800077e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 840-1;
 8000780:	f240 3347 	movw	r3, #839	; 0x347
 8000784:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <MX_TIM2_Init+0xe8>)
 8000796:	f003 fb27 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007a0:	f000 f9ba 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <MX_TIM2_Init+0xe8>)
 80007a6:	f000 fa8b 	bl	8000cc0 <HAL_TIM_MspPostInit>

}
 80007aa:	bf00      	nop
 80007ac:	3738      	adds	r7, #56	; 0x38
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000160 	.word	0x20000160
 80007b8:	00099cef 	.word	0x00099cef

080007bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007ee:	4a2d      	ldr	r2, [pc, #180]	; (80008a4 <MX_TIM3_Init+0xe8>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_TIM3_Init+0xe4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42-1;
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000800:	2229      	movs	r2, #41	; 0x29
 8000802:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000810:	4823      	ldr	r0, [pc, #140]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000812:	f003 f991 	bl	8003b38 <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800081c:	f000 f97c 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	4619      	mov	r1, r3
 800082c:	481c      	ldr	r0, [pc, #112]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800082e:	f003 fb9d 	bl	8003f6c <HAL_TIM_ConfigClockSource>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000838:	f000 f96e 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800083c:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800083e:	f003 f9ca 	bl	8003bd6 <HAL_TIM_PWM_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000848:	f000 f966 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4619      	mov	r1, r3
 800085a:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_TIM3_Init+0xe4>)
 800085c:	f003 ffec 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000866:	f000 f957 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	; 0x60
 800086c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21-1;
 800086e:	2314      	movs	r3, #20
 8000870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000882:	f003 fab1 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800088c:	f000 f944 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM3_Init+0xe4>)
 8000892:	f000 fa15 	bl	8000cc0 <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	; 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200001a8 	.word	0x200001a8
 80008a4:	40000400 	.word	0x40000400

080008a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	f107 0320 	add.w	r3, r7, #32
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <MX_TIM4_Init+0xdc>)
 80008da:	4a2b      	ldr	r2, [pc, #172]	; (8000988 <MX_TIM4_Init+0xe0>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008de:	4b29      	ldr	r3, [pc, #164]	; (8000984 <MX_TIM4_Init+0xdc>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <MX_TIM4_Init+0xdc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 80008ea:	4b26      	ldr	r3, [pc, #152]	; (8000984 <MX_TIM4_Init+0xdc>)
 80008ec:	22a7      	movs	r2, #167	; 0xa7
 80008ee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <MX_TIM4_Init+0xdc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_TIM4_Init+0xdc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008fc:	4821      	ldr	r0, [pc, #132]	; (8000984 <MX_TIM4_Init+0xdc>)
 80008fe:	f003 f91b 	bl	8003b38 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000908:	f000 f906 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000916:	4619      	mov	r1, r3
 8000918:	481a      	ldr	r0, [pc, #104]	; (8000984 <MX_TIM4_Init+0xdc>)
 800091a:	f003 fb27 	bl	8003f6c <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000924:	f000 f8f8 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000928:	4816      	ldr	r0, [pc, #88]	; (8000984 <MX_TIM4_Init+0xdc>)
 800092a:	f003 f954 	bl	8003bd6 <HAL_TIM_PWM_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000934:	f000 f8f0 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4619      	mov	r1, r3
 8000946:	480f      	ldr	r0, [pc, #60]	; (8000984 <MX_TIM4_Init+0xdc>)
 8000948:	f003 ff76 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000952:	f000 f8e1 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000956:	2360      	movs	r3, #96	; 0x60
 8000958:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 800095a:	2329      	movs	r3, #41	; 0x29
 800095c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	220c      	movs	r2, #12
 800096a:	4619      	mov	r1, r3
 800096c:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_TIM4_Init+0xdc>)
 800096e:	f003 fa3b 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000978:	f000 f8ce 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	3738      	adds	r7, #56	; 0x38
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200001f0 	.word	0x200001f0
 8000988:	40000800 	.word	0x40000800

0800098c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b092      	sub	sp, #72	; 0x48
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
 80009ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009cc:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <MX_TIM5_Init+0x114>)
 80009ce:	4a35      	ldr	r2, [pc, #212]	; (8000aa4 <MX_TIM5_Init+0x118>)
 80009d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <MX_TIM5_Init+0x114>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d8:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <MX_TIM5_Init+0x114>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1680-1;
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <MX_TIM5_Init+0x114>)
 80009e0:	f240 628f 	movw	r2, #1679	; 0x68f
 80009e4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <MX_TIM5_Init+0x114>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_TIM5_Init+0x114>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009f2:	482b      	ldr	r0, [pc, #172]	; (8000aa0 <MX_TIM5_Init+0x114>)
 80009f4:	f003 f8a0 	bl	8003b38 <HAL_TIM_Base_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80009fe:	f000 f88b 	bl	8000b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4824      	ldr	r0, [pc, #144]	; (8000aa0 <MX_TIM5_Init+0x114>)
 8000a10:	f003 faac 	bl	8003f6c <HAL_TIM_ConfigClockSource>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000a1a:	f000 f87d 	bl	8000b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a1e:	4820      	ldr	r0, [pc, #128]	; (8000aa0 <MX_TIM5_Init+0x114>)
 8000a20:	f003 f8d9 	bl	8003bd6 <HAL_TIM_PWM_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8000a2a:	f000 f875 	bl	8000b18 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a2e:	2306      	movs	r3, #6
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <MX_TIM5_Init+0x114>)
 8000a3e:	f003 fb5c 	bl	80040fa <HAL_TIM_SlaveConfigSynchro>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8000a48:	f000 f866 	bl	8000b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4811      	ldr	r0, [pc, #68]	; (8000aa0 <MX_TIM5_Init+0x114>)
 8000a5c:	f003 feec 	bl	8004838 <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 8000a66:	f000 f857 	bl	8000b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6a:	2360      	movs	r3, #96	; 0x60
 8000a6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 336-1;
 8000a6e:	f240 134f 	movw	r3, #335	; 0x14f
 8000a72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2208      	movs	r2, #8
 8000a80:	4619      	mov	r1, r3
 8000a82:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM5_Init+0x114>)
 8000a84:	f003 f9b0 	bl	8003de8 <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM5_Init+0x106>
  {
    Error_Handler();
 8000a8e:	f000 f843 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a92:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM5_Init+0x114>)
 8000a94:	f000 f914 	bl	8000cc0 <HAL_TIM_MspPostInit>

}
 8000a98:	bf00      	nop
 8000a9a:	3748      	adds	r7, #72	; 0x48
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000238 	.word	0x20000238
 8000aa4:	40000c00 	.word	0x40000c00

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_GPIO_Init+0x4c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_GPIO_Init+0x4c>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x4c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_GPIO_Init+0x4c>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a08      	ldr	r2, [pc, #32]	; (8000af4 <MX_GPIO_Init+0x4c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_GPIO_Init+0x4c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	 CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCDBuffer);
 8000b00:	f241 7170 	movw	r1, #6000	; 0x1770
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b06:	f007 fbd9 	bl	80082bc <CDC_Transmit_FS>

 }
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000280 	.word	0x20000280

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <HAL_ADC_MspInit+0x7c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d127      	bne.n	8000be6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_ADC_MspInit+0x80>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <HAL_ADC_MspInit+0x80>)
 8000ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_ADC_MspInit+0x80>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bae:	613b      	str	r3, [r7, #16]
 8000bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_ADC_MspInit+0x80>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <HAL_ADC_MspInit+0x80>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_ADC_MspInit+0x80>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bce:	2308      	movs	r3, #8
 8000bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_ADC_MspInit+0x84>)
 8000be2:	f000 ff77 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020000 	.word	0x40020000

08000bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b087      	sub	sp, #28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c0c:	d10e      	bne.n	8000c2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c2a:	e03a      	b.n	8000ca2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a20      	ldr	r2, [pc, #128]	; (8000cb4 <HAL_TIM_Base_MspInit+0xb8>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10e      	bne.n	8000c54 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6413      	str	r3, [r2, #64]	; 0x40
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
}
 8000c52:	e026      	b.n	8000ca2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_TIM_Base_MspInit+0xbc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10e      	bne.n	8000c7c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
}
 8000c7a:	e012      	b.n	8000ca2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <HAL_TIM_Base_MspInit+0xc0>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d10d      	bne.n	8000ca2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_TIM_Base_MspInit+0xb4>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
}
 8000ca2:	bf00      	nop
 8000ca4:	371c      	adds	r7, #28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40000400 	.word	0x40000400
 8000cb8:	40000800 	.word	0x40000800
 8000cbc:	40000c00 	.word	0x40000c00

08000cc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce0:	d11e      	bne.n	8000d20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a33      	ldr	r2, [pc, #204]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4828      	ldr	r0, [pc, #160]	; (8000dbc <HAL_TIM_MspPostInit+0xfc>)
 8000d1a:	f000 fedb 	bl	8001ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000d1e:	e046      	b.n	8000dae <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <HAL_TIM_MspPostInit+0x100>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d11e      	bne.n	8000d68 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d46:	2340      	movs	r3, #64	; 0x40
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d56:	2302      	movs	r3, #2
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4816      	ldr	r0, [pc, #88]	; (8000dbc <HAL_TIM_MspPostInit+0xfc>)
 8000d62:	f000 feb7 	bl	8001ad4 <HAL_GPIO_Init>
}
 8000d66:	e022      	b.n	8000dae <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <HAL_TIM_MspPostInit+0x104>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d11d      	bne.n	8000dae <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a0f      	ldr	r2, [pc, #60]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <HAL_TIM_MspPostInit+0xf8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d8e:	2304      	movs	r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4804      	ldr	r0, [pc, #16]	; (8000dbc <HAL_TIM_MspPostInit+0xfc>)
 8000daa:	f000 fe93 	bl	8001ad4 <HAL_GPIO_Init>
}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	; 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40000c00 	.word	0x40000c00

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f89a 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e20:	4802      	ldr	r0, [pc, #8]	; (8000e2c <OTG_FS_IRQHandler+0x10>)
 8000e22:	f001 f92b 	bl	800207c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20004644 	.word	0x20004644

08000e30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e5a:	490e      	ldr	r1, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e70:	4c0b      	ldr	r4, [pc, #44]	; (8000ea0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e7e:	f7ff ffd7 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f007 fe77 	bl	8008b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fb27 	bl	80004d8 <main>
  bx  lr    
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e98:	08008c4c 	.word	0x08008c4c
  ldr r2, =_sbss
 8000e9c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000ea0:	20004d70 	.word	0x20004d70

08000ea4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_Init+0x40>)
 8000eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_Init+0x40>)
 8000ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_Init+0x40>)
 8000eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 fd37 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fe22 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023c00 	.word	0x40023c00

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fd4f 	bl	80019ae <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f000 fd17 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x20>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x24>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <HAL_IncTick+0x24>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20003160 	.word	0x20003160

08000f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  return uwTick;
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_GetTick+0x14>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20003160 	.word	0x20003160

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f94:	f7ff ffee 	bl	8000f74 <HAL_GetTick>
 8000f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa4:	d005      	beq.n	8000fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_Delay+0x44>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4413      	add	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	bf00      	nop
 8000fb4:	f7ff ffde 	bl	8000f74 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d8f7      	bhi.n	8000fb4 <HAL_Delay+0x28>
  {
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000008 	.word	0x20000008

08000fd4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e033      	b.n	8001052 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fdbe 	bl	8000b74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	2b00      	cmp	r3, #0
 8001010:	d118      	bne.n	8001044 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800101a:	f023 0302 	bic.w	r3, r3, #2
 800101e:	f043 0202 	orr.w	r2, r3, #2
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 fa3e 	bl	80014a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f023 0303 	bic.w	r3, r3, #3
 800103a:	f043 0201 	orr.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	641a      	str	r2, [r3, #64]	; 0x40
 8001042:	e001      	b.n	8001048 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_ADC_Start_DMA+0x1e>
 8001076:	2302      	movs	r3, #2
 8001078:	e0ce      	b.n	8001218 <HAL_ADC_Start_DMA+0x1bc>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b01      	cmp	r3, #1
 800108e:	d018      	beq.n	80010c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a0:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <HAL_ADC_Start_DMA+0x1c4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a5f      	ldr	r2, [pc, #380]	; (8001224 <HAL_ADC_Start_DMA+0x1c8>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0c9a      	lsrs	r2, r3, #18
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010b4:	e002      	b.n	80010bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f9      	bne.n	80010b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010d0:	d107      	bne.n	80010e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	f040 8086 	bne.w	80011fe <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010fa:	f023 0301 	bic.w	r3, r3, #1
 80010fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800111c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001130:	d106      	bne.n	8001140 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f023 0206 	bic.w	r2, r3, #6
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	645a      	str	r2, [r3, #68]	; 0x44
 800113e:	e002      	b.n	8001146 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_ADC_Start_DMA+0x1cc>)
 8001150:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	4a35      	ldr	r2, [pc, #212]	; (800122c <HAL_ADC_Start_DMA+0x1d0>)
 8001158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115e:	4a34      	ldr	r2, [pc, #208]	; (8001230 <HAL_ADC_Start_DMA+0x1d4>)
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001166:	4a33      	ldr	r2, [pc, #204]	; (8001234 <HAL_ADC_Start_DMA+0x1d8>)
 8001168:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001172:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001182:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001192:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	334c      	adds	r3, #76	; 0x4c
 800119e:	4619      	mov	r1, r3
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f000 fc0f 	bl	80019c6 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 031f 	and.w	r3, r3, #31
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10f      	bne.n	80011d4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d129      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	e020      	b.n	8001216 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <HAL_ADC_Start_DMA+0x1dc>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d11b      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1ba>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d114      	bne.n	8001216 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	e00b      	b.n	8001216 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f043 0210 	orr.w	r2, r3, #16
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	431bde83 	.word	0x431bde83
 8001228:	40012300 	.word	0x40012300
 800122c:	080016a1 	.word	0x080016a1
 8001230:	0800175b 	.word	0x0800175b
 8001234:	08001777 	.word	0x08001777
 8001238:	40012000 	.word	0x40012000

0800123c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_ADC_ConfigChannel+0x1c>
 800127c:	2302      	movs	r3, #2
 800127e:	e105      	b.n	800148c <HAL_ADC_ConfigChannel+0x228>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b09      	cmp	r3, #9
 800128e:	d925      	bls.n	80012dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68d9      	ldr	r1, [r3, #12]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	b29b      	uxth	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	3b1e      	subs	r3, #30
 80012a6:	2207      	movs	r2, #7
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43da      	mvns	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	400a      	ands	r2, r1
 80012b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68d9      	ldr	r1, [r3, #12]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	4603      	mov	r3, r0
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4403      	add	r3, r0
 80012ce:	3b1e      	subs	r3, #30
 80012d0:	409a      	lsls	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	e022      	b.n	8001322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6919      	ldr	r1, [r3, #16]
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	2207      	movs	r2, #7
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43da      	mvns	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	400a      	ands	r2, r1
 80012fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	b29b      	uxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	4603      	mov	r3, r0
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4403      	add	r3, r0
 8001318:	409a      	lsls	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b06      	cmp	r3, #6
 8001328:	d824      	bhi.n	8001374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	3b05      	subs	r3, #5
 800133c:	221f      	movs	r2, #31
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	400a      	ands	r2, r1
 800134a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	3b05      	subs	r3, #5
 8001366:	fa00 f203 	lsl.w	r2, r0, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	e04c      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b0c      	cmp	r3, #12
 800137a:	d824      	bhi.n	80013c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	3b23      	subs	r3, #35	; 0x23
 800138e:	221f      	movs	r2, #31
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43da      	mvns	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	400a      	ands	r2, r1
 800139c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	4613      	mov	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	3b23      	subs	r3, #35	; 0x23
 80013b8:	fa00 f203 	lsl.w	r2, r0, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	631a      	str	r2, [r3, #48]	; 0x30
 80013c4:	e023      	b.n	800140e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b41      	subs	r3, #65	; 0x41
 80013d8:	221f      	movs	r2, #31
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	400a      	ands	r2, r1
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	4618      	mov	r0, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b41      	subs	r3, #65	; 0x41
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_ADC_ConfigChannel+0x234>)
 8001410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a21      	ldr	r2, [pc, #132]	; (800149c <HAL_ADC_ConfigChannel+0x238>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d109      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1cc>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d105      	bne.n	8001430 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a19      	ldr	r2, [pc, #100]	; (800149c <HAL_ADC_ConfigChannel+0x238>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d123      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d003      	beq.n	800144a <HAL_ADC_ConfigChannel+0x1e6>
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b11      	cmp	r3, #17
 8001448:	d11b      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b10      	cmp	r3, #16
 800145c:	d111      	bne.n	8001482 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_ADC_ConfigChannel+0x23c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <HAL_ADC_ConfigChannel+0x240>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	0c9a      	lsrs	r2, r3, #18
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3b01      	subs	r3, #1
 800147a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40012300 	.word	0x40012300
 800149c:	40012000 	.word	0x40012000
 80014a0:	20000000 	.word	0x20000000
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b0:	4b79      	ldr	r3, [pc, #484]	; (8001698 <ADC_Init+0x1f0>)
 80014b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	431a      	orrs	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	021a      	lsls	r2, r3, #8
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6899      	ldr	r1, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <ADC_Init+0x1f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d022      	beq.n	8001586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689a      	ldr	r2, [r3, #8]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800154e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6899      	ldr	r1, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6899      	ldr	r1, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e00f      	b.n	80015a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0202 	bic.w	r2, r2, #2
 80015b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6899      	ldr	r1, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	7e1b      	ldrb	r3, [r3, #24]
 80015c0:	005a      	lsls	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d01b      	beq.n	800160c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	3b01      	subs	r3, #1
 8001600:	035a      	lsls	r2, r3, #13
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e007      	b.n	800161c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800162a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	3b01      	subs	r3, #1
 8001638:	051a      	lsls	r2, r3, #20
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6899      	ldr	r1, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800165e:	025a      	lsls	r2, r3, #9
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	029a      	lsls	r2, r3, #10
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	609a      	str	r2, [r3, #8]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40012300 	.word	0x40012300
 800169c:	0f000001 	.word	0x0f000001

080016a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d13c      	bne.n	8001734 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d12b      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d127      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d119      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0220 	bic.w	r2, r2, #32
 8001706:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f7ff f9e3 	bl	8000af8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001732:	e00e      	b.n	8001752 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f003 0310 	and.w	r3, r3, #16
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff fd85 	bl	8001250 <HAL_ADC_ErrorCallback>
}
 8001746:	e004      	b.n	8001752 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	4798      	blx	r3
}
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f7ff fd67 	bl	800123c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2240      	movs	r2, #64	; 0x40
 8001788:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f043 0204 	orr.w	r2, r3, #4
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fd5a 	bl	8001250 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800179c:	bf00      	nop
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff8e 	bl	8001844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff29 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff3e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff8e 	bl	8001898 <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5d 	bl	8001844 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff31 	bl	8001808 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <HAL_DMA_Start_IT+0x26>
 80019e8:	2302      	movs	r3, #2
 80019ea:	e040      	b.n	8001a6e <HAL_DMA_Start_IT+0xa8>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d12f      	bne.n	8001a60 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f82e 	bl	8001a76 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	223f      	movs	r2, #63	; 0x3f
 8001a20:	409a      	lsls	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f042 0216 	orr.w	r2, r2, #22
 8001a34:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 0208 	orr.w	r2, r2, #8
 8001a4c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e005      	b.n	8001a6c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b085      	sub	sp, #20
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a92:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b40      	cmp	r3, #64	; 0x40
 8001aa2:	d108      	bne.n	8001ab6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ab4:	e007      	b.n	8001ac6 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	60da      	str	r2, [r3, #12]
}
 8001ac6:	bf00      	nop
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e159      	b.n	8001da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001af0:	2201      	movs	r2, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8148 	bne.w	8001d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d005      	beq.n	8001b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d130      	bne.n	8001b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 0201 	and.w	r2, r3, #1
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d017      	beq.n	8001bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d123      	bne.n	8001c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	08da      	lsrs	r2, r3, #3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3208      	adds	r2, #8
 8001bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	69b9      	ldr	r1, [r7, #24]
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2203      	movs	r2, #3
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0203 	and.w	r2, r3, #3
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a2 	beq.w	8001d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <HAL_GPIO_Init+0x2e8>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_GPIO_Init+0x2ec>)
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a49      	ldr	r2, [pc, #292]	; (8001dc4 <HAL_GPIO_Init+0x2f0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d019      	beq.n	8001cd6 <HAL_GPIO_Init+0x202>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a48      	ldr	r2, [pc, #288]	; (8001dc8 <HAL_GPIO_Init+0x2f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d013      	beq.n	8001cd2 <HAL_GPIO_Init+0x1fe>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a47      	ldr	r2, [pc, #284]	; (8001dcc <HAL_GPIO_Init+0x2f8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d00d      	beq.n	8001cce <HAL_GPIO_Init+0x1fa>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a46      	ldr	r2, [pc, #280]	; (8001dd0 <HAL_GPIO_Init+0x2fc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x1f6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a45      	ldr	r2, [pc, #276]	; (8001dd4 <HAL_GPIO_Init+0x300>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_GPIO_Init+0x1f2>
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x204>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	; (8001dc0 <HAL_GPIO_Init+0x2ec>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_GPIO_Init+0x304>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f aea2 	bls.w	8001af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dde:	b08f      	sub	sp, #60	; 0x3c
 8001de0:	af0a      	add	r7, sp, #40	; 0x28
 8001de2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e10f      	b.n	800200e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d106      	bne.n	8001e0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f006 fb9f 	bl	800854c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2203      	movs	r2, #3
 8001e12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d102      	bne.n	8001e28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 fe86 	bl	8004b3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	687e      	ldr	r6, [r7, #4]
 8001e3a:	466d      	mov	r5, sp
 8001e3c:	f106 0410 	add.w	r4, r6, #16
 8001e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e50:	1d33      	adds	r3, r6, #4
 8001e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e54:	6838      	ldr	r0, [r7, #0]
 8001e56:	f002 fd5d 	bl	8004914 <USB_CoreInit>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0d0      	b.n	800200e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2100      	movs	r1, #0
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fe74 	bl	8004b60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e04a      	b.n	8001f14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e7e:	7bfa      	ldrb	r2, [r7, #15]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	333d      	adds	r3, #61	; 0x3d
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	333c      	adds	r3, #60	; 0x3c
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	b298      	uxth	r0, r3
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	440b      	add	r3, r1
 8001eb8:	3344      	adds	r3, #68	; 0x44
 8001eba:	4602      	mov	r2, r0
 8001ebc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3340      	adds	r3, #64	; 0x40
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	3348      	adds	r3, #72	; 0x48
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	334c      	adds	r3, #76	; 0x4c
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001efa:	7bfa      	ldrb	r2, [r7, #15]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3354      	adds	r3, #84	; 0x54
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	3301      	adds	r3, #1
 8001f12:	73fb      	strb	r3, [r7, #15]
 8001f14:	7bfa      	ldrb	r2, [r7, #15]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3af      	bcc.n	8001e7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	e044      	b.n	8001fae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f62:	2200      	movs	r2, #0
 8001f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	3301      	adds	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d3b5      	bcc.n	8001f24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	603b      	str	r3, [r7, #0]
 8001fbe:	687e      	ldr	r6, [r7, #4]
 8001fc0:	466d      	mov	r5, sp
 8001fc2:	f106 0410 	add.w	r4, r6, #16
 8001fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fd6:	1d33      	adds	r3, r6, #4
 8001fd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fda:	6838      	ldr	r0, [r7, #0]
 8001fdc:	f002 fe0c 	bl	8004bf8 <USB_DevInit>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e00d      	b.n	800200e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f003 ff5b 	bl	8005ec2 <USB_DevDisconnect>

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002016 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b084      	sub	sp, #16
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_PCD_Start+0x1c>
 800202e:	2302      	movs	r3, #2
 8002030:	e020      	b.n	8002074 <HAL_PCD_Start+0x5e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203e:	2b01      	cmp	r3, #1
 8002040:	d109      	bne.n	8002056 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002046:	2b01      	cmp	r3, #1
 8002048:	d005      	beq.n	8002056 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f002 fd5e 	bl	8004b1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f003 ff0b 	bl	8005e80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b08d      	sub	sp, #52	; 0x34
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f003 ffc9 	bl	800602a <USB_GetMode>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 848a 	bne.w	80029b4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 ff2d 	bl	8005f04 <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8480 	beq.w	80029b2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 ff1a 	bl	8005f04 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d107      	bne.n	80020ea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f002 0202 	and.w	r2, r2, #2
 80020e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f003 ff08 	bl	8005f04 <USB_ReadInterrupts>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d161      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0210 	bic.w	r2, r2, #16
 800210c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f003 020f 	and.w	r2, r3, #15
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	0c5b      	lsrs	r3, r3, #17
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	2b02      	cmp	r3, #2
 8002138:	d124      	bne.n	8002184 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002140:	4013      	ands	r3, r2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d035      	beq.n	80021b2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	091b      	lsrs	r3, r3, #4
 800214e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002154:	b29b      	uxth	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	6a38      	ldr	r0, [r7, #32]
 800215a:	f003 fd3f 	bl	8005bdc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800216a:	441a      	add	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800217c:	441a      	add	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	621a      	str	r2, [r3, #32]
 8002182:	e016      	b.n	80021b2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	0c5b      	lsrs	r3, r3, #17
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	2b06      	cmp	r3, #6
 800218e:	d110      	bne.n	80021b2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002196:	2208      	movs	r2, #8
 8002198:	4619      	mov	r1, r3
 800219a:	6a38      	ldr	r0, [r7, #32]
 800219c:	f003 fd1e 	bl	8005bdc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	6a1a      	ldr	r2, [r3, #32]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ac:	441a      	add	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	699a      	ldr	r2, [r3, #24]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0210 	orr.w	r2, r2, #16
 80021c0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f003 fe9c 	bl	8005f04 <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021d6:	f040 80a7 	bne.w	8002328 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 fea1 	bl	8005f2a <USB_ReadDevAllOutEpInterrupt>
 80021e8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021ea:	e099      	b.n	8002320 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 808e 	beq.w	8002314 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	4611      	mov	r1, r2
 8002202:	4618      	mov	r0, r3
 8002204:	f003 fec5 	bl	8005f92 <USB_ReadDevOutEPInterrupt>
 8002208:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00c      	beq.n	800222e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	461a      	mov	r2, r3
 8002222:	2301      	movs	r3, #1
 8002224:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 fec3 	bl	8002fb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00c      	beq.n	8002252 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	015a      	lsls	r2, r3, #5
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	4413      	add	r3, r2
 8002240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002244:	461a      	mov	r2, r3
 8002246:	2308      	movs	r3, #8
 8002248:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800224a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 ff99 	bl	8003184 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b00      	cmp	r3, #0
 800225a:	d008      	beq.n	800226e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002268:	461a      	mov	r2, r3
 800226a:	2310      	movs	r3, #16
 800226c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d030      	beq.n	80022da <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d109      	bne.n	8002298 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002296:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	78db      	ldrb	r3, [r3, #3]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d108      	bne.n	80022c8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2200      	movs	r2, #0
 80022ba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	4619      	mov	r1, r3
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f006 fa48 	bl	8008758 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d4:	461a      	mov	r2, r3
 80022d6:	2302      	movs	r3, #2
 80022d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f0:	461a      	mov	r2, r3
 80022f2:	2320      	movs	r3, #32
 80022f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d009      	beq.n	8002314 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	015a      	lsls	r2, r3, #5
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230c:	461a      	mov	r2, r3
 800230e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002312:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	3301      	adds	r3, #1
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	2b00      	cmp	r3, #0
 8002324:	f47f af62 	bne.w	80021ec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f003 fde9 	bl	8005f04 <USB_ReadInterrupts>
 8002332:	4603      	mov	r3, r0
 8002334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002338:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800233c:	f040 80db 	bne.w	80024f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f003 fe0a 	bl	8005f5e <USB_ReadDevAllInEpInterrupt>
 800234a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002350:	e0cd      	b.n	80024ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80c2 	beq.w	80024e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	4611      	mov	r1, r2
 8002368:	4618      	mov	r0, r3
 800236a:	f003 fe30 	bl	8005fce <USB_ReadDevInEPInterrupt>
 800236e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d057      	beq.n	800242a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	2201      	movs	r2, #1
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	43db      	mvns	r3, r3
 8002394:	69f9      	ldr	r1, [r7, #28]
 8002396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800239a:	4013      	ands	r3, r2
 800239c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023aa:	461a      	mov	r2, r3
 80023ac:	2301      	movs	r3, #1
 80023ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d132      	bne.n	800241e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	334c      	adds	r3, #76	; 0x4c
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4403      	add	r3, r0
 80023d8:	3348      	adds	r3, #72	; 0x48
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4419      	add	r1, r3
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4403      	add	r3, r0
 80023ec:	334c      	adds	r3, #76	; 0x4c
 80023ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d113      	bne.n	800241e <HAL_PCD_IRQHandler+0x3a2>
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	3354      	adds	r3, #84	; 0x54
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d108      	bne.n	800241e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002416:	461a      	mov	r2, r3
 8002418:	2101      	movs	r1, #1
 800241a:	f003 fe37 	bl	800608c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f006 f912 	bl	800864e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	4413      	add	r3, r2
 800243c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002440:	461a      	mov	r2, r3
 8002442:	2308      	movs	r3, #8
 8002444:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800245c:	461a      	mov	r2, r3
 800245e:	2310      	movs	r3, #16
 8002460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	4413      	add	r3, r2
 8002474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002478:	461a      	mov	r2, r3
 800247a:	2340      	movs	r3, #64	; 0x40
 800247c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d023      	beq.n	80024d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800248a:	6a38      	ldr	r0, [r7, #32]
 800248c:	f002 fd18 	bl	8004ec0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	3338      	adds	r3, #56	; 0x38
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	3304      	adds	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	78db      	ldrb	r3, [r3, #3]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d108      	bne.n	80024be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2200      	movs	r2, #0
 80024b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	4619      	mov	r1, r3
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f006 f95f 	bl	800877c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ca:	461a      	mov	r2, r3
 80024cc:	2302      	movs	r3, #2
 80024ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 fcdb 	bl	8002e98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	3301      	adds	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f47f af2e 	bne.w	8002352 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 fd02 	bl	8005f04 <USB_ReadInterrupts>
 8002500:	4603      	mov	r3, r0
 8002502:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002506:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800250a:	d122      	bne.n	8002552 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251a:	f023 0301 	bic.w	r3, r3, #1
 800251e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002526:	2b01      	cmp	r3, #1
 8002528:	d108      	bne.n	800253c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002532:	2100      	movs	r1, #0
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fec3 	bl	80032c0 <HAL_PCDEx_LPM_Callback>
 800253a:	e002      	b.n	8002542 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f006 f8fd 	bl	800873c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fcd4 	bl	8005f04 <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002566:	d112      	bne.n	800258e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d102      	bne.n	800257e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f006 f8b9 	bl	80086f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800258c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fcb6 	bl	8005f04 <USB_ReadInterrupts>
 8002598:	4603      	mov	r3, r0
 800259a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800259e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a2:	f040 80b7 	bne.w	8002714 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2110      	movs	r1, #16
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fc7d 	bl	8004ec0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ca:	e046      	b.n	800265a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025d8:	461a      	mov	r2, r3
 80025da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f0:	0151      	lsls	r1, r2, #5
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	440a      	add	r2, r1
 80025f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002602:	015a      	lsls	r2, r3, #5
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	4413      	add	r3, r2
 8002608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800260c:	461a      	mov	r2, r3
 800260e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002612:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002624:	0151      	lsls	r1, r2, #5
 8002626:	69fa      	ldr	r2, [r7, #28]
 8002628:	440a      	add	r2, r1
 800262a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800262e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002632:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002644:	0151      	lsls	r1, r2, #5
 8002646:	69fa      	ldr	r2, [r7, #28]
 8002648:	440a      	add	r2, r1
 800264a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800264e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002652:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	3301      	adds	r3, #1
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002660:	429a      	cmp	r2, r3
 8002662:	d3b3      	bcc.n	80025cc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002672:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002676:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	2b00      	cmp	r3, #0
 800267e:	d016      	beq.n	80026ae <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002690:	f043 030b 	orr.w	r3, r3, #11
 8002694:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a6:	f043 030b 	orr.w	r3, r3, #11
 80026aa:	6453      	str	r3, [r2, #68]	; 0x44
 80026ac:	e015      	b.n	80026da <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d4:	f043 030b 	orr.w	r3, r3, #11
 80026d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026fe:	461a      	mov	r2, r3
 8002700:	f003 fcc4 	bl	800608c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fbf3 	bl	8005f04 <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002728:	d124      	bne.n	8002774 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fc89 	bl	8006046 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fc3e 	bl	8004fba <USB_GetDevSpeed>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681c      	ldr	r4, [r3, #0]
 800274a:	f001 f9e9 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 800274e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	4620      	mov	r0, r4
 800275a:	f002 f93d 	bl	80049d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f005 ff9d 	bl	800869e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002772:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f003 fbc3 	bl	8005f04 <USB_ReadInterrupts>
 800277e:	4603      	mov	r3, r0
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b08      	cmp	r3, #8
 8002786:	d10a      	bne.n	800279e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f005 ff7a 	bl	8008682 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f002 0208 	and.w	r2, r2, #8
 800279c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fbae 	bl	8005f04 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b80      	cmp	r3, #128	; 0x80
 80027b0:	d122      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027be:	2301      	movs	r3, #1
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
 80027c2:	e014      	b.n	80027ee <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fb27 	bl	8002e36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	3301      	adds	r3, #1
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d3e5      	bcc.n	80027c4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 fb81 	bl	8005f04 <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280c:	d13b      	bne.n	8002886 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800280e:	2301      	movs	r3, #1
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e02b      	b.n	800286c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3340      	adds	r3, #64	; 0x40
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d115      	bne.n	8002866 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800283a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800283c:	2b00      	cmp	r3, #0
 800283e:	da12      	bge.n	8002866 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	333f      	adds	r3, #63	; 0x3f
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4619      	mov	r1, r3
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 fae8 	bl	8002e36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	3301      	adds	r3, #1
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002872:	429a      	cmp	r2, r3
 8002874:	d3ce      	bcc.n	8002814 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695a      	ldr	r2, [r3, #20]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f003 fb3a 	bl	8005f04 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800289a:	d155      	bne.n	8002948 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800289c:	2301      	movs	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	e045      	b.n	800292e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d12e      	bne.n	8002928 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da2b      	bge.n	8002928 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d121      	bne.n	8002928 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002920:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002924:	6053      	str	r3, [r2, #4]
            break;
 8002926:	e007      	b.n	8002938 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	3301      	adds	r3, #1
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002934:	429a      	cmp	r2, r3
 8002936:	d3b4      	bcc.n	80028a2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f003 fad9 	bl	8005f04 <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295c:	d10a      	bne.n	8002974 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f005 ff1e 	bl	80087a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	695a      	ldr	r2, [r3, #20]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002972:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f003 fac3 	bl	8005f04 <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b04      	cmp	r3, #4
 8002986:	d115      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f005 ff0e 	bl	80087bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	e000      	b.n	80029b4 <HAL_PCD_IRQHandler+0x938>
      return;
 80029b2:	bf00      	nop
    }
  }
}
 80029b4:	3734      	adds	r7, #52	; 0x34
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}

080029ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_SetAddress+0x1a>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e013      	b.n	80029fc <HAL_PCD_SetAddress+0x42>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fa21 	bl	8005e34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	70fb      	strb	r3, [r7, #3]
 8002a16:	460b      	mov	r3, r1
 8002a18:	803b      	strh	r3, [r7, #0]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	da0f      	bge.n	8002a4a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 020f 	and.w	r2, r3, #15
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	3338      	adds	r3, #56	; 0x38
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3304      	adds	r3, #4
 8002a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	705a      	strb	r2, [r3, #1]
 8002a48:	e00f      	b.n	8002a6a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 020f 	and.w	r2, r3, #15
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	3304      	adds	r3, #4
 8002a62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a76:	883a      	ldrh	r2, [r7, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	78ba      	ldrb	r2, [r7, #2]
 8002a80:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	785b      	ldrb	r3, [r3, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a94:	78bb      	ldrb	r3, [r7, #2]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d102      	bne.n	8002aa0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_PCD_EP_Open+0xaa>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e00e      	b.n	8002acc <HAL_PCD_EP_Open+0xc8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f002 faa1 	bl	8005004 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002aca:	7afb      	ldrb	r3, [r7, #11]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	da0f      	bge.n	8002b08 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	f003 020f 	and.w	r2, r3, #15
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	3338      	adds	r3, #56	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	3304      	adds	r3, #4
 8002afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	705a      	strb	r2, [r3, #1]
 8002b06:	e00f      	b.n	8002b28 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f003 020f 	and.w	r2, r3, #15
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_PCD_EP_Close+0x6e>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e00e      	b.n	8002b60 <HAL_PCD_EP_Close+0x8c>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68f9      	ldr	r1, [r7, #12]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f002 fadf 	bl	8005114 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b78:	7afb      	ldrb	r3, [r7, #11]
 8002b7a:	f003 020f 	and.w	r2, r3, #15
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3304      	adds	r3, #4
 8002b90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002baa:	7afb      	ldrb	r3, [r7, #11]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bc4:	7afb      	ldrb	r3, [r7, #11]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6979      	ldr	r1, [r7, #20]
 8002bdc:	f002 fdbe 	bl	800575c <USB_EP0StartXfer>
 8002be0:	e008      	b.n	8002bf4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	6979      	ldr	r1, [r7, #20]
 8002bf0:	f002 fb6c 	bl	80052cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c20:	681b      	ldr	r3, [r3, #0]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	3338      	adds	r3, #56	; 0x38
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	4413      	add	r3, r2
 8002c52:	3304      	adds	r3, #4
 8002c54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2200      	movs	r2, #0
 8002c66:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6979      	ldr	r1, [r7, #20]
 8002ca0:	f002 fd5c 	bl	800575c <USB_EP0StartXfer>
 8002ca4:	e008      	b.n	8002cb8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6979      	ldr	r1, [r7, #20]
 8002cb4:	f002 fb0a 	bl	80052cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b084      	sub	sp, #16
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d901      	bls.n	8002ce0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e050      	b.n	8002d82 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	da0f      	bge.n	8002d08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 020f 	and.w	r2, r3, #15
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	3338      	adds	r3, #56	; 0x38
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	705a      	strb	r2, [r3, #1]
 8002d06:	e00d      	b.n	8002d24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_PCD_EP_SetStall+0x82>
 8002d40:	2302      	movs	r3, #2
 8002d42:	e01e      	b.n	8002d82 <HAL_PCD_EP_SetStall+0xc0>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68f9      	ldr	r1, [r7, #12]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f002 ff9a 	bl	8005c8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d58:	78fb      	ldrb	r3, [r7, #3]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	b2d9      	uxtb	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d72:	461a      	mov	r2, r3
 8002d74:	f003 f98a 	bl	800608c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	460b      	mov	r3, r1
 8002d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 020f 	and.w	r2, r3, #15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d901      	bls.n	8002da8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e042      	b.n	8002e2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da0f      	bge.n	8002dd0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 020f 	and.w	r2, r3, #15
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	3338      	adds	r3, #56	; 0x38
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	705a      	strb	r2, [r3, #1]
 8002dce:	e00f      	b.n	8002df0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	f003 020f 	and.w	r2, r3, #15
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	3304      	adds	r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_PCD_EP_ClrStall+0x86>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e00e      	b.n	8002e2e <HAL_PCD_EP_ClrStall+0xa4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68f9      	ldr	r1, [r7, #12]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 ffa2 	bl	8005d68 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da0c      	bge.n	8002e64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	f003 020f 	and.w	r2, r3, #15
 8002e50:	4613      	mov	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	3338      	adds	r3, #56	; 0x38
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3304      	adds	r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e00c      	b.n	8002e7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	f003 020f 	and.w	r2, r3, #15
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68f9      	ldr	r1, [r7, #12]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f002 fdc1 	bl	8005a0c <USB_EPStopXfer>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	; 0x28
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	3338      	adds	r3, #56	; 0x38
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d901      	bls.n	8002ed0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e06c      	b.n	8002faa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	699a      	ldr	r2, [r3, #24]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d902      	bls.n	8002eec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	3303      	adds	r3, #3
 8002ef0:	089b      	lsrs	r3, r3, #2
 8002ef2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ef4:	e02b      	b.n	8002f4e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d902      	bls.n	8002f12 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3303      	adds	r3, #3
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6919      	ldr	r1, [r3, #16]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6978      	ldr	r0, [r7, #20]
 8002f32:	f002 fe15 	bl	8005b60 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	441a      	add	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6a1a      	ldr	r2, [r3, #32]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	441a      	add	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d809      	bhi.n	8002f78 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1a      	ldr	r2, [r3, #32]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d203      	bcs.n	8002f78 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1be      	bne.n	8002ef6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	699a      	ldr	r2, [r3, #24]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d811      	bhi.n	8002fa8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	6939      	ldr	r1, [r7, #16]
 8002fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	333c      	adds	r3, #60	; 0x3c
 8002fcc:	3304      	adds	r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d17b      	bne.n	80030e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d015      	beq.n	8003020 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4a61      	ldr	r2, [pc, #388]	; (800317c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	f240 80b9 	bls.w	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80b3 	beq.w	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	4413      	add	r3, r2
 8003012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003016:	461a      	mov	r2, r3
 8003018:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301c:	6093      	str	r3, [r2, #8]
 800301e:	e0a7      	b.n	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	2320      	movs	r3, #32
 800303a:	6093      	str	r3, [r2, #8]
 800303c:	e098      	b.n	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 8093 	bne.w	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	4a4b      	ldr	r2, [pc, #300]	; (800317c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d90f      	bls.n	8003072 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00a      	beq.n	8003072 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	4413      	add	r3, r2
 8003064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003068:	461a      	mov	r2, r3
 800306a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306e:	6093      	str	r3, [r2, #8]
 8003070:	e07e      	b.n	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4413      	add	r3, r2
 8003084:	3304      	adds	r3, #4
 8003086:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	69da      	ldr	r2, [r3, #28]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	0159      	lsls	r1, r3, #5
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	440b      	add	r3, r1
 8003094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800309e:	1ad2      	subs	r2, r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d114      	bne.n	80030d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030bc:	461a      	mov	r2, r3
 80030be:	2101      	movs	r1, #1
 80030c0:	f002 ffe4 	bl	800608c <USB_EP0_OutStart>
 80030c4:	e006      	b.n	80030d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	441a      	add	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f005 fa9c 	bl	8008618 <HAL_PCD_DataOutStageCallback>
 80030e0:	e046      	b.n	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	4a26      	ldr	r2, [pc, #152]	; (8003180 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d124      	bne.n	8003134 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003100:	461a      	mov	r2, r3
 8003102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003106:	6093      	str	r3, [r2, #8]
 8003108:	e032      	b.n	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003120:	461a      	mov	r2, r3
 8003122:	2320      	movs	r3, #32
 8003124:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f005 fa73 	bl	8008618 <HAL_PCD_DataOutStageCallback>
 8003132:	e01d      	b.n	8003170 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d114      	bne.n	8003164 <PCD_EP_OutXfrComplete_int+0x1b0>
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d108      	bne.n	8003164 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800315c:	461a      	mov	r2, r3
 800315e:	2100      	movs	r1, #0
 8003160:	f002 ff94 	bl	800608c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f005 fa54 	bl	8008618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3720      	adds	r7, #32
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	4f54300a 	.word	0x4f54300a
 8003180:	4f54310a 	.word	0x4f54310a

08003184 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	333c      	adds	r3, #60	; 0x3c
 800319c:	3304      	adds	r3, #4
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4a15      	ldr	r2, [pc, #84]	; (800320c <PCD_EP_OutSetupPacket_int+0x88>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d90e      	bls.n	80031d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d0:	461a      	mov	r2, r3
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f005 fa0b 	bl	80085f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <PCD_EP_OutSetupPacket_int+0x88>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d90c      	bls.n	8003200 <PCD_EP_OutSetupPacket_int+0x7c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d108      	bne.n	8003200 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031f8:	461a      	mov	r2, r3
 80031fa:	2101      	movs	r1, #1
 80031fc:	f002 ff46 	bl	800608c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3718      	adds	r7, #24
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	4f54300a 	.word	0x4f54300a

08003210 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
 800321c:	4613      	mov	r3, r2
 800321e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800322e:	883b      	ldrh	r3, [r7, #0]
 8003230:	0419      	lsls	r1, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	430a      	orrs	r2, r1
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
 800323c:	e028      	b.n	8003290 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
 8003250:	e00d      	b.n	800326e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	3340      	adds	r3, #64	; 0x40
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	4413      	add	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003268:	7bfb      	ldrb	r3, [r7, #15]
 800326a:	3301      	adds	r3, #1
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	3b01      	subs	r3, #1
 8003274:	429a      	cmp	r2, r3
 8003276:	d3ec      	bcc.n	8003252 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003278:	883b      	ldrh	r3, [r7, #0]
 800327a:	0418      	lsls	r0, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	3b01      	subs	r3, #1
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	4302      	orrs	r2, r0
 8003288:	3340      	adds	r3, #64	; 0x40
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e267      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d075      	beq.n	80033e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f6:	4b88      	ldr	r3, [pc, #544]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d00c      	beq.n	800331c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003302:	4b85      	ldr	r3, [pc, #532]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d112      	bne.n	8003334 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b82      	ldr	r3, [pc, #520]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003316:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331a:	d10b      	bne.n	8003334 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	4b7e      	ldr	r3, [pc, #504]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d05b      	beq.n	80033e0 <HAL_RCC_OscConfig+0x108>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d157      	bne.n	80033e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e242      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333c:	d106      	bne.n	800334c <HAL_RCC_OscConfig+0x74>
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a75      	ldr	r2, [pc, #468]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e01d      	b.n	8003388 <HAL_RCC_OscConfig+0xb0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x98>
 8003356:	4b70      	ldr	r3, [pc, #448]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a6f      	ldr	r2, [pc, #444]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 800335c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b6d      	ldr	r3, [pc, #436]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6c      	ldr	r2, [pc, #432]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0xb0>
 8003370:	4b69      	ldr	r3, [pc, #420]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a68      	ldr	r2, [pc, #416]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337a:	6013      	str	r3, [r2, #0]
 800337c:	4b66      	ldr	r3, [pc, #408]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a65      	ldr	r2, [pc, #404]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003386:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d013      	beq.n	80033b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fd fdf0 	bl	8000f74 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003398:	f7fd fdec 	bl	8000f74 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e207      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCC_OscConfig+0xc0>
 80033b6:	e014      	b.n	80033e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fd fddc 	bl	8000f74 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c0:	f7fd fdd8 	bl	8000f74 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b64      	cmp	r3, #100	; 0x64
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e1f3      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	4b51      	ldr	r3, [pc, #324]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0xe8>
 80033de:	e000      	b.n	80033e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d063      	beq.n	80034b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ee:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003402:	2b08      	cmp	r3, #8
 8003404:	d11c      	bne.n	8003440 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003406:	4b44      	ldr	r3, [pc, #272]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003412:	4b41      	ldr	r3, [pc, #260]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_RCC_OscConfig+0x152>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e1c7      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342a:	4b3b      	ldr	r3, [pc, #236]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4937      	ldr	r1, [pc, #220]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 800343a:	4313      	orrs	r3, r2
 800343c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	e03a      	b.n	80034b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d020      	beq.n	800348a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003448:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7fd fd91 	bl	8000f74 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003456:	f7fd fd8d 	bl	8000f74 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e1a8      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4925      	ldr	r1, [pc, #148]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 8003484:	4313      	orrs	r3, r2
 8003486:	600b      	str	r3, [r1, #0]
 8003488:	e015      	b.n	80034b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_OscConfig+0x244>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003490:	f7fd fd70 	bl	8000f74 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003498:	f7fd fd6c 	bl	8000f74 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e187      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d036      	beq.n	8003530 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d016      	beq.n	80034f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ca:	4b15      	ldr	r3, [pc, #84]	; (8003520 <HAL_RCC_OscConfig+0x248>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d0:	f7fd fd50 	bl	8000f74 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d8:	f7fd fd4c 	bl	8000f74 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e167      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <HAL_RCC_OscConfig+0x240>)
 80034ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x200>
 80034f6:	e01b      	b.n	8003530 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCC_OscConfig+0x248>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fe:	f7fd fd39 	bl	8000f74 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003504:	e00e      	b.n	8003524 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003506:	f7fd fd35 	bl	8000f74 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d907      	bls.n	8003524 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e150      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
 8003518:	40023800 	.word	0x40023800
 800351c:	42470000 	.word	0x42470000
 8003520:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003524:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1ea      	bne.n	8003506 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 8097 	beq.w	800366c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003542:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10f      	bne.n	800356e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	4b7d      	ldr	r3, [pc, #500]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a7c      	ldr	r2, [pc, #496]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
 800355e:	4b7a      	ldr	r3, [pc, #488]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356a:	2301      	movs	r3, #1
 800356c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356e:	4b77      	ldr	r3, [pc, #476]	; (800374c <HAL_RCC_OscConfig+0x474>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	2b00      	cmp	r3, #0
 8003578:	d118      	bne.n	80035ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357a:	4b74      	ldr	r3, [pc, #464]	; (800374c <HAL_RCC_OscConfig+0x474>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a73      	ldr	r2, [pc, #460]	; (800374c <HAL_RCC_OscConfig+0x474>)
 8003580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003586:	f7fd fcf5 	bl	8000f74 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358e:	f7fd fcf1 	bl	8000f74 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e10c      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	4b6a      	ldr	r3, [pc, #424]	; (800374c <HAL_RCC_OscConfig+0x474>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0f0      	beq.n	800358e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d106      	bne.n	80035c2 <HAL_RCC_OscConfig+0x2ea>
 80035b4:	4b64      	ldr	r3, [pc, #400]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a63      	ldr	r2, [pc, #396]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
 80035c0:	e01c      	b.n	80035fc <HAL_RCC_OscConfig+0x324>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b05      	cmp	r3, #5
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x30c>
 80035ca:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	4a5e      	ldr	r2, [pc, #376]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	6713      	str	r3, [r2, #112]	; 0x70
 80035d6:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	4a5b      	ldr	r2, [pc, #364]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6713      	str	r3, [r2, #112]	; 0x70
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0x324>
 80035e4:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a57      	ldr	r2, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	4b55      	ldr	r3, [pc, #340]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f4:	4a54      	ldr	r2, [pc, #336]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80035f6:	f023 0304 	bic.w	r3, r3, #4
 80035fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003604:	f7fd fcb6 	bl	8000f74 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360a:	e00a      	b.n	8003622 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800360c:	f7fd fcb2 	bl	8000f74 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e0cb      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003622:	4b49      	ldr	r3, [pc, #292]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0ee      	beq.n	800360c <HAL_RCC_OscConfig+0x334>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003630:	f7fd fca0 	bl	8000f74 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003638:	f7fd fc9c 	bl	8000f74 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e0b5      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364e:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1ee      	bne.n	8003638 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800365a:	7dfb      	ldrb	r3, [r7, #23]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003660:	4b39      	ldr	r3, [pc, #228]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	4a38      	ldr	r2, [pc, #224]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 80a1 	beq.w	80037b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003676:	4b34      	ldr	r3, [pc, #208]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	2b08      	cmp	r3, #8
 8003680:	d05c      	beq.n	800373c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d141      	bne.n	800370e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_RCC_OscConfig+0x478>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fd fc70 	bl	8000f74 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7fd fc6c 	bl	8000f74 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e087      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036aa:	4b27      	ldr	r3, [pc, #156]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69da      	ldr	r2, [r3, #28]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	019b      	lsls	r3, r3, #6
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	3b01      	subs	r3, #1
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d8:	061b      	lsls	r3, r3, #24
 80036da:	491b      	ldr	r1, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x478>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fc45 	bl	8000f74 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd fc41 	bl	8000f74 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e05c      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x416>
 800370c:	e054      	b.n	80037b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x478>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fd fc2e 	bl	8000f74 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371c:	f7fd fc2a 	bl	8000f74 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e045      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_OscConfig+0x470>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x444>
 800373a:	e03d      	b.n	80037b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e038      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
 8003748:	40023800 	.word	0x40023800
 800374c:	40007000 	.word	0x40007000
 8003750:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003754:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_RCC_OscConfig+0x4ec>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d028      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376c:	429a      	cmp	r2, r3
 800376e:	d121      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d11a      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800378a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	3b01      	subs	r3, #1
 800379e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d107      	bne.n	80037b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40023800 	.word	0x40023800

080037c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e0cc      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b68      	ldr	r3, [pc, #416]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d90c      	bls.n	8003804 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b65      	ldr	r3, [pc, #404]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0b8      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d020      	beq.n	8003852 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a58      	ldr	r2, [pc, #352]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003826:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	494d      	ldr	r1, [pc, #308]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d044      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d119      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d003      	beq.n	8003886 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003882:	2b03      	cmp	r3, #3
 8003884:	d107      	bne.n	8003896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003886:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e06f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003896:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e067      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a6:	4b37      	ldr	r3, [pc, #220]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f023 0203 	bic.w	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	4934      	ldr	r1, [pc, #208]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b8:	f7fd fb5c 	bl	8000f74 <HAL_GetTick>
 80038bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	e00a      	b.n	80038d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c0:	f7fd fb58 	bl	8000f74 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e04f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 020c 	and.w	r2, r3, #12
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d1eb      	bne.n	80038c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d20c      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b22      	ldr	r3, [pc, #136]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e032      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4916      	ldr	r1, [pc, #88]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800394e:	f000 f821 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003952:	4602      	mov	r2, r0
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	490a      	ldr	r1, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	5ccb      	ldrb	r3, [r1, r3]
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fabc 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00
 8003984:	40023800 	.word	0x40023800
 8003988:	08008c2c 	.word	0x08008c2c
 800398c:	20000000 	.word	0x20000000
 8003990:	20000004 	.word	0x20000004

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003998:	b090      	sub	sp, #64	; 0x40
 800399a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
 80039a0:	2300      	movs	r3, #0
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a4:	2300      	movs	r3, #0
 80039a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ac:	4b59      	ldr	r3, [pc, #356]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d00d      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x40>
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	f200 80a1 	bhi.w	8003b00 <HAL_RCC_GetSysClockFreq+0x16c>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x34>
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x3a>
 80039c6:	e09b      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x184>)
 80039ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039cc:	e09b      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ce:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x188>)
 80039d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039d2:	e098      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d4:	4b4f      	ldr	r3, [pc, #316]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039de:	4b4d      	ldr	r3, [pc, #308]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d028      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ea:	4b4a      	ldr	r3, [pc, #296]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	2200      	movs	r2, #0
 80039f2:	623b      	str	r3, [r7, #32]
 80039f4:	627a      	str	r2, [r7, #36]	; 0x24
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039fc:	2100      	movs	r1, #0
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a00:	fb03 f201 	mul.w	r2, r3, r1
 8003a04:	2300      	movs	r3, #0
 8003a06:	fb00 f303 	mul.w	r3, r0, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4a43      	ldr	r2, [pc, #268]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a14:	460a      	mov	r2, r1
 8003a16:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a1a:	4413      	add	r3, r2
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a20:	2200      	movs	r2, #0
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	61fa      	str	r2, [r7, #28]
 8003a26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a2e:	f7fc fbd1 	bl	80001d4 <__aeabi_uldivmod>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4613      	mov	r3, r2
 8003a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3a:	e053      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a3c:	4b35      	ldr	r3, [pc, #212]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	2200      	movs	r2, #0
 8003a44:	613b      	str	r3, [r7, #16]
 8003a46:	617a      	str	r2, [r7, #20]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a4e:	f04f 0b00 	mov.w	fp, #0
 8003a52:	4652      	mov	r2, sl
 8003a54:	465b      	mov	r3, fp
 8003a56:	f04f 0000 	mov.w	r0, #0
 8003a5a:	f04f 0100 	mov.w	r1, #0
 8003a5e:	0159      	lsls	r1, r3, #5
 8003a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a64:	0150      	lsls	r0, r2, #5
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a6e:	eb63 090b 	sbc.w	r9, r3, fp
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a86:	ebb2 0408 	subs.w	r4, r2, r8
 8003a8a:	eb63 0509 	sbc.w	r5, r3, r9
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	00eb      	lsls	r3, r5, #3
 8003a98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9c:	00e2      	lsls	r2, r4, #3
 8003a9e:	4614      	mov	r4, r2
 8003aa0:	461d      	mov	r5, r3
 8003aa2:	eb14 030a 	adds.w	r3, r4, sl
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	eb45 030b 	adc.w	r3, r5, fp
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aba:	4629      	mov	r1, r5
 8003abc:	028b      	lsls	r3, r1, #10
 8003abe:	4621      	mov	r1, r4
 8003ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	028a      	lsls	r2, r1, #10
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
 8003ad2:	60fa      	str	r2, [r7, #12]
 8003ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ad8:	f7fc fb7c 	bl	80001d4 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3740      	adds	r7, #64	; 0x40
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	017d7840 	.word	0x017d7840

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20000000 	.word	0x20000000

08003b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e041      	b.n	8003bce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd f84c 	bl	8000bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 fb02 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e041      	b.n	8003c6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 f839 	bl	8003c74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f000 fab3 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <HAL_TIM_PWM_Start+0x24>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	bf14      	ite	ne
 8003ca4:	2301      	movne	r3, #1
 8003ca6:	2300      	moveq	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	e022      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d109      	bne.n	8003cc6 <HAL_TIM_PWM_Start+0x3e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	e015      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d109      	bne.n	8003ce0 <HAL_TIM_PWM_Start+0x58>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	e008      	b.n	8003cf2 <HAL_TIM_PWM_Start+0x6a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e068      	b.n	8003dcc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d104      	bne.n	8003d0a <HAL_TIM_PWM_Start+0x82>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d08:	e013      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d104      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x92>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d18:	e00b      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d104      	bne.n	8003d2a <HAL_TIM_PWM_Start+0xa2>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d28:	e003      	b.n	8003d32 <HAL_TIM_PWM_Start+0xaa>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2201      	movs	r2, #1
 8003d38:	6839      	ldr	r1, [r7, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fd57 	bl	80047ee <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <HAL_TIM_PWM_Start+0x14c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d107      	bne.n	8003d5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1d      	ldr	r2, [pc, #116]	; (8003dd4 <HAL_TIM_PWM_Start+0x14c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d018      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6c:	d013      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_TIM_PWM_Start+0x150>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <HAL_TIM_PWM_Start+0x154>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <HAL_TIM_PWM_Start+0x158>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x10e>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a14      	ldr	r2, [pc, #80]	; (8003de4 <HAL_TIM_PWM_Start+0x15c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d111      	bne.n	8003dba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b06      	cmp	r3, #6
 8003da6:	d010      	beq.n	8003dca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db8:	e007      	b.n	8003dca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f042 0201 	orr.w	r2, r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40014000 	.word	0x40014000

08003de8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e0ae      	b.n	8003f64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b0c      	cmp	r3, #12
 8003e12:	f200 809f 	bhi.w	8003f54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003f55 	.word	0x08003f55
 8003e24:	08003f55 	.word	0x08003f55
 8003e28:	08003f55 	.word	0x08003f55
 8003e2c:	08003e91 	.word	0x08003e91
 8003e30:	08003f55 	.word	0x08003f55
 8003e34:	08003f55 	.word	0x08003f55
 8003e38:	08003f55 	.word	0x08003f55
 8003e3c:	08003ed3 	.word	0x08003ed3
 8003e40:	08003f55 	.word	0x08003f55
 8003e44:	08003f55 	.word	0x08003f55
 8003e48:	08003f55 	.word	0x08003f55
 8003e4c:	08003f13 	.word	0x08003f13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fa12 	bl	8004280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0208 	orr.w	r2, r2, #8
 8003e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699a      	ldr	r2, [r3, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0204 	bic.w	r2, r2, #4
 8003e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6999      	ldr	r1, [r3, #24]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	619a      	str	r2, [r3, #24]
      break;
 8003e8e:	e064      	b.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fa58 	bl	800434c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6999      	ldr	r1, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	021a      	lsls	r2, r3, #8
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	619a      	str	r2, [r3, #24]
      break;
 8003ed0:	e043      	b.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 faa3 	bl	8004424 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0208 	orr.w	r2, r2, #8
 8003eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 0204 	bic.w	r2, r2, #4
 8003efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69d9      	ldr	r1, [r3, #28]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	61da      	str	r2, [r3, #28]
      break;
 8003f10:	e023      	b.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 faed 	bl	80044f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	021a      	lsls	r2, r3, #8
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	61da      	str	r2, [r3, #28]
      break;
 8003f52:	e002      	b.n	8003f5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIM_ConfigClockSource+0x1c>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0b4      	b.n	80040f2 <HAL_TIM_ConfigClockSource+0x186>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc0:	d03e      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0xd4>
 8003fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc6:	f200 8087 	bhi.w	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fce:	f000 8086 	beq.w	80040de <HAL_TIM_ConfigClockSource+0x172>
 8003fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd6:	d87f      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b70      	cmp	r3, #112	; 0x70
 8003fda:	d01a      	beq.n	8004012 <HAL_TIM_ConfigClockSource+0xa6>
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d87b      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d050      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x11a>
 8003fe4:	2b60      	cmp	r3, #96	; 0x60
 8003fe6:	d877      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b50      	cmp	r3, #80	; 0x50
 8003fea:	d03c      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0xfa>
 8003fec:	2b50      	cmp	r3, #80	; 0x50
 8003fee:	d873      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d058      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x13a>
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d86f      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff8:	2b30      	cmp	r3, #48	; 0x30
 8003ffa:	d064      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ffc:	2b30      	cmp	r3, #48	; 0x30
 8003ffe:	d86b      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004000:	2b20      	cmp	r3, #32
 8004002:	d060      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	2b20      	cmp	r3, #32
 8004006:	d867      	bhi.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d05c      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x15a>
 800400c:	2b10      	cmp	r3, #16
 800400e:	d05a      	beq.n	80040c6 <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	e062      	b.n	80040d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6818      	ldr	r0, [r3, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6899      	ldr	r1, [r3, #8]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f000 fbc4 	bl	80047ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004034:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	609a      	str	r2, [r3, #8]
      break;
 800403e:	e04f      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6818      	ldr	r0, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	6899      	ldr	r1, [r3, #8]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f000 fbad 	bl	80047ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004062:	609a      	str	r2, [r3, #8]
      break;
 8004064:	e03c      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	f000 fb21 	bl	80046ba <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2150      	movs	r1, #80	; 0x50
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fb7a 	bl	8004778 <TIM_ITRx_SetConfig>
      break;
 8004084:	e02c      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6859      	ldr	r1, [r3, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	461a      	mov	r2, r3
 8004094:	f000 fb40 	bl	8004718 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2160      	movs	r1, #96	; 0x60
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fb6a 	bl	8004778 <TIM_ITRx_SetConfig>
      break;
 80040a4:	e01c      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6818      	ldr	r0, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6859      	ldr	r1, [r3, #4]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	461a      	mov	r2, r3
 80040b4:	f000 fb01 	bl	80046ba <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2140      	movs	r1, #64	; 0x40
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fb5a 	bl	8004778 <TIM_ITRx_SetConfig>
      break;
 80040c4:	e00c      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f000 fb51 	bl	8004778 <TIM_ITRx_SetConfig>
      break;
 80040d6:	e003      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
      break;
 80040dc:	e000      	b.n	80040e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_SlaveConfigSynchro+0x18>
 800410e:	2302      	movs	r3, #2
 8004110:	e031      	b.n	8004176 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004122:	6839      	ldr	r1, [r7, #0]
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fa37 	bl	8004598 <TIM_SlaveTimer_SetConfig>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e018      	b.n	8004176 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004152:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004162:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a34      	ldr	r2, [pc, #208]	; (8004264 <TIM_Base_SetConfig+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00f      	beq.n	80041b8 <TIM_Base_SetConfig+0x38>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419e:	d00b      	beq.n	80041b8 <TIM_Base_SetConfig+0x38>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a31      	ldr	r2, [pc, #196]	; (8004268 <TIM_Base_SetConfig+0xe8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d007      	beq.n	80041b8 <TIM_Base_SetConfig+0x38>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a30      	ldr	r2, [pc, #192]	; (800426c <TIM_Base_SetConfig+0xec>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_Base_SetConfig+0x38>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a2f      	ldr	r2, [pc, #188]	; (8004270 <TIM_Base_SetConfig+0xf0>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a25      	ldr	r2, [pc, #148]	; (8004264 <TIM_Base_SetConfig+0xe4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01b      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d017      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a22      	ldr	r2, [pc, #136]	; (8004268 <TIM_Base_SetConfig+0xe8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a21      	ldr	r2, [pc, #132]	; (800426c <TIM_Base_SetConfig+0xec>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a20      	ldr	r2, [pc, #128]	; (8004270 <TIM_Base_SetConfig+0xf0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <TIM_Base_SetConfig+0xf4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <TIM_Base_SetConfig+0xf8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a1d      	ldr	r2, [pc, #116]	; (800427c <TIM_Base_SetConfig+0xfc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a08      	ldr	r2, [pc, #32]	; (8004264 <TIM_Base_SetConfig+0xe4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d103      	bne.n	8004250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	615a      	str	r2, [r3, #20]
}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800
 8004270:	40000c00 	.word	0x40000c00
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800

08004280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0201 	bic.w	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f023 0302 	bic.w	r3, r3, #2
 80042c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <TIM_OC1_SetConfig+0xc8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d10c      	bne.n	80042f6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0308 	bic.w	r3, r3, #8
 80042e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f023 0304 	bic.w	r3, r3, #4
 80042f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a13      	ldr	r2, [pc, #76]	; (8004348 <TIM_OC1_SetConfig+0xc8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d111      	bne.n	8004322 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800430c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	621a      	str	r2, [r3, #32]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40010000 	.word	0x40010000

0800434c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0210 	bic.w	r2, r3, #16
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0320 	bic.w	r3, r3, #32
 8004396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <TIM_OC2_SetConfig+0xd4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10d      	bne.n	80043c8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a15      	ldr	r2, [pc, #84]	; (8004420 <TIM_OC2_SetConfig+0xd4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d113      	bne.n	80043f8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40010000 	.word	0x40010000

08004424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800446c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a1d      	ldr	r2, [pc, #116]	; (80044f4 <TIM_OC3_SetConfig+0xd0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d10d      	bne.n	800449e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004488:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800449c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <TIM_OC3_SetConfig+0xd0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d113      	bne.n	80044ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40010000 	.word	0x40010000

080044f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a1b      	ldr	r3, [r3, #32]
 8004512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	021b      	lsls	r3, r3, #8
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	4313      	orrs	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	031b      	lsls	r3, r3, #12
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <TIM_OC4_SetConfig+0x9c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d109      	bne.n	800456c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800455e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	019b      	lsls	r3, r3, #6
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	621a      	str	r2, [r3, #32]
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010000 	.word	0x40010000

08004598 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b70      	cmp	r3, #112	; 0x70
 80045e0:	d01a      	beq.n	8004618 <TIM_SlaveTimer_SetConfig+0x80>
 80045e2:	2b70      	cmp	r3, #112	; 0x70
 80045e4:	d860      	bhi.n	80046a8 <TIM_SlaveTimer_SetConfig+0x110>
 80045e6:	2b60      	cmp	r3, #96	; 0x60
 80045e8:	d054      	beq.n	8004694 <TIM_SlaveTimer_SetConfig+0xfc>
 80045ea:	2b60      	cmp	r3, #96	; 0x60
 80045ec:	d85c      	bhi.n	80046a8 <TIM_SlaveTimer_SetConfig+0x110>
 80045ee:	2b50      	cmp	r3, #80	; 0x50
 80045f0:	d046      	beq.n	8004680 <TIM_SlaveTimer_SetConfig+0xe8>
 80045f2:	2b50      	cmp	r3, #80	; 0x50
 80045f4:	d858      	bhi.n	80046a8 <TIM_SlaveTimer_SetConfig+0x110>
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d019      	beq.n	800462e <TIM_SlaveTimer_SetConfig+0x96>
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d854      	bhi.n	80046a8 <TIM_SlaveTimer_SetConfig+0x110>
 80045fe:	2b30      	cmp	r3, #48	; 0x30
 8004600:	d055      	beq.n	80046ae <TIM_SlaveTimer_SetConfig+0x116>
 8004602:	2b30      	cmp	r3, #48	; 0x30
 8004604:	d850      	bhi.n	80046a8 <TIM_SlaveTimer_SetConfig+0x110>
 8004606:	2b20      	cmp	r3, #32
 8004608:	d051      	beq.n	80046ae <TIM_SlaveTimer_SetConfig+0x116>
 800460a:	2b20      	cmp	r3, #32
 800460c:	d84c      	bhi.n	80046a8 <TIM_SlaveTimer_SetConfig+0x110>
 800460e:	2b00      	cmp	r3, #0
 8004610:	d04d      	beq.n	80046ae <TIM_SlaveTimer_SetConfig+0x116>
 8004612:	2b10      	cmp	r3, #16
 8004614:	d04b      	beq.n	80046ae <TIM_SlaveTimer_SetConfig+0x116>
 8004616:	e047      	b.n	80046a8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68d9      	ldr	r1, [r3, #12]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f000 f8c1 	bl	80047ae <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800462c:	e040      	b.n	80046b0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b05      	cmp	r3, #5
 8004634:	d101      	bne.n	800463a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e03b      	b.n	80046b2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6a1a      	ldr	r2, [r3, #32]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0201 	bic.w	r2, r2, #1
 8004650:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004660:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	621a      	str	r2, [r3, #32]
      break;
 800467e:	e017      	b.n	80046b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6899      	ldr	r1, [r3, #8]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	461a      	mov	r2, r3
 800468e:	f000 f814 	bl	80046ba <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004692:	e00d      	b.n	80046b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	6899      	ldr	r1, [r3, #8]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	461a      	mov	r2, r3
 80046a2:	f000 f839 	bl	8004718 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80046a6:	e003      	b.n	80046b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
      break;
 80046ac:	e000      	b.n	80046b0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80046ae:	bf00      	nop
  }

  return status;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b087      	sub	sp, #28
 80046be:	af00      	add	r7, sp, #0
 80046c0:	60f8      	str	r0, [r7, #12]
 80046c2:	60b9      	str	r1, [r7, #8]
 80046c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f023 0201 	bic.w	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 030a 	bic.w	r3, r3, #10
 80046f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	bf00      	nop
 800470e:	371c      	adds	r7, #28
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f023 0210 	bic.w	r2, r3, #16
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	031b      	lsls	r3, r3, #12
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004754:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	011b      	lsls	r3, r3, #4
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	621a      	str	r2, [r3, #32]
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	f043 0307 	orr.w	r3, r3, #7
 800479a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	609a      	str	r2, [r3, #8]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	021a      	lsls	r2, r3, #8
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	609a      	str	r2, [r3, #8]
}
 80047e2:	bf00      	nop
 80047e4:	371c      	adds	r7, #28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b087      	sub	sp, #28
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2201      	movs	r2, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	43db      	mvns	r3, r3
 8004810:	401a      	ands	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1a      	ldr	r2, [r3, #32]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	431a      	orrs	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	621a      	str	r2, [r3, #32]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800484c:	2302      	movs	r3, #2
 800484e:	e050      	b.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1c      	ldr	r2, [pc, #112]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d018      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800489c:	d013      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a18      	ldr	r2, [pc, #96]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00e      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a16      	ldr	r2, [pc, #88]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d009      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a15      	ldr	r2, [pc, #84]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d004      	beq.n	80048c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a13      	ldr	r2, [pc, #76]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d10c      	bne.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00
 8004910:	40014000 	.word	0x40014000

08004914 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004914:	b084      	sub	sp, #16
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	f107 001c 	add.w	r0, r7, #28
 8004922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	2b01      	cmp	r3, #1
 800492a:	d122      	bne.n	8004972 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d105      	bne.n	8004966 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fbee 	bl	8006148 <USB_CoreReset>
 800496c:	4603      	mov	r3, r0
 800496e:	73fb      	strb	r3, [r7, #15]
 8004970:	e01a      	b.n	80049a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f001 fbe2 	bl	8006148 <USB_CoreReset>
 8004984:	4603      	mov	r3, r0
 8004986:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
 800499a:	e005      	b.n	80049a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10b      	bne.n	80049c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f043 0206 	orr.w	r2, r3, #6
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f043 0220 	orr.w	r2, r3, #32
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d2:	b004      	add	sp, #16
 80049d4:	4770      	bx	lr
	...

080049d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	4613      	mov	r3, r2
 80049e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d165      	bne.n	8004ab8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4a41      	ldr	r2, [pc, #260]	; (8004af4 <USB_SetTurnaroundTime+0x11c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d906      	bls.n	8004a02 <USB_SetTurnaroundTime+0x2a>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4a40      	ldr	r2, [pc, #256]	; (8004af8 <USB_SetTurnaroundTime+0x120>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d202      	bcs.n	8004a02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049fc:	230f      	movs	r3, #15
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e062      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <USB_SetTurnaroundTime+0x120>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d306      	bcc.n	8004a18 <USB_SetTurnaroundTime+0x40>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4a3b      	ldr	r2, [pc, #236]	; (8004afc <USB_SetTurnaroundTime+0x124>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d202      	bcs.n	8004a18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a12:	230e      	movs	r3, #14
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e057      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4a38      	ldr	r2, [pc, #224]	; (8004afc <USB_SetTurnaroundTime+0x124>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d306      	bcc.n	8004a2e <USB_SetTurnaroundTime+0x56>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4a37      	ldr	r2, [pc, #220]	; (8004b00 <USB_SetTurnaroundTime+0x128>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d202      	bcs.n	8004a2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a28:	230d      	movs	r3, #13
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	e04c      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	4a33      	ldr	r2, [pc, #204]	; (8004b00 <USB_SetTurnaroundTime+0x128>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d306      	bcc.n	8004a44 <USB_SetTurnaroundTime+0x6c>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4a32      	ldr	r2, [pc, #200]	; (8004b04 <USB_SetTurnaroundTime+0x12c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d802      	bhi.n	8004a44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a3e:	230c      	movs	r3, #12
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	e041      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4a2f      	ldr	r2, [pc, #188]	; (8004b04 <USB_SetTurnaroundTime+0x12c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d906      	bls.n	8004a5a <USB_SetTurnaroundTime+0x82>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a2e      	ldr	r2, [pc, #184]	; (8004b08 <USB_SetTurnaroundTime+0x130>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d802      	bhi.n	8004a5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a54:	230b      	movs	r3, #11
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e036      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a2a      	ldr	r2, [pc, #168]	; (8004b08 <USB_SetTurnaroundTime+0x130>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d906      	bls.n	8004a70 <USB_SetTurnaroundTime+0x98>
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a29      	ldr	r2, [pc, #164]	; (8004b0c <USB_SetTurnaroundTime+0x134>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d802      	bhi.n	8004a70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a6a:	230a      	movs	r3, #10
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	e02b      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <USB_SetTurnaroundTime+0x134>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d906      	bls.n	8004a86 <USB_SetTurnaroundTime+0xae>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a25      	ldr	r2, [pc, #148]	; (8004b10 <USB_SetTurnaroundTime+0x138>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d202      	bcs.n	8004a86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a80:	2309      	movs	r3, #9
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e020      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4a21      	ldr	r2, [pc, #132]	; (8004b10 <USB_SetTurnaroundTime+0x138>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d306      	bcc.n	8004a9c <USB_SetTurnaroundTime+0xc4>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a20      	ldr	r2, [pc, #128]	; (8004b14 <USB_SetTurnaroundTime+0x13c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d802      	bhi.n	8004a9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a96:	2308      	movs	r3, #8
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e015      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <USB_SetTurnaroundTime+0x13c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d906      	bls.n	8004ab2 <USB_SetTurnaroundTime+0xda>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a1c      	ldr	r2, [pc, #112]	; (8004b18 <USB_SetTurnaroundTime+0x140>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d202      	bcs.n	8004ab2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004aac:	2307      	movs	r3, #7
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e00a      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ab2:	2306      	movs	r3, #6
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	e007      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004abe:	2309      	movs	r3, #9
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	e001      	b.n	8004ac8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ac4:	2309      	movs	r3, #9
 8004ac6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	029b      	lsls	r3, r3, #10
 8004adc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	00d8acbf 	.word	0x00d8acbf
 8004af8:	00e4e1c0 	.word	0x00e4e1c0
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	01067380 	.word	0x01067380
 8004b04:	011a499f 	.word	0x011a499f
 8004b08:	01312cff 	.word	0x01312cff
 8004b0c:	014ca43f 	.word	0x014ca43f
 8004b10:	016e3600 	.word	0x016e3600
 8004b14:	01a6ab1f 	.word	0x01a6ab1f
 8004b18:	01e84800 	.word	0x01e84800

08004b1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f043 0201 	orr.w	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d115      	bne.n	8004bae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7fc f9fc 	bl	8000f8c <HAL_Delay>
      ms++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f001 fa45 	bl	800602a <USB_GetMode>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d01e      	beq.n	8004be4 <USB_SetCurrentMode+0x84>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b31      	cmp	r3, #49	; 0x31
 8004baa:	d9f0      	bls.n	8004b8e <USB_SetCurrentMode+0x2e>
 8004bac:	e01a      	b.n	8004be4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d115      	bne.n	8004be0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	f7fc f9e3 	bl	8000f8c <HAL_Delay>
      ms++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f001 fa2c 	bl	800602a <USB_GetMode>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <USB_SetCurrentMode+0x84>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b31      	cmp	r3, #49	; 0x31
 8004bdc:	d9f0      	bls.n	8004bc0 <USB_SetCurrentMode+0x60>
 8004bde:	e001      	b.n	8004be4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e005      	b.n	8004bf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b32      	cmp	r3, #50	; 0x32
 8004be8:	d101      	bne.n	8004bee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	e009      	b.n	8004c2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3340      	adds	r3, #64	; 0x40
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b0e      	cmp	r3, #14
 8004c30:	d9f2      	bls.n	8004c18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11c      	bne.n	8004c72 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c46:	f043 0302 	orr.w	r3, r3, #2
 8004c4a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38
 8004c70:	e00b      	b.n	8004c8a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	680b      	ldr	r3, [r1, #0]
 8004ca8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d10c      	bne.n	8004cca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d104      	bne.n	8004cc0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f965 	bl	8004f88 <USB_SetDevSpeed>
 8004cbe:	e008      	b.n	8004cd2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f960 	bl	8004f88 <USB_SetDevSpeed>
 8004cc8:	e003      	b.n	8004cd2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004cca:	2103      	movs	r1, #3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f95b 	bl	8004f88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004cd2:	2110      	movs	r1, #16
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f8f3 	bl	8004ec0 <USB_FlushTxFifo>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f91f 	bl	8004f28 <USB_FlushRxFifo>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	461a      	mov	r2, r3
 8004d08:	2300      	movs	r3, #0
 8004d0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d18:	2300      	movs	r3, #0
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	e043      	b.n	8004da6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d34:	d118      	bne.n	8004d68 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	e013      	b.n	8004d7a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e008      	b.n	8004d7a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d74:	461a      	mov	r2, r3
 8004d76:	2300      	movs	r3, #0
 8004d78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d86:	461a      	mov	r2, r3
 8004d88:	2300      	movs	r3, #0
 8004d8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3301      	adds	r3, #1
 8004da4:	613b      	str	r3, [r7, #16]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d3b7      	bcc.n	8004d1e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	e043      	b.n	8004e3c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dca:	d118      	bne.n	8004dfe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	461a      	mov	r2, r3
 8004de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004de4:	6013      	str	r3, [r2, #0]
 8004de6:	e013      	b.n	8004e10 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	461a      	mov	r2, r3
 8004df6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e008      	b.n	8004e10 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d3b7      	bcc.n	8004db4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004e64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d105      	bne.n	8004e78 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f043 0210 	orr.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <USB_DevInit+0x2c4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f043 0208 	orr.w	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ea4:	f043 0304 	orr.w	r3, r3, #4
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eb8:	b004      	add	sp, #16
 8004eba:	4770      	bx	lr
 8004ebc:	803c3800 	.word	0x803c3800

08004ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <USB_FlushTxFifo+0x64>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d901      	bls.n	8004ee0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e01b      	b.n	8004f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	daf2      	bge.n	8004ece <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	019b      	lsls	r3, r3, #6
 8004ef0:	f043 0220 	orr.w	r2, r3, #32
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	3301      	adds	r3, #1
 8004efc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4a08      	ldr	r2, [pc, #32]	; (8004f24 <USB_FlushTxFifo+0x64>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e006      	b.n	8004f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d0f0      	beq.n	8004ef8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	00030d40 	.word	0x00030d40

08004f28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a11      	ldr	r2, [pc, #68]	; (8004f84 <USB_FlushRxFifo+0x5c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d901      	bls.n	8004f46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e018      	b.n	8004f78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	daf2      	bge.n	8004f34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2210      	movs	r2, #16
 8004f56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a08      	ldr	r2, [pc, #32]	; (8004f84 <USB_FlushRxFifo+0x5c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d901      	bls.n	8004f6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e006      	b.n	8004f78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d0f0      	beq.n	8004f58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	00030d40 	.word	0x00030d40

08004f88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	68f9      	ldr	r1, [r7, #12]
 8004fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0306 	and.w	r3, r3, #6
 8004fd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	75fb      	strb	r3, [r7, #23]
 8004fde:	e00a      	b.n	8004ff6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d002      	beq.n	8004fec <USB_GetDevSpeed+0x32>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b06      	cmp	r3, #6
 8004fea:	d102      	bne.n	8004ff2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fec:	2302      	movs	r3, #2
 8004fee:	75fb      	strb	r3, [r7, #23]
 8004ff0:	e001      	b.n	8004ff6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004ff2:	230f      	movs	r3, #15
 8004ff4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d13a      	bne.n	8005096 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	2101      	movs	r1, #1
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800503e:	4313      	orrs	r3, r2
 8005040:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d155      	bne.n	8005104 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	791b      	ldrb	r3, [r3, #4]
 8005072:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005074:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	059b      	lsls	r3, r3, #22
 800507a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800507c:	4313      	orrs	r3, r2
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	0151      	lsls	r1, r2, #5
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	440a      	add	r2, r1
 8005086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	e036      	b.n	8005104 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	2101      	movs	r1, #1
 80050a8:	fa01 f303 	lsl.w	r3, r1, r3
 80050ac:	041b      	lsls	r3, r3, #16
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d11a      	bne.n	8005104 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	791b      	ldrb	r3, [r3, #4]
 80050e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050ea:	430b      	orrs	r3, r1
 80050ec:	4313      	orrs	r3, r2
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005102:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d161      	bne.n	80051f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005146:	d11f      	bne.n	8005188 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005162:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005166:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005186:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	2101      	movs	r1, #1
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	b29b      	uxth	r3, r3
 80051a0:	43db      	mvns	r3, r3
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a8:	4013      	ands	r3, r2
 80051aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	2101      	movs	r1, #1
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	43db      	mvns	r3, r3
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051cc:	4013      	ands	r3, r2
 80051ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	0159      	lsls	r1, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	440b      	add	r3, r1
 80051e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ea:	4619      	mov	r1, r3
 80051ec:	4b35      	ldr	r3, [pc, #212]	; (80052c4 <USB_DeactivateEndpoint+0x1b0>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
 80051f2:	e060      	b.n	80052b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800520a:	d11f      	bne.n	800524c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005226:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800522a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	440a      	add	r2, r1
 8005242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005252:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	2101      	movs	r1, #1
 800525e:	fa01 f303 	lsl.w	r3, r1, r3
 8005262:	041b      	lsls	r3, r3, #16
 8005264:	43db      	mvns	r3, r3
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800526c:	4013      	ands	r3, r2
 800526e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2101      	movs	r1, #1
 8005282:	fa01 f303 	lsl.w	r3, r1, r3
 8005286:	041b      	lsls	r3, r3, #16
 8005288:	43db      	mvns	r3, r3
 800528a:	68f9      	ldr	r1, [r7, #12]
 800528c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005290:	4013      	ands	r3, r2
 8005292:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	0159      	lsls	r1, r3, #5
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	440b      	add	r3, r1
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	4619      	mov	r1, r3
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <USB_DeactivateEndpoint+0x1b4>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	ec337800 	.word	0xec337800
 80052c8:	eff37800 	.word	0xeff37800

080052cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	785b      	ldrb	r3, [r3, #1]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	f040 815c 	bne.w	80055a6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d132      	bne.n	800535c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005310:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005314:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	0151      	lsls	r1, r2, #5
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	440a      	add	r2, r1
 8005330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005334:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005338:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005354:	0cdb      	lsrs	r3, r3, #19
 8005356:	04db      	lsls	r3, r3, #19
 8005358:	6113      	str	r3, [r2, #16]
 800535a:	e074      	b.n	8005446 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	440a      	add	r2, r1
 8005372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005376:	0cdb      	lsrs	r3, r3, #19
 8005378:	04db      	lsls	r3, r3, #19
 800537a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005396:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800539a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800539e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	6999      	ldr	r1, [r3, #24]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	440b      	add	r3, r1
 80053b8:	1e59      	subs	r1, r3, #1
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	fbb1 f3f3 	udiv	r3, r1, r3
 80053c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80053c4:	4b9d      	ldr	r3, [pc, #628]	; (800563c <USB_EPStartXfer+0x370>)
 80053c6:	400b      	ands	r3, r1
 80053c8:	69b9      	ldr	r1, [r7, #24]
 80053ca:	0148      	lsls	r0, r1, #5
 80053cc:	69f9      	ldr	r1, [r7, #28]
 80053ce:	4401      	add	r1, r0
 80053d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053d4:	4313      	orrs	r3, r2
 80053d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ee:	69b9      	ldr	r1, [r7, #24]
 80053f0:	0148      	lsls	r0, r1, #5
 80053f2:	69f9      	ldr	r1, [r7, #28]
 80053f4:	4401      	add	r1, r0
 80053f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	791b      	ldrb	r3, [r3, #4]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d11f      	bne.n	8005446 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	0151      	lsls	r1, r2, #5
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	440a      	add	r2, r1
 800541c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005420:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005424:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	4413      	add	r3, r2
 800542e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	0151      	lsls	r1, r2, #5
 8005438:	69fa      	ldr	r2, [r7, #28]
 800543a:	440a      	add	r2, r1
 800543c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005440:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005444:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d14b      	bne.n	80054e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	461a      	mov	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	791b      	ldrb	r3, [r3, #4]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d128      	bne.n	80054c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d110      	bne.n	80054a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	e00f      	b.n	80054c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	e133      	b.n	800574c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005502:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	791b      	ldrb	r3, [r3, #4]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d015      	beq.n	8005538 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 811b 	beq.w	800574c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	2101      	movs	r1, #1
 8005528:	fa01 f303 	lsl.w	r3, r1, r3
 800552c:	69f9      	ldr	r1, [r7, #28]
 800552e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005532:	4313      	orrs	r3, r2
 8005534:	634b      	str	r3, [r1, #52]	; 0x34
 8005536:	e109      	b.n	800574c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d110      	bne.n	800556a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	0151      	lsls	r1, r2, #5
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	440a      	add	r2, r1
 800555e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	e00f      	b.n	800558a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	440a      	add	r2, r1
 8005580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005588:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6919      	ldr	r1, [r3, #16]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	b298      	uxth	r0, r3
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4603      	mov	r3, r0
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fade 	bl	8005b60 <USB_WritePacket>
 80055a4:	e0d2      	b.n	800574c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c0:	0cdb      	lsrs	r3, r3, #19
 80055c2:	04db      	lsls	r3, r3, #19
 80055c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d126      	bne.n	8005640 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005608:	69b9      	ldr	r1, [r7, #24]
 800560a:	0148      	lsls	r0, r1, #5
 800560c:	69f9      	ldr	r1, [r7, #28]
 800560e:	4401      	add	r1, r0
 8005610:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	0151      	lsls	r1, r2, #5
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	440a      	add	r2, r1
 800562e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005636:	6113      	str	r3, [r2, #16]
 8005638:	e03a      	b.n	80056b0 <USB_EPStartXfer+0x3e4>
 800563a:	bf00      	nop
 800563c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	699a      	ldr	r2, [r3, #24]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	4413      	add	r3, r2
 800564a:	1e5a      	subs	r2, r3, #1
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	8afa      	ldrh	r2, [r7, #22]
 800565c:	fb03 f202 	mul.w	r2, r3, r2
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	8afb      	ldrh	r3, [r7, #22]
 8005674:	04d9      	lsls	r1, r3, #19
 8005676:	4b38      	ldr	r3, [pc, #224]	; (8005758 <USB_EPStartXfer+0x48c>)
 8005678:	400b      	ands	r3, r1
 800567a:	69b9      	ldr	r1, [r7, #24]
 800567c:	0148      	lsls	r0, r1, #5
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	4401      	add	r1, r0
 8005682:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005686:	4313      	orrs	r3, r2
 8005688:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	015a      	lsls	r2, r3, #5
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	4413      	add	r3, r2
 8005692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a0:	69b9      	ldr	r1, [r7, #24]
 80056a2:	0148      	lsls	r0, r1, #5
 80056a4:	69f9      	ldr	r1, [r7, #28]
 80056a6:	4401      	add	r1, r0
 80056a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056ac:	4313      	orrs	r3, r2
 80056ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d10d      	bne.n	80056d2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d009      	beq.n	80056d2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	6919      	ldr	r1, [r3, #16]
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	460a      	mov	r2, r1
 80056d0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	791b      	ldrb	r3, [r3, #4]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d128      	bne.n	800572c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d110      	bne.n	800570c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005704:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e00f      	b.n	800572c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005746:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800574a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	1ff80000 	.word	0x1ff80000

0800575c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	785b      	ldrb	r3, [r3, #1]
 8005778:	2b01      	cmp	r3, #1
 800577a:	f040 80ce 	bne.w	800591a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d132      	bne.n	80057ec <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e4:	0cdb      	lsrs	r3, r3, #19
 80057e6:	04db      	lsls	r3, r3, #19
 80057e8:	6113      	str	r3, [r2, #16]
 80057ea:	e04e      	b.n	800588a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	0151      	lsls	r1, r2, #5
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	440a      	add	r2, r1
 8005802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005806:	0cdb      	lsrs	r3, r3, #19
 8005808:	04db      	lsls	r3, r3, #19
 800580a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	015a      	lsls	r2, r3, #5
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	0151      	lsls	r1, r2, #5
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	440a      	add	r2, r1
 8005822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005826:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800582a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800582e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	429a      	cmp	r2, r3
 800583a:	d903      	bls.n	8005844 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	0151      	lsls	r1, r2, #5
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	440a      	add	r2, r1
 800585a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800585e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	0148      	lsls	r0, r1, #5
 800587e:	6979      	ldr	r1, [r7, #20]
 8005880:	4401      	add	r1, r0
 8005882:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005886:	4313      	orrs	r3, r2
 8005888:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d11e      	bne.n	80058ce <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e097      	b.n	80059fe <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	0151      	lsls	r1, r2, #5
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	440a      	add	r2, r1
 80058e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ec:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8083 	beq.w	80059fe <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	2101      	movs	r1, #1
 800590a:	fa01 f303 	lsl.w	r3, r1, r3
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005914:	4313      	orrs	r3, r2
 8005916:	634b      	str	r3, [r1, #52]	; 0x34
 8005918:	e071      	b.n	80059fe <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005934:	0cdb      	lsrs	r3, r3, #19
 8005936:	04db      	lsls	r3, r3, #19
 8005938:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005954:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005958:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800595c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005994:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ac:	6939      	ldr	r1, [r7, #16]
 80059ae:	0148      	lsls	r0, r1, #5
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	4401      	add	r1, r0
 80059b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10d      	bne.n	80059de <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	6919      	ldr	r1, [r3, #16]
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	460a      	mov	r2, r1
 80059dc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	785b      	ldrb	r3, [r3, #1]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d14a      	bne.n	8005ac0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a42:	f040 8086 	bne.w	8005b52 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	7812      	ldrb	r2, [r2, #0]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a68:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	7812      	ldrb	r2, [r2, #0]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3301      	adds	r3, #1
 8005a92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d902      	bls.n	8005aa4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8005aa2:	e056      	b.n	8005b52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005abc:	d0e7      	beq.n	8005a8e <USB_EPStopXfer+0x82>
 8005abe:	e048      	b.n	8005b52 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ad8:	d13b      	bne.n	8005b52 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	7812      	ldrb	r2, [r2, #0]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005afc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d902      	bls.n	8005b38 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	75fb      	strb	r3, [r7, #23]
          break;
 8005b36:	e00c      	b.n	8005b52 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b50:	d0e7      	beq.n	8005b22 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	; 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	460b      	mov	r3, r1
 8005b70:	71fb      	strb	r3, [r7, #7]
 8005b72:	4613      	mov	r3, r2
 8005b74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d123      	bne.n	8005bce <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b86:	88bb      	ldrh	r3, [r7, #4]
 8005b88:	3303      	adds	r3, #3
 8005b8a:	089b      	lsrs	r3, r3, #2
 8005b8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61bb      	str	r3, [r7, #24]
 8005b92:	e018      	b.n	8005bc6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	031a      	lsls	r2, r3, #12
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	3301      	adds	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d3e2      	bcc.n	8005b94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3724      	adds	r7, #36	; 0x24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b08b      	sub	sp, #44	; 0x2c
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	4613      	mov	r3, r2
 8005be8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bf2:	88fb      	ldrh	r3, [r7, #6]
 8005bf4:	089b      	lsrs	r3, r3, #2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	f003 0303 	and.w	r3, r3, #3
 8005c00:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c02:	2300      	movs	r3, #0
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	e014      	b.n	8005c32 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	3301      	adds	r3, #1
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	3301      	adds	r3, #1
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	3301      	adds	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	6a3a      	ldr	r2, [r7, #32]
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d3e6      	bcc.n	8005c08 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c3a:	8bfb      	ldrh	r3, [r7, #30]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01e      	beq.n	8005c7e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f107 0310 	add.w	r3, r7, #16
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	701a      	strb	r2, [r3, #0]
      i++;
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	3301      	adds	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005c72:	8bfb      	ldrh	r3, [r7, #30]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c78:	8bfb      	ldrh	r3, [r7, #30]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1ea      	bne.n	8005c54 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	372c      	adds	r7, #44	; 0x2c
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d12c      	bne.n	8005d02 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	db12      	blt.n	8005ce0 <USB_EPSetStall+0x54>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00f      	beq.n	8005ce0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cda:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cde:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005cfe:	6013      	str	r3, [r2, #0]
 8005d00:	e02b      	b.n	8005d5a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	db12      	blt.n	8005d3a <USB_EPSetStall+0xae>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00f      	beq.n	8005d3a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d38:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d58:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d128      	bne.n	8005dd6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005da2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	791b      	ldrb	r3, [r3, #4]
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d003      	beq.n	8005db4 <USB_EPClearStall+0x4c>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	791b      	ldrb	r3, [r3, #4]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d138      	bne.n	8005e26 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	0151      	lsls	r1, r2, #5
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	440a      	add	r2, r1
 8005dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	6013      	str	r3, [r2, #0]
 8005dd4:	e027      	b.n	8005e26 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005df4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	791b      	ldrb	r3, [r3, #4]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d003      	beq.n	8005e06 <USB_EPClearStall+0x9e>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	791b      	ldrb	r3, [r3, #4]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d10f      	bne.n	8005e26 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e24:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005e56:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005e68:	68f9      	ldr	r1, [r7, #12]
 8005e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e9a:	f023 0303 	bic.w	r3, r3, #3
 8005e9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eae:	f023 0302 	bic.w	r3, r3, #2
 8005eb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b085      	sub	sp, #20
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005edc:	f023 0303 	bic.w	r3, r3, #3
 8005ee0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ef0:	f043 0302 	orr.w	r3, r3, #2
 8005ef4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b085      	sub	sp, #20
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	0c1b      	lsrs	r3, r3, #16
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	69db      	ldr	r3, [r3, #28]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	b29b      	uxth	r3, r3
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005fce:	b480      	push	{r7}
 8005fd0:	b087      	sub	sp, #28
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffe:	01db      	lsls	r3, r3, #7
 8006000:	b2db      	uxtb	r3, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4013      	ands	r3, r2
 800601a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800601c:	68bb      	ldr	r3, [r7, #8]
}
 800601e:	4618      	mov	r0, r3
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	f003 0301 	and.w	r3, r3, #1
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006060:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006064:	f023 0307 	bic.w	r3, r3, #7
 8006068:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	460b      	mov	r3, r1
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	333c      	adds	r3, #60	; 0x3c
 80060a2:	3304      	adds	r3, #4
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4a26      	ldr	r2, [pc, #152]	; (8006144 <USB_EP0_OutStart+0xb8>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d90a      	bls.n	80060c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c0:	d101      	bne.n	80060c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	e037      	b.n	8006136 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060cc:	461a      	mov	r2, r3
 80060ce:	2300      	movs	r3, #0
 80060d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f4:	f043 0318 	orr.w	r3, r3, #24
 80060f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006108:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800610c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800610e:	7afb      	ldrb	r3, [r7, #11]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d10f      	bne.n	8006134 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800612e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006132:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	4f54300a 	.word	0x4f54300a

08006148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a13      	ldr	r2, [pc, #76]	; (80061ac <USB_CoreReset+0x64>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e01b      	b.n	800619e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	daf2      	bge.n	8006154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f043 0201 	orr.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	3301      	adds	r3, #1
 8006182:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a09      	ldr	r2, [pc, #36]	; (80061ac <USB_CoreReset+0x64>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d901      	bls.n	8006190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e006      	b.n	800619e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b01      	cmp	r3, #1
 800619a:	d0f0      	beq.n	800617e <USB_CoreReset+0x36>

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	00030d40 	.word	0x00030d40

080061b0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80061bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80061c0:	f002 fc94 	bl	8008aec <USBD_static_malloc>
 80061c4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d109      	bne.n	80061e0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	32b0      	adds	r2, #176	; 0xb0
 80061d6:	2100      	movs	r1, #0
 80061d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80061dc:	2302      	movs	r3, #2
 80061de:	e0d4      	b.n	800638a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80061e0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80061e4:	2100      	movs	r1, #0
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f002 fce8 	bl	8008bbc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32b0      	adds	r2, #176	; 0xb0
 80061f6:	68f9      	ldr	r1, [r7, #12]
 80061f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	32b0      	adds	r2, #176	; 0xb0
 8006206:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	7c1b      	ldrb	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d138      	bne.n	800628a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006218:	4b5e      	ldr	r3, [pc, #376]	; (8006394 <USBD_CDC_Init+0x1e4>)
 800621a:	7819      	ldrb	r1, [r3, #0]
 800621c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006220:	2202      	movs	r2, #2
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f002 fb3f 	bl	80088a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006228:	4b5a      	ldr	r3, [pc, #360]	; (8006394 <USBD_CDC_Init+0x1e4>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	f003 020f 	and.w	r2, r3, #15
 8006230:	6879      	ldr	r1, [r7, #4]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	3324      	adds	r3, #36	; 0x24
 800623e:	2201      	movs	r2, #1
 8006240:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006242:	4b55      	ldr	r3, [pc, #340]	; (8006398 <USBD_CDC_Init+0x1e8>)
 8006244:	7819      	ldrb	r1, [r3, #0]
 8006246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800624a:	2202      	movs	r2, #2
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f002 fb2a 	bl	80088a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006252:	4b51      	ldr	r3, [pc, #324]	; (8006398 <USBD_CDC_Init+0x1e8>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f003 020f 	and.w	r2, r3, #15
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800626a:	2201      	movs	r2, #1
 800626c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800626e:	4b4b      	ldr	r3, [pc, #300]	; (800639c <USBD_CDC_Init+0x1ec>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 020f 	and.w	r2, r3, #15
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	3326      	adds	r3, #38	; 0x26
 8006284:	2210      	movs	r2, #16
 8006286:	801a      	strh	r2, [r3, #0]
 8006288:	e035      	b.n	80062f6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800628a:	4b42      	ldr	r3, [pc, #264]	; (8006394 <USBD_CDC_Init+0x1e4>)
 800628c:	7819      	ldrb	r1, [r3, #0]
 800628e:	2340      	movs	r3, #64	; 0x40
 8006290:	2202      	movs	r2, #2
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f002 fb07 	bl	80088a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006298:	4b3e      	ldr	r3, [pc, #248]	; (8006394 <USBD_CDC_Init+0x1e4>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	f003 020f 	and.w	r2, r3, #15
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	440b      	add	r3, r1
 80062ac:	3324      	adds	r3, #36	; 0x24
 80062ae:	2201      	movs	r2, #1
 80062b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062b2:	4b39      	ldr	r3, [pc, #228]	; (8006398 <USBD_CDC_Init+0x1e8>)
 80062b4:	7819      	ldrb	r1, [r3, #0]
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	2202      	movs	r2, #2
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f002 faf3 	bl	80088a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062c0:	4b35      	ldr	r3, [pc, #212]	; (8006398 <USBD_CDC_Init+0x1e8>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f003 020f 	and.w	r2, r3, #15
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	440b      	add	r3, r1
 80062d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062d8:	2201      	movs	r2, #1
 80062da:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80062dc:	4b2f      	ldr	r3, [pc, #188]	; (800639c <USBD_CDC_Init+0x1ec>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	f003 020f 	and.w	r2, r3, #15
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	3326      	adds	r3, #38	; 0x26
 80062f2:	2210      	movs	r2, #16
 80062f4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80062f6:	4b29      	ldr	r3, [pc, #164]	; (800639c <USBD_CDC_Init+0x1ec>)
 80062f8:	7819      	ldrb	r1, [r3, #0]
 80062fa:	2308      	movs	r3, #8
 80062fc:	2203      	movs	r2, #3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f002 fad1 	bl	80088a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006304:	4b25      	ldr	r3, [pc, #148]	; (800639c <USBD_CDC_Init+0x1ec>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f003 020f 	and.w	r2, r3, #15
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	440b      	add	r3, r1
 8006318:	3324      	adds	r3, #36	; 0x24
 800631a:	2201      	movs	r2, #1
 800631c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	33b0      	adds	r3, #176	; 0xb0
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006354:	2302      	movs	r3, #2
 8006356:	e018      	b.n	800638a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7c1b      	ldrb	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <USBD_CDC_Init+0x1e8>)
 8006362:	7819      	ldrb	r1, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800636a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f002 fb88 	bl	8008a84 <USBD_LL_PrepareReceive>
 8006374:	e008      	b.n	8006388 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <USBD_CDC_Init+0x1e8>)
 8006378:	7819      	ldrb	r1, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006380:	2340      	movs	r3, #64	; 0x40
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f002 fb7e 	bl	8008a84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000093 	.word	0x20000093
 8006398:	20000094 	.word	0x20000094
 800639c:	20000095 	.word	0x20000095

080063a0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80063ac:	4b3a      	ldr	r3, [pc, #232]	; (8006498 <USBD_CDC_DeInit+0xf8>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f002 fa9d 	bl	80088f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80063b8:	4b37      	ldr	r3, [pc, #220]	; (8006498 <USBD_CDC_DeInit+0xf8>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	f003 020f 	and.w	r2, r3, #15
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	3324      	adds	r3, #36	; 0x24
 80063ce:	2200      	movs	r2, #0
 80063d0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80063d2:	4b32      	ldr	r3, [pc, #200]	; (800649c <USBD_CDC_DeInit+0xfc>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f002 fa8a 	bl	80088f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80063de:	4b2f      	ldr	r3, [pc, #188]	; (800649c <USBD_CDC_DeInit+0xfc>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f003 020f 	and.w	r2, r3, #15
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063f6:	2200      	movs	r2, #0
 80063f8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80063fa:	4b29      	ldr	r3, [pc, #164]	; (80064a0 <USBD_CDC_DeInit+0x100>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 fa76 	bl	80088f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006406:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <USBD_CDC_DeInit+0x100>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	f003 020f 	and.w	r2, r3, #15
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	440b      	add	r3, r1
 800641a:	3324      	adds	r3, #36	; 0x24
 800641c:	2200      	movs	r2, #0
 800641e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006420:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <USBD_CDC_DeInit+0x100>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	3326      	adds	r3, #38	; 0x26
 8006436:	2200      	movs	r2, #0
 8006438:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	32b0      	adds	r2, #176	; 0xb0
 8006444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01f      	beq.n	800648c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	33b0      	adds	r3, #176	; 0xb0
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	32b0      	adds	r2, #176	; 0xb0
 800646a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646e:	4618      	mov	r0, r3
 8006470:	f002 fb4a 	bl	8008b08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	32b0      	adds	r2, #176	; 0xb0
 800647e:	2100      	movs	r1, #0
 8006480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000093 	.word	0x20000093
 800649c:	20000094 	.word	0x20000094
 80064a0:	20000095 	.word	0x20000095

080064a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	32b0      	adds	r2, #176	; 0xb0
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e0bf      	b.n	8006654 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d050      	beq.n	8006582 <USBD_CDC_Setup+0xde>
 80064e0:	2b20      	cmp	r3, #32
 80064e2:	f040 80af 	bne.w	8006644 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	88db      	ldrh	r3, [r3, #6]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d03a      	beq.n	8006564 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	b25b      	sxtb	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	da1b      	bge.n	8006530 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	33b0      	adds	r3, #176	; 0xb0
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800650e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	88d2      	ldrh	r2, [r2, #6]
 8006514:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	88db      	ldrh	r3, [r3, #6]
 800651a:	2b07      	cmp	r3, #7
 800651c:	bf28      	it	cs
 800651e:	2307      	movcs	r3, #7
 8006520:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	89fa      	ldrh	r2, [r7, #14]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 fd89 	bl	8008040 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800652e:	e090      	b.n	8006652 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	785a      	ldrb	r2, [r3, #1]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	88db      	ldrh	r3, [r3, #6]
 800653e:	2b3f      	cmp	r3, #63	; 0x3f
 8006540:	d803      	bhi.n	800654a <USBD_CDC_Setup+0xa6>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	88db      	ldrh	r3, [r3, #6]
 8006546:	b2da      	uxtb	r2, r3
 8006548:	e000      	b.n	800654c <USBD_CDC_Setup+0xa8>
 800654a:	2240      	movs	r2, #64	; 0x40
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006552:	6939      	ldr	r1, [r7, #16]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800655a:	461a      	mov	r2, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 fd9b 	bl	8008098 <USBD_CtlPrepareRx>
      break;
 8006562:	e076      	b.n	8006652 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	33b0      	adds	r3, #176	; 0xb0
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	7850      	ldrb	r0, [r2, #1]
 800657a:	2200      	movs	r2, #0
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	4798      	blx	r3
      break;
 8006580:	e067      	b.n	8006652 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	785b      	ldrb	r3, [r3, #1]
 8006586:	2b0b      	cmp	r3, #11
 8006588:	d851      	bhi.n	800662e <USBD_CDC_Setup+0x18a>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <USBD_CDC_Setup+0xec>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065c1 	.word	0x080065c1
 8006594:	0800663d 	.word	0x0800663d
 8006598:	0800662f 	.word	0x0800662f
 800659c:	0800662f 	.word	0x0800662f
 80065a0:	0800662f 	.word	0x0800662f
 80065a4:	0800662f 	.word	0x0800662f
 80065a8:	0800662f 	.word	0x0800662f
 80065ac:	0800662f 	.word	0x0800662f
 80065b0:	0800662f 	.word	0x0800662f
 80065b4:	0800662f 	.word	0x0800662f
 80065b8:	080065eb 	.word	0x080065eb
 80065bc:	08006615 	.word	0x08006615
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d107      	bne.n	80065dc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065cc:	f107 030a 	add.w	r3, r7, #10
 80065d0:	2202      	movs	r2, #2
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f001 fd33 	bl	8008040 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065da:	e032      	b.n	8006642 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fcbd 	bl	8007f5e <USBD_CtlError>
            ret = USBD_FAIL;
 80065e4:	2303      	movs	r3, #3
 80065e6:	75fb      	strb	r3, [r7, #23]
          break;
 80065e8:	e02b      	b.n	8006642 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d107      	bne.n	8006606 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80065f6:	f107 030d 	add.w	r3, r7, #13
 80065fa:	2201      	movs	r2, #1
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fd1e 	bl	8008040 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006604:	e01d      	b.n	8006642 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f001 fca8 	bl	8007f5e <USBD_CtlError>
            ret = USBD_FAIL;
 800660e:	2303      	movs	r3, #3
 8006610:	75fb      	strb	r3, [r7, #23]
          break;
 8006612:	e016      	b.n	8006642 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b03      	cmp	r3, #3
 800661e:	d00f      	beq.n	8006640 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fc9b 	bl	8007f5e <USBD_CtlError>
            ret = USBD_FAIL;
 8006628:	2303      	movs	r3, #3
 800662a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800662c:	e008      	b.n	8006640 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fc94 	bl	8007f5e <USBD_CtlError>
          ret = USBD_FAIL;
 8006636:	2303      	movs	r3, #3
 8006638:	75fb      	strb	r3, [r7, #23]
          break;
 800663a:	e002      	b.n	8006642 <USBD_CDC_Setup+0x19e>
          break;
 800663c:	bf00      	nop
 800663e:	e008      	b.n	8006652 <USBD_CDC_Setup+0x1ae>
          break;
 8006640:	bf00      	nop
      }
      break;
 8006642:	e006      	b.n	8006652 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fc89 	bl	8007f5e <USBD_CtlError>
      ret = USBD_FAIL;
 800664c:	2303      	movs	r3, #3
 800664e:	75fb      	strb	r3, [r7, #23]
      break;
 8006650:	bf00      	nop
  }

  return (uint8_t)ret;
 8006652:	7dfb      	ldrb	r3, [r7, #23]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800666e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	32b0      	adds	r2, #176	; 0xb0
 800667a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006682:	2303      	movs	r3, #3
 8006684:	e065      	b.n	8006752 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	32b0      	adds	r2, #176	; 0xb0
 8006690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006694:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	440b      	add	r3, r1
 80066a8:	3318      	adds	r3, #24
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d02f      	beq.n	8006710 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	f003 020f 	and.w	r2, r3, #15
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	3318      	adds	r3, #24
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	f003 010f 	and.w	r1, r3, #15
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	460b      	mov	r3, r1
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	440b      	add	r3, r1
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4403      	add	r3, r0
 80066d8:	3348      	adds	r3, #72	; 0x48
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80066e0:	fb01 f303 	mul.w	r3, r1, r3
 80066e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d112      	bne.n	8006710 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	f003 020f 	and.w	r2, r3, #15
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	440b      	add	r3, r1
 80066fc:	3318      	adds	r3, #24
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006702:	78f9      	ldrb	r1, [r7, #3]
 8006704:	2300      	movs	r3, #0
 8006706:	2200      	movs	r2, #0
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f002 f99a 	bl	8008a42 <USBD_LL_Transmit>
 800670e:	e01f      	b.n	8006750 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	33b0      	adds	r3, #176	; 0xb0
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4413      	add	r3, r2
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d010      	beq.n	8006750 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	33b0      	adds	r3, #176	; 0xb0
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006746:	68ba      	ldr	r2, [r7, #8]
 8006748:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800674c:	78fa      	ldrb	r2, [r7, #3]
 800674e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	32b0      	adds	r2, #176	; 0xb0
 8006770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006774:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	32b0      	adds	r2, #176	; 0xb0
 8006780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006788:	2303      	movs	r3, #3
 800678a:	e01a      	b.n	80067c2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f002 f998 	bl	8008ac6 <USBD_LL_GetRxDataSize>
 8006796:	4602      	mov	r2, r0
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	33b0      	adds	r3, #176	; 0xb0
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80067bc:	4611      	mov	r1, r2
 80067be:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	32b0      	adds	r2, #176	; 0xb0
 80067dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e025      	b.n	8006838 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	33b0      	adds	r3, #176	; 0xb0
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01a      	beq.n	8006836 <USBD_CDC_EP0_RxReady+0x6c>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006806:	2bff      	cmp	r3, #255	; 0xff
 8006808:	d015      	beq.n	8006836 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	33b0      	adds	r3, #176	; 0xb0
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006822:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800682a:	b292      	uxth	r2, r2
 800682c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	22ff      	movs	r2, #255	; 0xff
 8006832:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006848:	2182      	movs	r1, #130	; 0x82
 800684a:	4818      	ldr	r0, [pc, #96]	; (80068ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 800684c:	f000 fd4f 	bl	80072ee <USBD_GetEpDesc>
 8006850:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006852:	2101      	movs	r1, #1
 8006854:	4815      	ldr	r0, [pc, #84]	; (80068ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006856:	f000 fd4a 	bl	80072ee <USBD_GetEpDesc>
 800685a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800685c:	2181      	movs	r1, #129	; 0x81
 800685e:	4813      	ldr	r0, [pc, #76]	; (80068ac <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006860:	f000 fd45 	bl	80072ee <USBD_GetEpDesc>
 8006864:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2210      	movs	r2, #16
 8006870:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d006      	beq.n	8006886 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	2200      	movs	r2, #0
 800687c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006880:	711a      	strb	r2, [r3, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d006      	beq.n	800689a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006894:	711a      	strb	r2, [r3, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2243      	movs	r2, #67	; 0x43
 800689e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80068a0:	4b02      	ldr	r3, [pc, #8]	; (80068ac <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000050 	.word	0x20000050

080068b0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068b8:	2182      	movs	r1, #130	; 0x82
 80068ba:	4818      	ldr	r0, [pc, #96]	; (800691c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068bc:	f000 fd17 	bl	80072ee <USBD_GetEpDesc>
 80068c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068c2:	2101      	movs	r1, #1
 80068c4:	4815      	ldr	r0, [pc, #84]	; (800691c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068c6:	f000 fd12 	bl	80072ee <USBD_GetEpDesc>
 80068ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068cc:	2181      	movs	r1, #129	; 0x81
 80068ce:	4813      	ldr	r0, [pc, #76]	; (800691c <USBD_CDC_GetHSCfgDesc+0x6c>)
 80068d0:	f000 fd0d 	bl	80072ee <USBD_GetEpDesc>
 80068d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2210      	movs	r2, #16
 80068e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d006      	beq.n	80068f6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2200      	movs	r2, #0
 80068ec:	711a      	strb	r2, [r3, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f042 0202 	orr.w	r2, r2, #2
 80068f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d006      	beq.n	800690a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	711a      	strb	r2, [r3, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f042 0202 	orr.w	r2, r2, #2
 8006908:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2243      	movs	r2, #67	; 0x43
 800690e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006910:	4b02      	ldr	r3, [pc, #8]	; (800691c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20000050 	.word	0x20000050

08006920 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006928:	2182      	movs	r1, #130	; 0x82
 800692a:	4818      	ldr	r0, [pc, #96]	; (800698c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800692c:	f000 fcdf 	bl	80072ee <USBD_GetEpDesc>
 8006930:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006932:	2101      	movs	r1, #1
 8006934:	4815      	ldr	r0, [pc, #84]	; (800698c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006936:	f000 fcda 	bl	80072ee <USBD_GetEpDesc>
 800693a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800693c:	2181      	movs	r1, #129	; 0x81
 800693e:	4813      	ldr	r0, [pc, #76]	; (800698c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006940:	f000 fcd5 	bl	80072ee <USBD_GetEpDesc>
 8006944:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2210      	movs	r2, #16
 8006950:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d006      	beq.n	8006966 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2200      	movs	r2, #0
 800695c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006960:	711a      	strb	r2, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d006      	beq.n	800697a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006974:	711a      	strb	r2, [r3, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2243      	movs	r2, #67	; 0x43
 800697e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20000050 	.word	0x20000050

08006990 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	220a      	movs	r2, #10
 800699c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800699e:	4b03      	ldr	r3, [pc, #12]	; (80069ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	2000000c 	.word	0x2000000c

080069b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e009      	b.n	80069d8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	33b0      	adds	r3, #176	; 0xb0
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	32b0      	adds	r2, #176	; 0xb0
 80069fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fe:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e008      	b.n	8006a1c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	371c      	adds	r7, #28
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	32b0      	adds	r2, #176	; 0xb0
 8006a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e004      	b.n	8006a56 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
	...

08006a64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	32b0      	adds	r2, #176	; 0xb0
 8006a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	32b0      	adds	r2, #176	; 0xb0
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e025      	b.n	8006ae2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11f      	bne.n	8006ae0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006aa8:	4b10      	ldr	r3, [pc, #64]	; (8006aec <USBD_CDC_TransmitPacket+0x88>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	f003 020f 	and.w	r2, r3, #15
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4403      	add	r3, r0
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <USBD_CDC_TransmitPacket+0x88>)
 8006ac8:	7819      	ldrb	r1, [r3, #0]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 ffb3 	bl	8008a42 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000093 	.word	0x20000093

08006af0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	32b0      	adds	r2, #176	; 0xb0
 8006b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	32b0      	adds	r2, #176	; 0xb0
 8006b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e018      	b.n	8006b50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7c1b      	ldrb	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b26:	4b0c      	ldr	r3, [pc, #48]	; (8006b58 <USBD_CDC_ReceivePacket+0x68>)
 8006b28:	7819      	ldrb	r1, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 ffa5 	bl	8008a84 <USBD_LL_PrepareReceive>
 8006b3a:	e008      	b.n	8006b4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <USBD_CDC_ReceivePacket+0x68>)
 8006b3e:	7819      	ldrb	r1, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b46:	2340      	movs	r3, #64	; 0x40
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 ff9b 	bl	8008a84 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20000094 	.word	0x20000094

08006b5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	4613      	mov	r3, r2
 8006b68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e01f      	b.n	8006bb4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	79fa      	ldrb	r2, [r7, #7]
 8006ba6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f001 fe15 	bl	80087d8 <USBD_LL_Init>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e025      	b.n	8006c20 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	32ae      	adds	r2, #174	; 0xae
 8006be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00f      	beq.n	8006c10 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	32ae      	adds	r2, #174	; 0xae
 8006bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	f107 020e 	add.w	r2, r7, #14
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	4602      	mov	r2, r0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fe1d 	bl	8008870 <USBD_LL_Start>
 8006c36:	4603      	mov	r3, r0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c48:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr

08006c56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	78fa      	ldrb	r2, [r7, #3]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	4798      	blx	r3
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b084      	sub	sp, #16
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
 8006c96:	460b      	mov	r3, r1
 8006c98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	78fa      	ldrb	r2, [r7, #3]
 8006ca8:	4611      	mov	r1, r2
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f001 f908 	bl	8007eea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006ce8:	461a      	mov	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006cf6:	f003 031f 	and.w	r3, r3, #31
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d01a      	beq.n	8006d34 <USBD_LL_SetupStage+0x72>
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d822      	bhi.n	8006d48 <USBD_LL_SetupStage+0x86>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <USBD_LL_SetupStage+0x4a>
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d00a      	beq.n	8006d20 <USBD_LL_SetupStage+0x5e>
 8006d0a:	e01d      	b.n	8006d48 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fb5f 	bl	80073d8 <USBD_StdDevReq>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d1e:	e020      	b.n	8006d62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fbc7 	bl	80074bc <USBD_StdItfReq>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]
      break;
 8006d32:	e016      	b.n	8006d62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc29 	bl	8007594 <USBD_StdEPReq>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73fb      	strb	r3, [r7, #15]
      break;
 8006d46:	e00c      	b.n	8006d62 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	4619      	mov	r1, r3
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fdea 	bl	8008930 <USBD_LL_StallEP>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d60:	bf00      	nop
  }

  return ret;
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	460b      	mov	r3, r1
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006d7e:	7afb      	ldrb	r3, [r7, #11]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d16e      	bne.n	8006e62 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006d8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	f040 8098 	bne.w	8006ec8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d913      	bls.n	8006dcc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	1ad2      	subs	r2, r2, r3
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bf28      	it	cs
 8006dbe:	4613      	movcs	r3, r2
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f001 f984 	bl	80080d2 <USBD_CtlContinueRx>
 8006dca:	e07d      	b.n	8006ec8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dd2:	f003 031f 	and.w	r3, r3, #31
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d014      	beq.n	8006e04 <USBD_LL_DataOutStage+0x98>
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d81d      	bhi.n	8006e1a <USBD_LL_DataOutStage+0xae>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <USBD_LL_DataOutStage+0x7c>
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d003      	beq.n	8006dee <USBD_LL_DataOutStage+0x82>
 8006de6:	e018      	b.n	8006e1a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006de8:	2300      	movs	r3, #0
 8006dea:	75bb      	strb	r3, [r7, #22]
            break;
 8006dec:	e018      	b.n	8006e20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	4619      	mov	r1, r3
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fa5e 	bl	80072ba <USBD_CoreFindIF>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	75bb      	strb	r3, [r7, #22]
            break;
 8006e02:	e00d      	b.n	8006e20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 fa60 	bl	80072d4 <USBD_CoreFindEP>
 8006e14:	4603      	mov	r3, r0
 8006e16:	75bb      	strb	r3, [r7, #22]
            break;
 8006e18:	e002      	b.n	8006e20 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	75bb      	strb	r3, [r7, #22]
            break;
 8006e1e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006e20:	7dbb      	ldrb	r3, [r7, #22]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d119      	bne.n	8006e5a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d113      	bne.n	8006e5a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006e32:	7dba      	ldrb	r2, [r7, #22]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	32ae      	adds	r2, #174	; 0xae
 8006e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006e42:	7dba      	ldrb	r2, [r7, #22]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006e4a:	7dba      	ldrb	r2, [r7, #22]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	32ae      	adds	r2, #174	; 0xae
 8006e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f001 f94a 	bl	80080f4 <USBD_CtlSendStatus>
 8006e60:	e032      	b.n	8006ec8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fa31 	bl	80072d4 <USBD_CoreFindEP>
 8006e72:	4603      	mov	r3, r0
 8006e74:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e76:	7dbb      	ldrb	r3, [r7, #22]
 8006e78:	2bff      	cmp	r3, #255	; 0xff
 8006e7a:	d025      	beq.n	8006ec8 <USBD_LL_DataOutStage+0x15c>
 8006e7c:	7dbb      	ldrb	r3, [r7, #22]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d122      	bne.n	8006ec8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	d117      	bne.n	8006ebe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006e8e:	7dba      	ldrb	r2, [r7, #22]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	32ae      	adds	r2, #174	; 0xae
 8006e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00f      	beq.n	8006ebe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006e9e:	7dba      	ldrb	r2, [r7, #22]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ea6:	7dba      	ldrb	r2, [r7, #22]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	32ae      	adds	r2, #174	; 0xae
 8006eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	7afa      	ldrb	r2, [r7, #11]
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
 8006ec6:	e000      	b.n	8006eca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	460b      	mov	r3, r1
 8006edc:	607a      	str	r2, [r7, #4]
 8006ede:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d16f      	bne.n	8006fc6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3314      	adds	r3, #20
 8006eea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d15a      	bne.n	8006fac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d914      	bls.n	8006f2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	1ad2      	subs	r2, r2, r3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	461a      	mov	r2, r3
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f001 f8ac 	bl	8008076 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f1e:	2300      	movs	r3, #0
 8006f20:	2200      	movs	r2, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f001 fdad 	bl	8008a84 <USBD_LL_PrepareReceive>
 8006f2a:	e03f      	b.n	8006fac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	68da      	ldr	r2, [r3, #12]
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d11c      	bne.n	8006f72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d316      	bcc.n	8006f72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d20f      	bcs.n	8006f72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006f52:	2200      	movs	r2, #0
 8006f54:	2100      	movs	r1, #0
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f001 f88d 	bl	8008076 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f64:	2300      	movs	r3, #0
 8006f66:	2200      	movs	r2, #0
 8006f68:	2100      	movs	r1, #0
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f001 fd8a 	bl	8008a84 <USBD_LL_PrepareReceive>
 8006f70:	e01c      	b.n	8006fac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b03      	cmp	r3, #3
 8006f7c:	d10f      	bne.n	8006f9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d009      	beq.n	8006f9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f9e:	2180      	movs	r1, #128	; 0x80
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f001 fcc5 	bl	8008930 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f001 f8b7 	bl	800811a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d03a      	beq.n	800702c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff fe42 	bl	8006c40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006fc4:	e032      	b.n	800702c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006fc6:	7afb      	ldrb	r3, [r7, #11]
 8006fc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	4619      	mov	r1, r3
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 f97f 	bl	80072d4 <USBD_CoreFindEP>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	2bff      	cmp	r3, #255	; 0xff
 8006fde:	d025      	beq.n	800702c <USBD_LL_DataInStage+0x15a>
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d122      	bne.n	800702c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d11c      	bne.n	800702c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006ff2:	7dfa      	ldrb	r2, [r7, #23]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	32ae      	adds	r2, #174	; 0xae
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d014      	beq.n	800702c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007002:	7dfa      	ldrb	r2, [r7, #23]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800700a:	7dfa      	ldrb	r2, [r7, #23]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	32ae      	adds	r2, #174	; 0xae
 8007010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	7afa      	ldrb	r2, [r7, #11]
 8007018:	4611      	mov	r1, r2
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	4798      	blx	r3
 800701e:	4603      	mov	r3, r0
 8007020:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007022:	7dbb      	ldrb	r3, [r7, #22]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d001      	beq.n	800702c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007028:	7dbb      	ldrb	r3, [r7, #22]
 800702a:	e000      	b.n	800702e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3718      	adds	r7, #24
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d014      	beq.n	800709c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00e      	beq.n	800709c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6852      	ldr	r2, [r2, #4]
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	4611      	mov	r1, r2
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	4798      	blx	r3
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007098:	2303      	movs	r3, #3
 800709a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800709c:	2340      	movs	r3, #64	; 0x40
 800709e:	2200      	movs	r2, #0
 80070a0:	2100      	movs	r1, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f001 fbff 	bl	80088a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2240      	movs	r2, #64	; 0x40
 80070b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b8:	2340      	movs	r3, #64	; 0x40
 80070ba:	2200      	movs	r2, #0
 80070bc:	2180      	movs	r1, #128	; 0x80
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 fbf1 	bl	80088a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2240      	movs	r2, #64	; 0x40
 80070ce:	621a      	str	r2, [r3, #32]

  return ret;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80070da:	b480      	push	{r7}
 80070dc:	b083      	sub	sp, #12
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	460b      	mov	r3, r1
 80070e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b083      	sub	sp, #12
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	b2da      	uxtb	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2204      	movs	r2, #4
 8007114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b04      	cmp	r3, #4
 8007138:	d106      	bne.n	8007148 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007140:	b2da      	uxtb	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b082      	sub	sp, #8
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b03      	cmp	r3, #3
 8007168:	d110      	bne.n	800718c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00b      	beq.n	800718c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	32ae      	adds	r2, #174	; 0xae
 80071ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e01c      	b.n	80071f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b03      	cmp	r3, #3
 80071c2:	d115      	bne.n	80071f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	32ae      	adds	r2, #174	; 0xae
 80071ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00b      	beq.n	80071f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	32ae      	adds	r2, #174	; 0xae
 80071e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	4611      	mov	r1, r2
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	32ae      	adds	r2, #174	; 0xae
 8007210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	e01c      	b.n	8007256 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b03      	cmp	r3, #3
 8007226:	d115      	bne.n	8007254 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32ae      	adds	r2, #174	; 0xae
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32ae      	adds	r2, #174	; 0xae
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	4611      	mov	r1, r2
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00e      	beq.n	80072b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	6852      	ldr	r2, [r2, #4]
 800729e:	b2d2      	uxtb	r2, r2
 80072a0:	4611      	mov	r1, r2
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80072b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80072e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	b29b      	uxth	r3, r3
 8007312:	429a      	cmp	r2, r3
 8007314:	d920      	bls.n	8007358 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800731e:	e013      	b.n	8007348 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007320:	f107 030a 	add.w	r3, r7, #10
 8007324:	4619      	mov	r1, r3
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	f000 f81b 	bl	8007362 <USBD_GetNextDesc>
 800732c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	785b      	ldrb	r3, [r3, #1]
 8007332:	2b05      	cmp	r3, #5
 8007334:	d108      	bne.n	8007348 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	789b      	ldrb	r3, [r3, #2]
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	429a      	cmp	r2, r3
 8007342:	d008      	beq.n	8007356 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	885b      	ldrh	r3, [r3, #2]
 800734c:	b29a      	uxth	r2, r3
 800734e:	897b      	ldrh	r3, [r7, #10]
 8007350:	429a      	cmp	r2, r3
 8007352:	d8e5      	bhi.n	8007320 <USBD_GetEpDesc+0x32>
 8007354:	e000      	b.n	8007358 <USBD_GetEpDesc+0x6a>
          break;
 8007356:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007358:	693b      	ldr	r3, [r7, #16]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007362:	b480      	push	{r7}
 8007364:	b085      	sub	sp, #20
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	881a      	ldrh	r2, [r3, #0]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	4413      	add	r3, r2
 800737c:	b29a      	uxth	r2, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800738e:	68fb      	ldr	r3, [r7, #12]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3714      	adds	r7, #20
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	3301      	adds	r3, #1
 80073b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80073ba:	8a3b      	ldrh	r3, [r7, #16]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	b21a      	sxth	r2, r3
 80073c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	b21b      	sxth	r3, r3
 80073c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80073ca:	89fb      	ldrh	r3, [r7, #14]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d005      	beq.n	80073fe <USBD_StdDevReq+0x26>
 80073f2:	2b40      	cmp	r3, #64	; 0x40
 80073f4:	d857      	bhi.n	80074a6 <USBD_StdDevReq+0xce>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00f      	beq.n	800741a <USBD_StdDevReq+0x42>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d153      	bne.n	80074a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	32ae      	adds	r2, #174	; 0xae
 8007408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	4798      	blx	r3
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
      break;
 8007418:	e04a      	b.n	80074b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b09      	cmp	r3, #9
 8007420:	d83b      	bhi.n	800749a <USBD_StdDevReq+0xc2>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <USBD_StdDevReq+0x50>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	0800747d 	.word	0x0800747d
 800742c:	08007491 	.word	0x08007491
 8007430:	0800749b 	.word	0x0800749b
 8007434:	08007487 	.word	0x08007487
 8007438:	0800749b 	.word	0x0800749b
 800743c:	0800745b 	.word	0x0800745b
 8007440:	08007451 	.word	0x08007451
 8007444:	0800749b 	.word	0x0800749b
 8007448:	08007473 	.word	0x08007473
 800744c:	08007465 	.word	0x08007465
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa3c 	bl	80078d0 <USBD_GetDescriptor>
          break;
 8007458:	e024      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800745a:	6839      	ldr	r1, [r7, #0]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fba1 	bl	8007ba4 <USBD_SetAddress>
          break;
 8007462:	e01f      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fbe0 	bl	8007c2c <USBD_SetConfig>
 800746c:	4603      	mov	r3, r0
 800746e:	73fb      	strb	r3, [r7, #15]
          break;
 8007470:	e018      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fc83 	bl	8007d80 <USBD_GetConfig>
          break;
 800747a:	e013      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 fcb4 	bl	8007dec <USBD_GetStatus>
          break;
 8007484:	e00e      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fce3 	bl	8007e54 <USBD_SetFeature>
          break;
 800748e:	e009      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fd07 	bl	8007ea6 <USBD_ClrFeature>
          break;
 8007498:	e004      	b.n	80074a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800749a:	6839      	ldr	r1, [r7, #0]
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 fd5e 	bl	8007f5e <USBD_CtlError>
          break;
 80074a2:	bf00      	nop
      }
      break;
 80074a4:	e004      	b.n	80074b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fd58 	bl	8007f5e <USBD_CtlError>
      break;
 80074ae:	bf00      	nop
  }

  return ret;
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop

080074bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d005      	beq.n	80074e2 <USBD_StdItfReq+0x26>
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d852      	bhi.n	8007580 <USBD_StdItfReq+0xc4>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <USBD_StdItfReq+0x26>
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d14e      	bne.n	8007580 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d840      	bhi.n	8007572 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	889b      	ldrh	r3, [r3, #4]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d836      	bhi.n	8007568 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	889b      	ldrh	r3, [r3, #4]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4619      	mov	r1, r3
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff fed9 	bl	80072ba <USBD_CoreFindIF>
 8007508:	4603      	mov	r3, r0
 800750a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800750c:	7bbb      	ldrb	r3, [r7, #14]
 800750e:	2bff      	cmp	r3, #255	; 0xff
 8007510:	d01d      	beq.n	800754e <USBD_StdItfReq+0x92>
 8007512:	7bbb      	ldrb	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d11a      	bne.n	800754e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007518:	7bba      	ldrb	r2, [r7, #14]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32ae      	adds	r2, #174	; 0xae
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00f      	beq.n	8007548 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007528:	7bba      	ldrb	r2, [r7, #14]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007530:	7bba      	ldrb	r2, [r7, #14]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	32ae      	adds	r2, #174	; 0xae
 8007536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007546:	e004      	b.n	8007552 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007548:	2303      	movs	r3, #3
 800754a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800754c:	e001      	b.n	8007552 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800754e:	2303      	movs	r3, #3
 8007550:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	88db      	ldrh	r3, [r3, #6]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d110      	bne.n	800757c <USBD_StdItfReq+0xc0>
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10d      	bne.n	800757c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fdc7 	bl	80080f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007566:	e009      	b.n	800757c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fcf7 	bl	8007f5e <USBD_CtlError>
          break;
 8007570:	e004      	b.n	800757c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007572:	6839      	ldr	r1, [r7, #0]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fcf2 	bl	8007f5e <USBD_CtlError>
          break;
 800757a:	e000      	b.n	800757e <USBD_StdItfReq+0xc2>
          break;
 800757c:	bf00      	nop
      }
      break;
 800757e:	e004      	b.n	800758a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fceb 	bl	8007f5e <USBD_CtlError>
      break;
 8007588:	bf00      	nop
  }

  return ret;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	889b      	ldrh	r3, [r3, #4]
 80075a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075b0:	2b40      	cmp	r3, #64	; 0x40
 80075b2:	d007      	beq.n	80075c4 <USBD_StdEPReq+0x30>
 80075b4:	2b40      	cmp	r3, #64	; 0x40
 80075b6:	f200 817f 	bhi.w	80078b8 <USBD_StdEPReq+0x324>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d02a      	beq.n	8007614 <USBD_StdEPReq+0x80>
 80075be:	2b20      	cmp	r3, #32
 80075c0:	f040 817a 	bne.w	80078b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff fe83 	bl	80072d4 <USBD_CoreFindEP>
 80075ce:	4603      	mov	r3, r0
 80075d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075d2:	7b7b      	ldrb	r3, [r7, #13]
 80075d4:	2bff      	cmp	r3, #255	; 0xff
 80075d6:	f000 8174 	beq.w	80078c2 <USBD_StdEPReq+0x32e>
 80075da:	7b7b      	ldrb	r3, [r7, #13]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8170 	bne.w	80078c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80075e2:	7b7a      	ldrb	r2, [r7, #13]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80075ea:	7b7a      	ldrb	r2, [r7, #13]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32ae      	adds	r2, #174	; 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8163 	beq.w	80078c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80075fc:	7b7a      	ldrb	r2, [r7, #13]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32ae      	adds	r2, #174	; 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	4798      	blx	r3
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007612:	e156      	b.n	80078c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b03      	cmp	r3, #3
 800761a:	d008      	beq.n	800762e <USBD_StdEPReq+0x9a>
 800761c:	2b03      	cmp	r3, #3
 800761e:	f300 8145 	bgt.w	80078ac <USBD_StdEPReq+0x318>
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 809b 	beq.w	800775e <USBD_StdEPReq+0x1ca>
 8007628:	2b01      	cmp	r3, #1
 800762a:	d03c      	beq.n	80076a6 <USBD_StdEPReq+0x112>
 800762c:	e13e      	b.n	80078ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007634:	b2db      	uxtb	r3, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d002      	beq.n	8007640 <USBD_StdEPReq+0xac>
 800763a:	2b03      	cmp	r3, #3
 800763c:	d016      	beq.n	800766c <USBD_StdEPReq+0xd8>
 800763e:	e02c      	b.n	800769a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00d      	beq.n	8007662 <USBD_StdEPReq+0xce>
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b80      	cmp	r3, #128	; 0x80
 800764a:	d00a      	beq.n	8007662 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 f96d 	bl	8008930 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007656:	2180      	movs	r1, #128	; 0x80
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f969 	bl	8008930 <USBD_LL_StallEP>
 800765e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007660:	e020      	b.n	80076a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007662:	6839      	ldr	r1, [r7, #0]
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fc7a 	bl	8007f5e <USBD_CtlError>
              break;
 800766a:	e01b      	b.n	80076a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	885b      	ldrh	r3, [r3, #2]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10e      	bne.n	8007692 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <USBD_StdEPReq+0xfe>
 800767a:	7bbb      	ldrb	r3, [r7, #14]
 800767c:	2b80      	cmp	r3, #128	; 0x80
 800767e:	d008      	beq.n	8007692 <USBD_StdEPReq+0xfe>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	88db      	ldrh	r3, [r3, #6]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f001 f94f 	bl	8008930 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fd2e 	bl	80080f4 <USBD_CtlSendStatus>

              break;
 8007698:	e004      	b.n	80076a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fc5e 	bl	8007f5e <USBD_CtlError>
              break;
 80076a2:	bf00      	nop
          }
          break;
 80076a4:	e107      	b.n	80078b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d002      	beq.n	80076b8 <USBD_StdEPReq+0x124>
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d016      	beq.n	80076e4 <USBD_StdEPReq+0x150>
 80076b6:	e04b      	b.n	8007750 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076b8:	7bbb      	ldrb	r3, [r7, #14]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00d      	beq.n	80076da <USBD_StdEPReq+0x146>
 80076be:	7bbb      	ldrb	r3, [r7, #14]
 80076c0:	2b80      	cmp	r3, #128	; 0x80
 80076c2:	d00a      	beq.n	80076da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f001 f931 	bl	8008930 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ce:	2180      	movs	r1, #128	; 0x80
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f001 f92d 	bl	8008930 <USBD_LL_StallEP>
 80076d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076d8:	e040      	b.n	800775c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fc3e 	bl	8007f5e <USBD_CtlError>
              break;
 80076e2:	e03b      	b.n	800775c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	885b      	ldrh	r3, [r3, #2]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d136      	bne.n	800775a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 f937 	bl	800896e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fcf7 	bl	80080f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff fde2 	bl	80072d4 <USBD_CoreFindEP>
 8007710:	4603      	mov	r3, r0
 8007712:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007714:	7b7b      	ldrb	r3, [r7, #13]
 8007716:	2bff      	cmp	r3, #255	; 0xff
 8007718:	d01f      	beq.n	800775a <USBD_StdEPReq+0x1c6>
 800771a:	7b7b      	ldrb	r3, [r7, #13]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11c      	bne.n	800775a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007720:	7b7a      	ldrb	r2, [r7, #13]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007728:	7b7a      	ldrb	r2, [r7, #13]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32ae      	adds	r2, #174	; 0xae
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d010      	beq.n	800775a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007738:	7b7a      	ldrb	r2, [r7, #13]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	32ae      	adds	r2, #174	; 0xae
 800773e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	4798      	blx	r3
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800774e:	e004      	b.n	800775a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fc03 	bl	8007f5e <USBD_CtlError>
              break;
 8007758:	e000      	b.n	800775c <USBD_StdEPReq+0x1c8>
              break;
 800775a:	bf00      	nop
          }
          break;
 800775c:	e0ab      	b.n	80078b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007764:	b2db      	uxtb	r3, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d002      	beq.n	8007770 <USBD_StdEPReq+0x1dc>
 800776a:	2b03      	cmp	r3, #3
 800776c:	d032      	beq.n	80077d4 <USBD_StdEPReq+0x240>
 800776e:	e097      	b.n	80078a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <USBD_StdEPReq+0x1f2>
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	2b80      	cmp	r3, #128	; 0x80
 800777a:	d004      	beq.n	8007786 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fbed 	bl	8007f5e <USBD_CtlError>
                break;
 8007784:	e091      	b.n	80078aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800778a:	2b00      	cmp	r3, #0
 800778c:	da0b      	bge.n	80077a6 <USBD_StdEPReq+0x212>
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	3310      	adds	r3, #16
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	4413      	add	r3, r2
 80077a2:	3304      	adds	r3, #4
 80077a4:	e00b      	b.n	80077be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	4413      	add	r3, r2
 80077bc:	3304      	adds	r3, #4
 80077be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	2202      	movs	r2, #2
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fc37 	bl	8008040 <USBD_CtlSendData>
              break;
 80077d2:	e06a      	b.n	80078aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80077d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	da11      	bge.n	8007800 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	f003 020f 	and.w	r2, r3, #15
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	4613      	mov	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	4413      	add	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	440b      	add	r3, r1
 80077ee:	3324      	adds	r3, #36	; 0x24
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d117      	bne.n	8007826 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fbb0 	bl	8007f5e <USBD_CtlError>
                  break;
 80077fe:	e054      	b.n	80078aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	f003 020f 	and.w	r2, r3, #15
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4613      	mov	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	4413      	add	r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007816:	881b      	ldrh	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d104      	bne.n	8007826 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fb9d 	bl	8007f5e <USBD_CtlError>
                  break;
 8007824:	e041      	b.n	80078aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007826:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800782a:	2b00      	cmp	r3, #0
 800782c:	da0b      	bge.n	8007846 <USBD_StdEPReq+0x2b2>
 800782e:	7bbb      	ldrb	r3, [r7, #14]
 8007830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	3310      	adds	r3, #16
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4413      	add	r3, r2
 8007842:	3304      	adds	r3, #4
 8007844:	e00b      	b.n	800785e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	4413      	add	r3, r2
 800785c:	3304      	adds	r3, #4
 800785e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <USBD_StdEPReq+0x2d8>
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	2b80      	cmp	r3, #128	; 0x80
 800786a:	d103      	bne.n	8007874 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	e00e      	b.n	8007892 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f001 f897 	bl	80089ac <USBD_LL_IsStallEP>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d003      	beq.n	800788c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2201      	movs	r2, #1
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e002      	b.n	8007892 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2200      	movs	r2, #0
 8007890:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2202      	movs	r2, #2
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fbd1 	bl	8008040 <USBD_CtlSendData>
              break;
 800789e:	e004      	b.n	80078aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb5b 	bl	8007f5e <USBD_CtlError>
              break;
 80078a8:	bf00      	nop
          }
          break;
 80078aa:	e004      	b.n	80078b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fb55 	bl	8007f5e <USBD_CtlError>
          break;
 80078b4:	bf00      	nop
      }
      break;
 80078b6:	e005      	b.n	80078c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 fb4f 	bl	8007f5e <USBD_CtlError>
      break;
 80078c0:	e000      	b.n	80078c4 <USBD_StdEPReq+0x330>
      break;
 80078c2:	bf00      	nop
  }

  return ret;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	0a1b      	lsrs	r3, r3, #8
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	2b06      	cmp	r3, #6
 80078f2:	f200 8128 	bhi.w	8007b46 <USBD_GetDescriptor+0x276>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <USBD_GetDescriptor+0x2c>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	08007919 	.word	0x08007919
 8007900:	08007931 	.word	0x08007931
 8007904:	08007971 	.word	0x08007971
 8007908:	08007b47 	.word	0x08007b47
 800790c:	08007b47 	.word	0x08007b47
 8007910:	08007ae7 	.word	0x08007ae7
 8007914:	08007b13 	.word	0x08007b13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	7c12      	ldrb	r2, [r2, #16]
 8007924:	f107 0108 	add.w	r1, r7, #8
 8007928:	4610      	mov	r0, r2
 800792a:	4798      	blx	r3
 800792c:	60f8      	str	r0, [r7, #12]
      break;
 800792e:	e112      	b.n	8007b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	7c1b      	ldrb	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10d      	bne.n	8007954 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	f107 0208 	add.w	r2, r7, #8
 8007944:	4610      	mov	r0, r2
 8007946:	4798      	blx	r3
 8007948:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	2202      	movs	r2, #2
 8007950:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007952:	e100      	b.n	8007b56 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	f107 0208 	add.w	r2, r7, #8
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
 8007964:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	2202      	movs	r2, #2
 800796c:	701a      	strb	r2, [r3, #0]
      break;
 800796e:	e0f2      	b.n	8007b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	885b      	ldrh	r3, [r3, #2]
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b05      	cmp	r3, #5
 8007978:	f200 80ac 	bhi.w	8007ad4 <USBD_GetDescriptor+0x204>
 800797c:	a201      	add	r2, pc, #4	; (adr r2, 8007984 <USBD_GetDescriptor+0xb4>)
 800797e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007982:	bf00      	nop
 8007984:	0800799d 	.word	0x0800799d
 8007988:	080079d1 	.word	0x080079d1
 800798c:	08007a05 	.word	0x08007a05
 8007990:	08007a39 	.word	0x08007a39
 8007994:	08007a6d 	.word	0x08007a6d
 8007998:	08007aa1 	.word	0x08007aa1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00b      	beq.n	80079c0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	7c12      	ldrb	r2, [r2, #16]
 80079b4:	f107 0108 	add.w	r1, r7, #8
 80079b8:	4610      	mov	r0, r2
 80079ba:	4798      	blx	r3
 80079bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079be:	e091      	b.n	8007ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 facb 	bl	8007f5e <USBD_CtlError>
            err++;
 80079c8:	7afb      	ldrb	r3, [r7, #11]
 80079ca:	3301      	adds	r3, #1
 80079cc:	72fb      	strb	r3, [r7, #11]
          break;
 80079ce:	e089      	b.n	8007ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00b      	beq.n	80079f4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	7c12      	ldrb	r2, [r2, #16]
 80079e8:	f107 0108 	add.w	r1, r7, #8
 80079ec:	4610      	mov	r0, r2
 80079ee:	4798      	blx	r3
 80079f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80079f2:	e077      	b.n	8007ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fab1 	bl	8007f5e <USBD_CtlError>
            err++;
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	3301      	adds	r3, #1
 8007a00:	72fb      	strb	r3, [r7, #11]
          break;
 8007a02:	e06f      	b.n	8007ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7c12      	ldrb	r2, [r2, #16]
 8007a1c:	f107 0108 	add.w	r1, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a26:	e05d      	b.n	8007ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fa97 	bl	8007f5e <USBD_CtlError>
            err++;
 8007a30:	7afb      	ldrb	r3, [r7, #11]
 8007a32:	3301      	adds	r3, #1
 8007a34:	72fb      	strb	r3, [r7, #11]
          break;
 8007a36:	e055      	b.n	8007ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00b      	beq.n	8007a5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a4a:	691b      	ldr	r3, [r3, #16]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	7c12      	ldrb	r2, [r2, #16]
 8007a50:	f107 0108 	add.w	r1, r7, #8
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
 8007a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a5a:	e043      	b.n	8007ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fa7d 	bl	8007f5e <USBD_CtlError>
            err++;
 8007a64:	7afb      	ldrb	r3, [r7, #11]
 8007a66:	3301      	adds	r3, #1
 8007a68:	72fb      	strb	r3, [r7, #11]
          break;
 8007a6a:	e03b      	b.n	8007ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	695b      	ldr	r3, [r3, #20]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	7c12      	ldrb	r2, [r2, #16]
 8007a84:	f107 0108 	add.w	r1, r7, #8
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4798      	blx	r3
 8007a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8e:	e029      	b.n	8007ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa63 	bl	8007f5e <USBD_CtlError>
            err++;
 8007a98:	7afb      	ldrb	r3, [r7, #11]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8007a9e:	e021      	b.n	8007ae4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa6:	699b      	ldr	r3, [r3, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	7c12      	ldrb	r2, [r2, #16]
 8007ab8:	f107 0108 	add.w	r1, r7, #8
 8007abc:	4610      	mov	r0, r2
 8007abe:	4798      	blx	r3
 8007ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ac2:	e00f      	b.n	8007ae4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa49 	bl	8007f5e <USBD_CtlError>
            err++;
 8007acc:	7afb      	ldrb	r3, [r7, #11]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ad2:	e007      	b.n	8007ae4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ad4:	6839      	ldr	r1, [r7, #0]
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa41 	bl	8007f5e <USBD_CtlError>
          err++;
 8007adc:	7afb      	ldrb	r3, [r7, #11]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ae2:	bf00      	nop
      }
      break;
 8007ae4:	e037      	b.n	8007b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7c1b      	ldrb	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af6:	f107 0208 	add.w	r2, r7, #8
 8007afa:	4610      	mov	r0, r2
 8007afc:	4798      	blx	r3
 8007afe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b00:	e029      	b.n	8007b56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fa2a 	bl	8007f5e <USBD_CtlError>
        err++;
 8007b0a:	7afb      	ldrb	r3, [r7, #11]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8007b10:	e021      	b.n	8007b56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	7c1b      	ldrb	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10d      	bne.n	8007b36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	f107 0208 	add.w	r2, r7, #8
 8007b26:	4610      	mov	r0, r2
 8007b28:	4798      	blx	r3
 8007b2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	2207      	movs	r2, #7
 8007b32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b34:	e00f      	b.n	8007b56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b36:	6839      	ldr	r1, [r7, #0]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 fa10 	bl	8007f5e <USBD_CtlError>
        err++;
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	3301      	adds	r3, #1
 8007b42:	72fb      	strb	r3, [r7, #11]
      break;
 8007b44:	e007      	b.n	8007b56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fa08 	bl	8007f5e <USBD_CtlError>
      err++;
 8007b4e:	7afb      	ldrb	r3, [r7, #11]
 8007b50:	3301      	adds	r3, #1
 8007b52:	72fb      	strb	r3, [r7, #11]
      break;
 8007b54:	bf00      	nop
  }

  if (err != 0U)
 8007b56:	7afb      	ldrb	r3, [r7, #11]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d11e      	bne.n	8007b9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	88db      	ldrh	r3, [r3, #6]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d016      	beq.n	8007b92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007b64:	893b      	ldrh	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00e      	beq.n	8007b88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	88da      	ldrh	r2, [r3, #6]
 8007b6e:	893b      	ldrh	r3, [r7, #8]
 8007b70:	4293      	cmp	r3, r2
 8007b72:	bf28      	it	cs
 8007b74:	4613      	movcs	r3, r2
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b7a:	893b      	ldrh	r3, [r7, #8]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	68f9      	ldr	r1, [r7, #12]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fa5d 	bl	8008040 <USBD_CtlSendData>
 8007b86:	e009      	b.n	8007b9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f9e7 	bl	8007f5e <USBD_CtlError>
 8007b90:	e004      	b.n	8007b9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 faae 	bl	80080f4 <USBD_CtlSendStatus>
 8007b98:	e000      	b.n	8007b9c <USBD_GetDescriptor+0x2cc>
    return;
 8007b9a:	bf00      	nop
  }
}
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop

08007ba4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	889b      	ldrh	r3, [r3, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d131      	bne.n	8007c1a <USBD_SetAddress+0x76>
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	88db      	ldrh	r3, [r3, #6]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d12d      	bne.n	8007c1a <USBD_SetAddress+0x76>
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	885b      	ldrh	r3, [r3, #2]
 8007bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8007bc4:	d829      	bhi.n	8007c1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	885b      	ldrh	r3, [r3, #2]
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d104      	bne.n	8007be8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f9bc 	bl	8007f5e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be6:	e01d      	b.n	8007c24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	7bfa      	ldrb	r2, [r7, #15]
 8007bec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 ff05 	bl	8008a04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fa7a 	bl	80080f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	e009      	b.n	8007c24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c18:	e004      	b.n	8007c24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f99e 	bl	8007f5e <USBD_CtlError>
  }
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	885b      	ldrh	r3, [r3, #2]
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	4b4e      	ldr	r3, [pc, #312]	; (8007d7c <USBD_SetConfig+0x150>)
 8007c42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c44:	4b4d      	ldr	r3, [pc, #308]	; (8007d7c <USBD_SetConfig+0x150>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d905      	bls.n	8007c58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f985 	bl	8007f5e <USBD_CtlError>
    return USBD_FAIL;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e08c      	b.n	8007d72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d002      	beq.n	8007c6a <USBD_SetConfig+0x3e>
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d029      	beq.n	8007cbc <USBD_SetConfig+0x90>
 8007c68:	e075      	b.n	8007d56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007c6a:	4b44      	ldr	r3, [pc, #272]	; (8007d7c <USBD_SetConfig+0x150>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d020      	beq.n	8007cb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007c72:	4b42      	ldr	r3, [pc, #264]	; (8007d7c <USBD_SetConfig+0x150>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	461a      	mov	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007c7c:	4b3f      	ldr	r3, [pc, #252]	; (8007d7c <USBD_SetConfig+0x150>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7fe ffe7 	bl	8006c56 <USBD_SetClassConfig>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d008      	beq.n	8007ca4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 f962 	bl	8007f5e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ca2:	e065      	b.n	8007d70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fa25 	bl	80080f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2203      	movs	r2, #3
 8007cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007cb2:	e05d      	b.n	8007d70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fa1d 	bl	80080f4 <USBD_CtlSendStatus>
      break;
 8007cba:	e059      	b.n	8007d70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007cbc:	4b2f      	ldr	r3, [pc, #188]	; (8007d7c <USBD_SetConfig+0x150>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d112      	bne.n	8007cea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007ccc:	4b2b      	ldr	r3, [pc, #172]	; (8007d7c <USBD_SetConfig+0x150>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007cd6:	4b29      	ldr	r3, [pc, #164]	; (8007d7c <USBD_SetConfig+0x150>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fe ffd6 	bl	8006c8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa06 	bl	80080f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ce8:	e042      	b.n	8007d70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007cea:	4b24      	ldr	r3, [pc, #144]	; (8007d7c <USBD_SetConfig+0x150>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d02a      	beq.n	8007d4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7fe ffc4 	bl	8006c8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d06:	4b1d      	ldr	r3, [pc, #116]	; (8007d7c <USBD_SetConfig+0x150>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d10:	4b1a      	ldr	r3, [pc, #104]	; (8007d7c <USBD_SetConfig+0x150>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7fe ff9d 	bl	8006c56 <USBD_SetClassConfig>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00f      	beq.n	8007d46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f918 	bl	8007f5e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f7fe ffa9 	bl	8006c8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d44:	e014      	b.n	8007d70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f9d4 	bl	80080f4 <USBD_CtlSendStatus>
      break;
 8007d4c:	e010      	b.n	8007d70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f9d0 	bl	80080f4 <USBD_CtlSendStatus>
      break;
 8007d54:	e00c      	b.n	8007d70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f900 	bl	8007f5e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d5e:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <USBD_SetConfig+0x150>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7fe ff92 	bl	8006c8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8007d6e:	bf00      	nop
  }

  return ret;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20003164 	.word	0x20003164

08007d80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	88db      	ldrh	r3, [r3, #6]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d004      	beq.n	8007d9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 f8e2 	bl	8007f5e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007d9a:	e023      	b.n	8007de4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	dc02      	bgt.n	8007dae <USBD_GetConfig+0x2e>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	dc03      	bgt.n	8007db4 <USBD_GetConfig+0x34>
 8007dac:	e015      	b.n	8007dda <USBD_GetConfig+0x5a>
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d00b      	beq.n	8007dca <USBD_GetConfig+0x4a>
 8007db2:	e012      	b.n	8007dda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f93c 	bl	8008040 <USBD_CtlSendData>
        break;
 8007dc8:	e00c      	b.n	8007de4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	2201      	movs	r2, #1
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f934 	bl	8008040 <USBD_CtlSendData>
        break;
 8007dd8:	e004      	b.n	8007de4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f8be 	bl	8007f5e <USBD_CtlError>
        break;
 8007de2:	bf00      	nop
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d81e      	bhi.n	8007e42 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	88db      	ldrh	r3, [r3, #6]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d004      	beq.n	8007e16 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e0c:	6839      	ldr	r1, [r7, #0]
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f8a5 	bl	8007f5e <USBD_CtlError>
        break;
 8007e14:	e01a      	b.n	8007e4c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d005      	beq.n	8007e32 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	f043 0202 	orr.w	r2, r3, #2
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	330c      	adds	r3, #12
 8007e36:	2202      	movs	r2, #2
 8007e38:	4619      	mov	r1, r3
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f900 	bl	8008040 <USBD_CtlSendData>
      break;
 8007e40:	e004      	b.n	8007e4c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f88a 	bl	8007f5e <USBD_CtlError>
      break;
 8007e4a:	bf00      	nop
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	885b      	ldrh	r3, [r3, #2]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d107      	bne.n	8007e76 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f940 	bl	80080f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007e74:	e013      	b.n	8007e9e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	885b      	ldrh	r3, [r3, #2]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d10b      	bne.n	8007e96 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	889b      	ldrh	r3, [r3, #4]
 8007e82:	0a1b      	lsrs	r3, r3, #8
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f930 	bl	80080f4 <USBD_CtlSendStatus>
}
 8007e94:	e003      	b.n	8007e9e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f860 	bl	8007f5e <USBD_CtlError>
}
 8007e9e:	bf00      	nop
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d80b      	bhi.n	8007ed6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	885b      	ldrh	r3, [r3, #2]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d10c      	bne.n	8007ee0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f910 	bl	80080f4 <USBD_CtlSendStatus>
      }
      break;
 8007ed4:	e004      	b.n	8007ee0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f840 	bl	8007f5e <USBD_CtlError>
      break;
 8007ede:	e000      	b.n	8007ee2 <USBD_ClrFeature+0x3c>
      break;
 8007ee0:	bf00      	nop
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b084      	sub	sp, #16
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	781a      	ldrb	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3301      	adds	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	781a      	ldrb	r2, [r3, #0]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3301      	adds	r3, #1
 8007f12:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f7ff fa41 	bl	800739c <SWAPBYTE>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7ff fa34 	bl	800739c <SWAPBYTE>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fa27 	bl	800739c <SWAPBYTE>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	461a      	mov	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	80da      	strh	r2, [r3, #6]
}
 8007f56:	bf00      	nop
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f68:	2180      	movs	r1, #128	; 0x80
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fce0 	bl	8008930 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007f70:	2100      	movs	r1, #0
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fcdc 	bl	8008930 <USBD_LL_StallEP>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d036      	beq.n	8008004 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007f9a:	6938      	ldr	r0, [r7, #16]
 8007f9c:	f000 f836 	bl	800800c <USBD_GetLen>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	7812      	ldrb	r2, [r2, #0]
 8007fb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007fd0:	e013      	b.n	8007ffa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	7812      	ldrb	r2, [r2, #0]
 8007fdc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	613b      	str	r3, [r7, #16]
    idx++;
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4413      	add	r3, r2
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e7      	bne.n	8007fd2 <USBD_GetString+0x52>
 8008002:	e000      	b.n	8008006 <USBD_GetString+0x86>
    return;
 8008004:	bf00      	nop
  }
}
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800801c:	e005      	b.n	800802a <USBD_GetLen+0x1e>
  {
    len++;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	3301      	adds	r3, #1
 8008022:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3301      	adds	r3, #1
 8008028:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f5      	bne.n	800801e <USBD_GetLen+0x12>
  }

  return len;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2202      	movs	r2, #2
 8008050:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	2100      	movs	r1, #0
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 fceb 	bl	8008a42 <USBD_LL_Transmit>

  return USBD_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	2100      	movs	r1, #0
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 fcda 	bl	8008a42 <USBD_LL_Transmit>

  return USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2203      	movs	r2, #3
 80080a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	2100      	movs	r1, #0
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 fcde 	bl	8008a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	2100      	movs	r1, #0
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 fccd 	bl	8008a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2204      	movs	r2, #4
 8008100:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008104:	2300      	movs	r3, #0
 8008106:	2200      	movs	r2, #0
 8008108:	2100      	movs	r1, #0
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f000 fc99 	bl	8008a42 <USBD_LL_Transmit>

  return USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2205      	movs	r2, #5
 8008126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800812a:	2300      	movs	r3, #0
 800812c:	2200      	movs	r2, #0
 800812e:	2100      	movs	r1, #0
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fca7 	bl	8008a84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008144:	2200      	movs	r2, #0
 8008146:	4912      	ldr	r1, [pc, #72]	; (8008190 <MX_USB_DEVICE_Init+0x50>)
 8008148:	4812      	ldr	r0, [pc, #72]	; (8008194 <MX_USB_DEVICE_Init+0x54>)
 800814a:	f7fe fd07 	bl	8006b5c <USBD_Init>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008154:	f7f8 fce0 	bl	8000b18 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008158:	490f      	ldr	r1, [pc, #60]	; (8008198 <MX_USB_DEVICE_Init+0x58>)
 800815a:	480e      	ldr	r0, [pc, #56]	; (8008194 <MX_USB_DEVICE_Init+0x54>)
 800815c:	f7fe fd2e 	bl	8006bbc <USBD_RegisterClass>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008166:	f7f8 fcd7 	bl	8000b18 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800816a:	490c      	ldr	r1, [pc, #48]	; (800819c <MX_USB_DEVICE_Init+0x5c>)
 800816c:	4809      	ldr	r0, [pc, #36]	; (8008194 <MX_USB_DEVICE_Init+0x54>)
 800816e:	f7fe fc1f 	bl	80069b0 <USBD_CDC_RegisterInterface>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008178:	f7f8 fcce 	bl	8000b18 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800817c:	4805      	ldr	r0, [pc, #20]	; (8008194 <MX_USB_DEVICE_Init+0x54>)
 800817e:	f7fe fd53 	bl	8006c28 <USBD_Start>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d001      	beq.n	800818c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008188:	f7f8 fcc6 	bl	8000b18 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800818c:	bf00      	nop
 800818e:	bd80      	pop	{r7, pc}
 8008190:	200000ac 	.word	0x200000ac
 8008194:	20003168 	.word	0x20003168
 8008198:	20000018 	.word	0x20000018
 800819c:	20000098 	.word	0x20000098

080081a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80081a4:	2200      	movs	r2, #0
 80081a6:	4905      	ldr	r1, [pc, #20]	; (80081bc <CDC_Init_FS+0x1c>)
 80081a8:	4805      	ldr	r0, [pc, #20]	; (80081c0 <CDC_Init_FS+0x20>)
 80081aa:	f7fe fc1b 	bl	80069e4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80081ae:	4905      	ldr	r1, [pc, #20]	; (80081c4 <CDC_Init_FS+0x24>)
 80081b0:	4803      	ldr	r0, [pc, #12]	; (80081c0 <CDC_Init_FS+0x20>)
 80081b2:	f7fe fc39 	bl	8006a28 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20003c44 	.word	0x20003c44
 80081c0:	20003168 	.word	0x20003168
 80081c4:	20003444 	.word	0x20003444

080081c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	6039      	str	r1, [r7, #0]
 80081e2:	71fb      	strb	r3, [r7, #7]
 80081e4:	4613      	mov	r3, r2
 80081e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	2b23      	cmp	r3, #35	; 0x23
 80081ec:	d84a      	bhi.n	8008284 <CDC_Control_FS+0xac>
 80081ee:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <CDC_Control_FS+0x1c>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008285 	.word	0x08008285
 80081f8:	08008285 	.word	0x08008285
 80081fc:	08008285 	.word	0x08008285
 8008200:	08008285 	.word	0x08008285
 8008204:	08008285 	.word	0x08008285
 8008208:	08008285 	.word	0x08008285
 800820c:	08008285 	.word	0x08008285
 8008210:	08008285 	.word	0x08008285
 8008214:	08008285 	.word	0x08008285
 8008218:	08008285 	.word	0x08008285
 800821c:	08008285 	.word	0x08008285
 8008220:	08008285 	.word	0x08008285
 8008224:	08008285 	.word	0x08008285
 8008228:	08008285 	.word	0x08008285
 800822c:	08008285 	.word	0x08008285
 8008230:	08008285 	.word	0x08008285
 8008234:	08008285 	.word	0x08008285
 8008238:	08008285 	.word	0x08008285
 800823c:	08008285 	.word	0x08008285
 8008240:	08008285 	.word	0x08008285
 8008244:	08008285 	.word	0x08008285
 8008248:	08008285 	.word	0x08008285
 800824c:	08008285 	.word	0x08008285
 8008250:	08008285 	.word	0x08008285
 8008254:	08008285 	.word	0x08008285
 8008258:	08008285 	.word	0x08008285
 800825c:	08008285 	.word	0x08008285
 8008260:	08008285 	.word	0x08008285
 8008264:	08008285 	.word	0x08008285
 8008268:	08008285 	.word	0x08008285
 800826c:	08008285 	.word	0x08008285
 8008270:	08008285 	.word	0x08008285
 8008274:	08008285 	.word	0x08008285
 8008278:	08008285 	.word	0x08008285
 800827c:	08008285 	.word	0x08008285
 8008280:	08008285 	.word	0x08008285
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008284:	bf00      	nop
  }

  return (USBD_OK);
 8008286:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008288:	4618      	mov	r0, r3
 800828a:	370c      	adds	r7, #12
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800829e:	6879      	ldr	r1, [r7, #4]
 80082a0:	4805      	ldr	r0, [pc, #20]	; (80082b8 <CDC_Receive_FS+0x24>)
 80082a2:	f7fe fbc1 	bl	8006a28 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80082a6:	4804      	ldr	r0, [pc, #16]	; (80082b8 <CDC_Receive_FS+0x24>)
 80082a8:	f7fe fc22 	bl	8006af0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80082ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20003168 	.word	0x20003168

080082bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80082cc:	4b0d      	ldr	r3, [pc, #52]	; (8008304 <CDC_Transmit_FS+0x48>)
 80082ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80082de:	2301      	movs	r3, #1
 80082e0:	e00b      	b.n	80082fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80082e2:	887b      	ldrh	r3, [r7, #2]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	4806      	ldr	r0, [pc, #24]	; (8008304 <CDC_Transmit_FS+0x48>)
 80082ea:	f7fe fb7b 	bl	80069e4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80082ee:	4805      	ldr	r0, [pc, #20]	; (8008304 <CDC_Transmit_FS+0x48>)
 80082f0:	f7fe fbb8 	bl	8006a64 <USBD_CDC_TransmitPacket>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20003168 	.word	0x20003168

08008308 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800831a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800831e:	4618      	mov	r0, r3
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
	...

0800832c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	6039      	str	r1, [r7, #0]
 8008336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2212      	movs	r2, #18
 800833c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800833e:	4b03      	ldr	r3, [pc, #12]	; (800834c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	200000c8 	.word	0x200000c8

08008350 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	6039      	str	r1, [r7, #0]
 800835a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2204      	movs	r2, #4
 8008360:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008362:	4b03      	ldr	r3, [pc, #12]	; (8008370 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008364:	4618      	mov	r0, r3
 8008366:	370c      	adds	r7, #12
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	200000dc 	.word	0x200000dc

08008374 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	4603      	mov	r3, r0
 800837c:	6039      	str	r1, [r7, #0]
 800837e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008380:	79fb      	ldrb	r3, [r7, #7]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d105      	bne.n	8008392 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	4907      	ldr	r1, [pc, #28]	; (80083a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800838a:	4808      	ldr	r0, [pc, #32]	; (80083ac <USBD_FS_ProductStrDescriptor+0x38>)
 800838c:	f7ff fdf8 	bl	8007f80 <USBD_GetString>
 8008390:	e004      	b.n	800839c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	4904      	ldr	r1, [pc, #16]	; (80083a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8008396:	4805      	ldr	r0, [pc, #20]	; (80083ac <USBD_FS_ProductStrDescriptor+0x38>)
 8008398:	f7ff fdf2 	bl	8007f80 <USBD_GetString>
  }
  return USBD_StrDesc;
 800839c:	4b02      	ldr	r3, [pc, #8]	; (80083a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20004444 	.word	0x20004444
 80083ac:	08008be4 	.word	0x08008be4

080083b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	6039      	str	r1, [r7, #0]
 80083ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	4904      	ldr	r1, [pc, #16]	; (80083d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083c0:	4804      	ldr	r0, [pc, #16]	; (80083d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083c2:	f7ff fddd 	bl	8007f80 <USBD_GetString>
  return USBD_StrDesc;
 80083c6:	4b02      	ldr	r3, [pc, #8]	; (80083d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20004444 	.word	0x20004444
 80083d4:	08008bfc 	.word	0x08008bfc

080083d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	6039      	str	r1, [r7, #0]
 80083e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	221a      	movs	r2, #26
 80083e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083ea:	f000 f843 	bl	8008474 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083ee:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	200000e0 	.word	0x200000e0

080083fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	6039      	str	r1, [r7, #0]
 8008406:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d105      	bne.n	800841a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	4907      	ldr	r1, [pc, #28]	; (8008430 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008412:	4808      	ldr	r0, [pc, #32]	; (8008434 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008414:	f7ff fdb4 	bl	8007f80 <USBD_GetString>
 8008418:	e004      	b.n	8008424 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	4904      	ldr	r1, [pc, #16]	; (8008430 <USBD_FS_ConfigStrDescriptor+0x34>)
 800841e:	4805      	ldr	r0, [pc, #20]	; (8008434 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008420:	f7ff fdae 	bl	8007f80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008424:	4b02      	ldr	r3, [pc, #8]	; (8008430 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop
 8008430:	20004444 	.word	0x20004444
 8008434:	08008c10 	.word	0x08008c10

08008438 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d105      	bne.n	8008456 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800844a:	683a      	ldr	r2, [r7, #0]
 800844c:	4907      	ldr	r1, [pc, #28]	; (800846c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800844e:	4808      	ldr	r0, [pc, #32]	; (8008470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008450:	f7ff fd96 	bl	8007f80 <USBD_GetString>
 8008454:	e004      	b.n	8008460 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4904      	ldr	r1, [pc, #16]	; (800846c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800845a:	4805      	ldr	r0, [pc, #20]	; (8008470 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800845c:	f7ff fd90 	bl	8007f80 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008460:	4b02      	ldr	r3, [pc, #8]	; (800846c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20004444 	.word	0x20004444
 8008470:	08008c1c 	.word	0x08008c1c

08008474 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800847a:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <Get_SerialNum+0x44>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008480:	4b0e      	ldr	r3, [pc, #56]	; (80084bc <Get_SerialNum+0x48>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008486:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <Get_SerialNum+0x4c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4413      	add	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d009      	beq.n	80084ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800849a:	2208      	movs	r2, #8
 800849c:	4909      	ldr	r1, [pc, #36]	; (80084c4 <Get_SerialNum+0x50>)
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f814 	bl	80084cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084a4:	2204      	movs	r2, #4
 80084a6:	4908      	ldr	r1, [pc, #32]	; (80084c8 <Get_SerialNum+0x54>)
 80084a8:	68b8      	ldr	r0, [r7, #8]
 80084aa:	f000 f80f 	bl	80084cc <IntToUnicode>
  }
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	1fff7a10 	.word	0x1fff7a10
 80084bc:	1fff7a14 	.word	0x1fff7a14
 80084c0:	1fff7a18 	.word	0x1fff7a18
 80084c4:	200000e2 	.word	0x200000e2
 80084c8:	200000f2 	.word	0x200000f2

080084cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084de:	2300      	movs	r3, #0
 80084e0:	75fb      	strb	r3, [r7, #23]
 80084e2:	e027      	b.n	8008534 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	0f1b      	lsrs	r3, r3, #28
 80084e8:	2b09      	cmp	r3, #9
 80084ea:	d80b      	bhi.n	8008504 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	0f1b      	lsrs	r3, r3, #28
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	7dfb      	ldrb	r3, [r7, #23]
 80084f4:	005b      	lsls	r3, r3, #1
 80084f6:	4619      	mov	r1, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	440b      	add	r3, r1
 80084fc:	3230      	adds	r2, #48	; 0x30
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	e00a      	b.n	800851a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	0f1b      	lsrs	r3, r3, #28
 8008508:	b2da      	uxtb	r2, r3
 800850a:	7dfb      	ldrb	r3, [r7, #23]
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	4619      	mov	r1, r3
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	440b      	add	r3, r1
 8008514:	3237      	adds	r2, #55	; 0x37
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008520:	7dfb      	ldrb	r3, [r7, #23]
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	3301      	adds	r3, #1
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	4413      	add	r3, r2
 800852a:	2200      	movs	r2, #0
 800852c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	3301      	adds	r3, #1
 8008532:	75fb      	strb	r3, [r7, #23]
 8008534:	7dfa      	ldrb	r2, [r7, #23]
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	429a      	cmp	r2, r3
 800853a:	d3d3      	bcc.n	80084e4 <IntToUnicode+0x18>
  }
}
 800853c:	bf00      	nop
 800853e:	bf00      	nop
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08a      	sub	sp, #40	; 0x28
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008554:	f107 0314 	add.w	r3, r7, #20
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	605a      	str	r2, [r3, #4]
 800855e:	609a      	str	r2, [r3, #8]
 8008560:	60da      	str	r2, [r3, #12]
 8008562:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800856c:	d13a      	bne.n	80085e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800856e:	2300      	movs	r3, #0
 8008570:	613b      	str	r3, [r7, #16]
 8008572:	4b1e      	ldr	r3, [pc, #120]	; (80085ec <HAL_PCD_MspInit+0xa0>)
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	4a1d      	ldr	r2, [pc, #116]	; (80085ec <HAL_PCD_MspInit+0xa0>)
 8008578:	f043 0301 	orr.w	r3, r3, #1
 800857c:	6313      	str	r3, [r2, #48]	; 0x30
 800857e:	4b1b      	ldr	r3, [pc, #108]	; (80085ec <HAL_PCD_MspInit+0xa0>)
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f003 0301 	and.w	r3, r3, #1
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800858a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800858e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008590:	2302      	movs	r3, #2
 8008592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008594:	2300      	movs	r3, #0
 8008596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008598:	2303      	movs	r3, #3
 800859a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800859c:	230a      	movs	r3, #10
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085a0:	f107 0314 	add.w	r3, r7, #20
 80085a4:	4619      	mov	r1, r3
 80085a6:	4812      	ldr	r0, [pc, #72]	; (80085f0 <HAL_PCD_MspInit+0xa4>)
 80085a8:	f7f9 fa94 	bl	8001ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <HAL_PCD_MspInit+0xa0>)
 80085ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b0:	4a0e      	ldr	r2, [pc, #56]	; (80085ec <HAL_PCD_MspInit+0xa0>)
 80085b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b6:	6353      	str	r3, [r2, #52]	; 0x34
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	4b0b      	ldr	r3, [pc, #44]	; (80085ec <HAL_PCD_MspInit+0xa0>)
 80085be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c0:	4a0a      	ldr	r2, [pc, #40]	; (80085ec <HAL_PCD_MspInit+0xa0>)
 80085c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085c6:	6453      	str	r3, [r2, #68]	; 0x44
 80085c8:	4b08      	ldr	r3, [pc, #32]	; (80085ec <HAL_PCD_MspInit+0xa0>)
 80085ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d0:	60fb      	str	r3, [r7, #12]
 80085d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085d4:	2200      	movs	r2, #0
 80085d6:	2100      	movs	r1, #0
 80085d8:	2043      	movs	r0, #67	; 0x43
 80085da:	f7f9 f9be 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085de:	2043      	movs	r0, #67	; 0x43
 80085e0:	f7f9 f9d7 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085e4:	bf00      	nop
 80085e6:	3728      	adds	r7, #40	; 0x28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40023800 	.word	0x40023800
 80085f0:	40020000 	.word	0x40020000

080085f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f7fe fb59 	bl	8006cc2 <USBD_LL_SetupStage>
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800862a:	78fa      	ldrb	r2, [r7, #3]
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	4613      	mov	r3, r2
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	78fb      	ldrb	r3, [r7, #3]
 8008640:	4619      	mov	r1, r3
 8008642:	f7fe fb93 	bl	8006d6c <USBD_LL_DataOutStage>
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b082      	sub	sp, #8
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	334c      	adds	r3, #76	; 0x4c
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	4619      	mov	r1, r3
 8008676:	f7fe fc2c 	bl	8006ed2 <USBD_LL_DataInStage>
}
 800867a:	bf00      	nop
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe fd60 	bl	8007156 <USBD_LL_SOF>
}
 8008696:	bf00      	nop
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80086a6:	2301      	movs	r3, #1
 80086a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d102      	bne.n	80086b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
 80086b6:	e008      	b.n	80086ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d102      	bne.n	80086c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80086c0:	2301      	movs	r3, #1
 80086c2:	73fb      	strb	r3, [r7, #15]
 80086c4:	e001      	b.n	80086ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80086c6:	f7f8 fa27 	bl	8000b18 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086d0:	7bfa      	ldrb	r2, [r7, #15]
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fe fd00 	bl	80070da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fe fca8 	bl	8007036 <USBD_LL_Reset>
}
 80086e6:	bf00      	nop
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
	...

080086f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fcfb 	bl	80070fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	6812      	ldr	r2, [r2, #0]
 8008712:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a1b      	ldr	r3, [r3, #32]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008724:	4b04      	ldr	r3, [pc, #16]	; (8008738 <HAL_PCD_SuspendCallback+0x48>)
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	4a03      	ldr	r2, [pc, #12]	; (8008738 <HAL_PCD_SuspendCallback+0x48>)
 800872a:	f043 0306 	orr.w	r3, r3, #6
 800872e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008730:	bf00      	nop
 8008732:	3708      	adds	r7, #8
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed00 	.word	0xe000ed00

0800873c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800874a:	4618      	mov	r0, r3
 800874c:	f7fe fceb 	bl	8007126 <USBD_LL_Resume>
}
 8008750:	bf00      	nop
 8008752:	3708      	adds	r7, #8
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800876a:	78fa      	ldrb	r2, [r7, #3]
 800876c:	4611      	mov	r1, r2
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fd43 	bl	80071fa <USBD_LL_IsoOUTIncomplete>
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe fcff 	bl	8007196 <USBD_LL_IsoINIncomplete>
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fd55 	bl	800725e <USBD_LL_DevConnected>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fd52 	bl	8007274 <USBD_LL_DevDisconnected>
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d13c      	bne.n	8008862 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80087e8:	4a20      	ldr	r2, [pc, #128]	; (800886c <USBD_LL_Init+0x94>)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a1e      	ldr	r2, [pc, #120]	; (800886c <USBD_LL_Init+0x94>)
 80087f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087f8:	4b1c      	ldr	r3, [pc, #112]	; (800886c <USBD_LL_Init+0x94>)
 80087fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008800:	4b1a      	ldr	r3, [pc, #104]	; (800886c <USBD_LL_Init+0x94>)
 8008802:	2204      	movs	r2, #4
 8008804:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008806:	4b19      	ldr	r3, [pc, #100]	; (800886c <USBD_LL_Init+0x94>)
 8008808:	2202      	movs	r2, #2
 800880a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800880c:	4b17      	ldr	r3, [pc, #92]	; (800886c <USBD_LL_Init+0x94>)
 800880e:	2200      	movs	r2, #0
 8008810:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008812:	4b16      	ldr	r3, [pc, #88]	; (800886c <USBD_LL_Init+0x94>)
 8008814:	2202      	movs	r2, #2
 8008816:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008818:	4b14      	ldr	r3, [pc, #80]	; (800886c <USBD_LL_Init+0x94>)
 800881a:	2200      	movs	r2, #0
 800881c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <USBD_LL_Init+0x94>)
 8008820:	2200      	movs	r2, #0
 8008822:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008824:	4b11      	ldr	r3, [pc, #68]	; (800886c <USBD_LL_Init+0x94>)
 8008826:	2200      	movs	r2, #0
 8008828:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800882a:	4b10      	ldr	r3, [pc, #64]	; (800886c <USBD_LL_Init+0x94>)
 800882c:	2200      	movs	r2, #0
 800882e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008830:	4b0e      	ldr	r3, [pc, #56]	; (800886c <USBD_LL_Init+0x94>)
 8008832:	2200      	movs	r2, #0
 8008834:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008836:	480d      	ldr	r0, [pc, #52]	; (800886c <USBD_LL_Init+0x94>)
 8008838:	f7f9 fad0 	bl	8001ddc <HAL_PCD_Init>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008842:	f7f8 f969 	bl	8000b18 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008846:	2180      	movs	r1, #128	; 0x80
 8008848:	4808      	ldr	r0, [pc, #32]	; (800886c <USBD_LL_Init+0x94>)
 800884a:	f7fa fd28 	bl	800329e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800884e:	2240      	movs	r2, #64	; 0x40
 8008850:	2100      	movs	r1, #0
 8008852:	4806      	ldr	r0, [pc, #24]	; (800886c <USBD_LL_Init+0x94>)
 8008854:	f7fa fcdc 	bl	8003210 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008858:	2280      	movs	r2, #128	; 0x80
 800885a:	2101      	movs	r1, #1
 800885c:	4803      	ldr	r0, [pc, #12]	; (800886c <USBD_LL_Init+0x94>)
 800885e:	f7fa fcd7 	bl	8003210 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20004644 	.word	0x20004644

08008870 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008886:	4618      	mov	r0, r3
 8008888:	f7f9 fbc5 	bl	8002016 <HAL_PCD_Start>
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4618      	mov	r0, r3
 8008894:	f000 f942 	bl	8008b1c <USBD_Get_USB_Status>
 8008898:	4603      	mov	r3, r0
 800889a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889c:	7bbb      	ldrb	r3, [r7, #14]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b084      	sub	sp, #16
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	4608      	mov	r0, r1
 80088b0:	4611      	mov	r1, r2
 80088b2:	461a      	mov	r2, r3
 80088b4:	4603      	mov	r3, r0
 80088b6:	70fb      	strb	r3, [r7, #3]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70bb      	strb	r3, [r7, #2]
 80088bc:	4613      	mov	r3, r2
 80088be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80088ce:	78bb      	ldrb	r3, [r7, #2]
 80088d0:	883a      	ldrh	r2, [r7, #0]
 80088d2:	78f9      	ldrb	r1, [r7, #3]
 80088d4:	f7fa f896 	bl	8002a04 <HAL_PCD_EP_Open>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 f91c 	bl	8008b1c <USBD_Get_USB_Status>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b084      	sub	sp, #16
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	460b      	mov	r3, r1
 80088fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800890c:	78fa      	ldrb	r2, [r7, #3]
 800890e:	4611      	mov	r1, r2
 8008910:	4618      	mov	r0, r3
 8008912:	f7fa f8df 	bl	8002ad4 <HAL_PCD_EP_Close>
 8008916:	4603      	mov	r3, r0
 8008918:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f8fd 	bl	8008b1c <USBD_Get_USB_Status>
 8008922:	4603      	mov	r3, r0
 8008924:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008926:	7bbb      	ldrb	r3, [r7, #14]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	460b      	mov	r3, r1
 800893a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800893c:	2300      	movs	r3, #0
 800893e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	4611      	mov	r1, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f7fa f9b7 	bl	8002cc2 <HAL_PCD_EP_SetStall>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 f8de 	bl	8008b1c <USBD_Get_USB_Status>
 8008960:	4603      	mov	r3, r0
 8008962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008964:	7bbb      	ldrb	r3, [r7, #14]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	460b      	mov	r3, r1
 8008978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008988:	78fa      	ldrb	r2, [r7, #3]
 800898a:	4611      	mov	r1, r2
 800898c:	4618      	mov	r0, r3
 800898e:	f7fa f9fc 	bl	8002d8a <HAL_PCD_EP_ClrStall>
 8008992:	4603      	mov	r3, r0
 8008994:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008996:	7bfb      	ldrb	r3, [r7, #15]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 f8bf 	bl	8008b1c <USBD_Get_USB_Status>
 800899e:	4603      	mov	r3, r0
 80089a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da0b      	bge.n	80089e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089c8:	78fb      	ldrb	r3, [r7, #3]
 80089ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089ce:	68f9      	ldr	r1, [r7, #12]
 80089d0:	4613      	mov	r3, r2
 80089d2:	00db      	lsls	r3, r3, #3
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	333e      	adds	r3, #62	; 0x3e
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	e00b      	b.n	80089f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	4613      	mov	r3, r2
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	440b      	add	r3, r1
 80089f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80089f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a1e:	78fa      	ldrb	r2, [r7, #3]
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f9 ffc9 	bl	80029ba <HAL_PCD_SetAddress>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 f874 	bl	8008b1c <USBD_Get_USB_Status>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	607a      	str	r2, [r7, #4]
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a60:	7af9      	ldrb	r1, [r7, #11]
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	f7fa f8e2 	bl	8002c2e <HAL_PCD_EP_Transmit>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 f853 	bl	8008b1c <USBD_Get_USB_Status>
 8008a76:	4603      	mov	r3, r0
 8008a78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	607a      	str	r2, [r7, #4]
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	460b      	mov	r3, r1
 8008a92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008aa2:	7af9      	ldrb	r1, [r7, #11]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	f7fa f85e 	bl	8002b68 <HAL_PCD_EP_Receive>
 8008aac:	4603      	mov	r3, r0
 8008aae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab0:	7dfb      	ldrb	r3, [r7, #23]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f832 	bl	8008b1c <USBD_Get_USB_Status>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008abc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fa f88e 	bl	8002bfe <HAL_PCD_EP_GetRxCount>
 8008ae2:	4603      	mov	r3, r0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008af4:	4b03      	ldr	r3, [pc, #12]	; (8008b04 <USBD_static_malloc+0x18>)
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
 8008b02:	bf00      	nop
 8008b04:	20004b50 	.word	0x20004b50

08008b08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]

}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d817      	bhi.n	8008b60 <USBD_Get_USB_Status+0x44>
 8008b30:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <USBD_Get_USB_Status+0x1c>)
 8008b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b36:	bf00      	nop
 8008b38:	08008b49 	.word	0x08008b49
 8008b3c:	08008b4f 	.word	0x08008b4f
 8008b40:	08008b55 	.word	0x08008b55
 8008b44:	08008b5b 	.word	0x08008b5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4c:	e00b      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	73fb      	strb	r3, [r7, #15]
    break;
 8008b52:	e008      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
    break;
 8008b58:	e005      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5e:	e002      	b.n	8008b66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	73fb      	strb	r3, [r7, #15]
    break;
 8008b64:	bf00      	nop
  }
  return usb_status;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <__libc_init_array>:
 8008b74:	b570      	push	{r4, r5, r6, lr}
 8008b76:	4d0d      	ldr	r5, [pc, #52]	; (8008bac <__libc_init_array+0x38>)
 8008b78:	4c0d      	ldr	r4, [pc, #52]	; (8008bb0 <__libc_init_array+0x3c>)
 8008b7a:	1b64      	subs	r4, r4, r5
 8008b7c:	10a4      	asrs	r4, r4, #2
 8008b7e:	2600      	movs	r6, #0
 8008b80:	42a6      	cmp	r6, r4
 8008b82:	d109      	bne.n	8008b98 <__libc_init_array+0x24>
 8008b84:	4d0b      	ldr	r5, [pc, #44]	; (8008bb4 <__libc_init_array+0x40>)
 8008b86:	4c0c      	ldr	r4, [pc, #48]	; (8008bb8 <__libc_init_array+0x44>)
 8008b88:	f000 f820 	bl	8008bcc <_init>
 8008b8c:	1b64      	subs	r4, r4, r5
 8008b8e:	10a4      	asrs	r4, r4, #2
 8008b90:	2600      	movs	r6, #0
 8008b92:	42a6      	cmp	r6, r4
 8008b94:	d105      	bne.n	8008ba2 <__libc_init_array+0x2e>
 8008b96:	bd70      	pop	{r4, r5, r6, pc}
 8008b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b9c:	4798      	blx	r3
 8008b9e:	3601      	adds	r6, #1
 8008ba0:	e7ee      	b.n	8008b80 <__libc_init_array+0xc>
 8008ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba6:	4798      	blx	r3
 8008ba8:	3601      	adds	r6, #1
 8008baa:	e7f2      	b.n	8008b92 <__libc_init_array+0x1e>
 8008bac:	08008c44 	.word	0x08008c44
 8008bb0:	08008c44 	.word	0x08008c44
 8008bb4:	08008c44 	.word	0x08008c44
 8008bb8:	08008c48 	.word	0x08008c48

08008bbc <memset>:
 8008bbc:	4402      	add	r2, r0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d100      	bne.n	8008bc6 <memset+0xa>
 8008bc4:	4770      	bx	lr
 8008bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bca:	e7f9      	b.n	8008bc0 <memset+0x4>

08008bcc <_init>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_fini>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr
